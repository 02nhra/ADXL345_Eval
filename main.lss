
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00007354  000073e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000549  008001aa  008001aa  00007492  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00007492  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000042f  00000000  00000000  00007532  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000312f  00000000  00000000  00007961  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009f5  00000000  00000000  0000aa90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028ae  00000000  00000000  0000b485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  0000dd34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d95  00000000  00000000  0000e114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003849  00000000  00000000  0000eea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  000126f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000068 <__c.2173>:
      68:	4e 6f 20 46 69 6c 65 20 43 72 65 61 74 65 64 21     No File Created!
      78:	0a 0d 00 00                                         ....

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e5       	ldi	r30, 0x54	; 84
      90:	f3 e7       	ldi	r31, 0x73	; 115
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	aa 3a       	cpi	r26, 0xAA	; 170
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	16 e0       	ldi	r17, 0x06	; 6
      a0:	aa ea       	ldi	r26, 0xAA	; 170
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a3 3f       	cpi	r26, 0xF3	; 243
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 61 03 	call	0x6c2	; 0x6c2 <main>
      b2:	0c 94 a8 39 	jmp	0x7350	; 0x7350 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <uart_putchar>:
    	
	cli();
}

static int uart_putchar(char c, FILE *stream)
{
      ba:	1f 93       	push	r17
      bc:	18 2f       	mov	r17, r24
  if (c == '\n')
      be:	8a 30       	cpi	r24, 0x0A	; 10
      c0:	19 f4       	brne	.+6      	; 0xc8 <uart_putchar+0xe>
    uart_putchar('\r', stream);
      c2:	8d e0       	ldi	r24, 0x0D	; 13
      c4:	0e 94 5d 00 	call	0xba	; 0xba <uart_putchar>
  
  loop_until_bit_is_set(UCSR0A, UDRE0);
      c8:	80 91 c0 00 	lds	r24, 0x00C0
      cc:	85 ff       	sbrs	r24, 5
      ce:	fc cf       	rjmp	.-8      	; 0xc8 <uart_putchar+0xe>
  UDR0 = c;
      d0:	10 93 c6 00 	sts	0x00C6, r17
  return 0;
}
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	1f 91       	pop	r17
      da:	08 95       	ret

000000dc <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
      dc:	80 91 c0 00 	lds	r24, 0x00C0
      e0:	87 ff       	sbrs	r24, 7
      e2:	fc cf       	rjmp	.-8      	; 0xdc <uart_getchar>
	return(UDR0);
      e4:	80 91 c6 00 	lds	r24, 0x00C6
}
      e8:	08 95       	ret

000000ea <delay_us>:
        delay_us(1000);
}

//General short delays
void delay_us(uint16_t x)
{    
      ea:	9c 01       	movw	r18, r24
    while(x > 256)
    {
        TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	07 c0       	rjmp	.+14     	; 0xfe <delay_us+0x14>
      f0:	87 bb       	out	0x17, r24	; 23
        TCNT2 = 0; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
      f2:	10 92 b2 00 	sts	0x00B2, r1
        while( (TIFR2 & (1<<TOV2)) == 0);
      f6:	b8 9b       	sbis	0x17, 0	; 23
      f8:	fe cf       	rjmp	.-4      	; 0xf6 <delay_us+0xc>
       
        x -= 256;
      fa:	20 50       	subi	r18, 0x00	; 0
      fc:	31 40       	sbci	r19, 0x01	; 1
}

//General short delays
void delay_us(uint16_t x)
{    
    while(x > 256)
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	21 30       	cpi	r18, 0x01	; 1
     102:	39 07       	cpc	r19, r25
     104:	a8 f7       	brcc	.-22     	; 0xf0 <delay_us+0x6>
        while( (TIFR2 & (1<<TOV2)) == 0);
       
        x -= 256;
    }

    TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	87 bb       	out	0x17, r24	; 23
    TCNT2= 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     10a:	82 2f       	mov	r24, r18
     10c:	81 95       	neg	r24
     10e:	80 93 b2 00 	sts	0x00B2, r24
    while( (TIFR2 & (1<<TOV2)) == 0);
     112:	b8 9b       	sbis	0x17, 0	; 23
     114:	fe cf       	rjmp	.-4      	; 0x112 <delay_us+0x28>
} 
     116:	08 95       	ret

00000118 <delay_ms>:
	return 1;
}

//General short delays
void delay_ms(uint16_t x)
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	ec 01       	movw	r28, r24
     11e:	05 c0       	rjmp	.+10     	; 0x12a <delay_ms+0x12>
    for (; x > 0 ; x--)
        delay_us(1000);
     120:	88 ee       	ldi	r24, 0xE8	; 232
     122:	93 e0       	ldi	r25, 0x03	; 3
     124:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
    for (; x > 0 ; x--)
     128:	21 97       	sbiw	r28, 0x01	; 1
     12a:	20 97       	sbiw	r28, 0x00	; 0
     12c:	c9 f7       	brne	.-14     	; 0x120 <delay_ms+0x8>
        delay_us(1000);
}
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	08 95       	ret

00000134 <get_command>:
		return 0;
	}
}

char get_command(char * command)
{
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	ec 01       	movw	r28, r24
  return 0;
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
     13c:	80 91 c0 00 	lds	r24, 0x00C0
     140:	87 ff       	sbrs	r24, 7
     142:	fc cf       	rjmp	.-8      	; 0x13c <get_command+0x8>
	return(UDR0);
     144:	80 91 c6 00 	lds	r24, 0x00C6
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	17 c0       	rjmp	.+46     	; 0x17a <get_command+0x46>
	char receive_char=0, command_buffer_count=0;
	
	//Get a command from the prompt (A command can have a maximum of MAX_COMMAND_LENGTH characters). Command is ended with a carriage return ('Enter' key)
	receive_char = uart_getchar();
	while(receive_char != '\r'){
		*command=receive_char;
     14c:	89 93       	st	Y+, r24
		printf("%c", *command++);
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 56 36 	call	0x6cac	; 0x6cac <putchar>
		if((command_buffer_count == 0) || (command_buffer_count == 2) || (command_buffer_count == 4))printf(" ");
     154:	11 23       	and	r17, r17
     156:	21 f0       	breq	.+8      	; 0x160 <get_command+0x2c>
     158:	12 30       	cpi	r17, 0x02	; 2
     15a:	11 f0       	breq	.+4      	; 0x160 <get_command+0x2c>
     15c:	14 30       	cpi	r17, 0x04	; 4
     15e:	21 f4       	brne	.+8      	; 0x168 <get_command+0x34>
     160:	80 e2       	ldi	r24, 0x20	; 32
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 56 36 	call	0x6cac	; 0x6cac <putchar>
		command_buffer_count++;
     168:	1f 5f       	subi	r17, 0xFF	; 255
		if(command_buffer_count == MAX_COMMAND_LENGTH)break; 	//If we've added MAX_COMMAND_LENGTH characters to the buffer, get out of this loop!
     16a:	15 30       	cpi	r17, 0x05	; 5
     16c:	41 f0       	breq	.+16     	; 0x17e <get_command+0x4a>
  return 0;
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
     16e:	80 91 c0 00 	lds	r24, 0x00C0
     172:	87 ff       	sbrs	r24, 7
     174:	fc cf       	rjmp	.-8      	; 0x16e <get_command+0x3a>
	return(UDR0);
     176:	80 91 c6 00 	lds	r24, 0x00C6
{
	char receive_char=0, command_buffer_count=0;
	
	//Get a command from the prompt (A command can have a maximum of MAX_COMMAND_LENGTH characters). Command is ended with a carriage return ('Enter' key)
	receive_char = uart_getchar();
	while(receive_char != '\r'){
     17a:	8d 30       	cpi	r24, 0x0D	; 13
     17c:	39 f7       	brne	.-50     	; 0x14c <get_command+0x18>
		if((command_buffer_count == 0) || (command_buffer_count == 2) || (command_buffer_count == 4))printf(" ");
		command_buffer_count++;
		if(command_buffer_count == MAX_COMMAND_LENGTH)break; 	//If we've added MAX_COMMAND_LENGTH characters to the buffer, get out of this loop!
		receive_char =  uart_getchar();
	}
	*command='\0';	//Terminate the command string with a NULL character. This is so command_buffer[] can be treated as a string.
     17e:	18 82       	st	Y, r1
	if((command_buffer_count == 0) || (command_buffer_count == 2) || (command_buffer_count == 4))return 0;
     180:	11 23       	and	r17, r17
     182:	39 f0       	breq	.+14     	; 0x192 <get_command+0x5e>
     184:	12 30       	cpi	r17, 0x02	; 2
     186:	29 f0       	breq	.+10     	; 0x192 <get_command+0x5e>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	14 30       	cpi	r17, 0x04	; 4
     18c:	19 f0       	breq	.+6      	; 0x194 <get_command+0x60>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	01 c0       	rjmp	.+2      	; 0x194 <get_command+0x60>
     192:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	08 95       	ret

0000019c <execute_command>:
    TCNT2= 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
    while( (TIFR2 & (1<<TOV2)) == 0);
} 

char execute_command(char * command)
{
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <execute_command+0x12>
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <execute_command+0x14>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	7c 01       	movw	r14, r24
	char address=0;
	char command_length=strlen(command);
     1b6:	fc 01       	movw	r30, r24
     1b8:	01 90       	ld	r0, Z+
     1ba:	00 20       	and	r0, r0
     1bc:	e9 f7       	brne	.-6      	; 0x1b8 <execute_command+0x1c>
     1be:	31 97       	sbiw	r30, 0x01	; 1
     1c0:	de 2e       	mov	r13, r30
     1c2:	d8 1a       	sub	r13, r24
	char address_string[2], register_string[2];
	char register_value=0;
	
	//Every command that has a payload has the address in the first two positions of the command payload
	sprintf(address_string, "%c%c", command[1], command[2]);
     1c4:	8d b7       	in	r24, 0x3d	; 61
     1c6:	9e b7       	in	r25, 0x3e	; 62
     1c8:	08 97       	sbiw	r24, 0x08	; 8
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	9e bf       	out	0x3e, r25	; 62
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	8d bf       	out	0x3d, r24	; 61
     1d4:	ed b7       	in	r30, 0x3d	; 61
     1d6:	fe b7       	in	r31, 0x3e	; 62
     1d8:	31 96       	adiw	r30, 0x01	; 1
     1da:	8e 01       	movw	r16, r28
     1dc:	0f 5f       	subi	r16, 0xFF	; 255
     1de:	1f 4f       	sbci	r17, 0xFF	; 255
     1e0:	ad b7       	in	r26, 0x3d	; 61
     1e2:	be b7       	in	r27, 0x3e	; 62
     1e4:	12 96       	adiw	r26, 0x02	; 2
     1e6:	1c 93       	st	X, r17
     1e8:	0e 93       	st	-X, r16
     1ea:	11 97       	sbiw	r26, 0x01	; 1
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	93 83       	std	Z+3, r25	; 0x03
     1f2:	82 83       	std	Z+2, r24	; 0x02
     1f4:	d7 01       	movw	r26, r14
     1f6:	11 96       	adiw	r26, 0x01	; 1
     1f8:	8c 91       	ld	r24, X
     1fa:	11 97       	sbiw	r26, 0x01	; 1
     1fc:	84 83       	std	Z+4, r24	; 0x04
     1fe:	15 82       	std	Z+5, r1	; 0x05
     200:	12 96       	adiw	r26, 0x02	; 2
     202:	8c 91       	ld	r24, X
     204:	86 83       	std	Z+6, r24	; 0x06
     206:	17 82       	std	Z+7, r1	; 0x07
     208:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
	address = (char)strtol(address_string, NULL, 16);	//Convert the address string to a hexadecimal value
     20c:	ed b7       	in	r30, 0x3d	; 61
     20e:	fe b7       	in	r31, 0x3e	; 62
     210:	38 96       	adiw	r30, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	fe bf       	out	0x3e, r31	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	ed bf       	out	0x3d, r30	; 61
     21c:	c8 01       	movw	r24, r16
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	40 e1       	ldi	r20, 0x10	; 16
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	0e 94 95 34 	call	0x692a	; 0x692a <strtol>
     22a:	c6 2e       	mov	r12, r22

	//Check to see if we received the read command
	if(command[0] == 'R' || command[0] == 'r')
     22c:	d7 01       	movw	r26, r14
     22e:	8c 91       	ld	r24, X
     230:	82 35       	cpi	r24, 0x52	; 82
     232:	11 f0       	breq	.+4      	; 0x238 <execute_command+0x9c>
     234:	82 37       	cpi	r24, 0x72	; 114
     236:	81 f4       	brne	.+32     	; 0x258 <execute_command+0xbc>
	{
		//Make sure received at least enough characters for a valid command
		if(command_length != 3) return 0;	
     238:	b3 e0       	ldi	r27, 0x03	; 3
     23a:	db 16       	cp	r13, r27
     23c:	09 f0       	breq	.+2      	; 0x240 <execute_command+0xa4>
     23e:	c1 c0       	rjmp	.+386    	; 0x3c2 <execute_command+0x226>
	
		register_value=adxl345_read(address);
     240:	8c 2d       	mov	r24, r12
     242:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     246:	18 2f       	mov	r17, r24
		printf("\nReg. Address: %02x\n", address);
     248:	00 d0       	rcall	.+0      	; 0x24a <execute_command+0xae>
     24a:	00 d0       	rcall	.+0      	; 0x24c <execute_command+0xb0>
     24c:	ed b7       	in	r30, 0x3d	; 61
     24e:	fe b7       	in	r31, 0x3e	; 62
     250:	31 96       	adiw	r30, 0x01	; 1
     252:	85 e0       	ldi	r24, 0x05	; 5
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	48 c0       	rjmp	.+144    	; 0x2e8 <execute_command+0x14c>
		printf("Reg. Value: %02x", register_value);
		return 1;
	}
	else if(command[0]=='w' || command[0] == 'W')
     258:	87 37       	cpi	r24, 0x77	; 119
     25a:	19 f0       	breq	.+6      	; 0x262 <execute_command+0xc6>
     25c:	87 35       	cpi	r24, 0x57	; 87
     25e:	09 f0       	breq	.+2      	; 0x262 <execute_command+0xc6>
     260:	5a c0       	rjmp	.+180    	; 0x316 <execute_command+0x17a>
	{
		//Make sure we received enough characters for this command
		if(command_length != 5) return 0;
     262:	b5 e0       	ldi	r27, 0x05	; 5
     264:	db 16       	cp	r13, r27
     266:	09 f0       	breq	.+2      	; 0x26a <execute_command+0xce>
     268:	ac c0       	rjmp	.+344    	; 0x3c2 <execute_command+0x226>

		//Get the value to be written to the register
		sprintf(register_string, "%c%c", command[3], command[4]);
     26a:	ed b7       	in	r30, 0x3d	; 61
     26c:	fe b7       	in	r31, 0x3e	; 62
     26e:	38 97       	sbiw	r30, 0x08	; 8
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	fe bf       	out	0x3e, r31	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	ed bf       	out	0x3d, r30	; 61
     27a:	31 96       	adiw	r30, 0x01	; 1
     27c:	8e 01       	movw	r16, r28
     27e:	0d 5f       	subi	r16, 0xFD	; 253
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	ad b7       	in	r26, 0x3d	; 61
     284:	be b7       	in	r27, 0x3e	; 62
     286:	12 96       	adiw	r26, 0x02	; 2
     288:	1c 93       	st	X, r17
     28a:	0e 93       	st	-X, r16
     28c:	11 97       	sbiw	r26, 0x01	; 1
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	93 83       	std	Z+3, r25	; 0x03
     294:	82 83       	std	Z+2, r24	; 0x02
     296:	d7 01       	movw	r26, r14
     298:	13 96       	adiw	r26, 0x03	; 3
     29a:	8c 91       	ld	r24, X
     29c:	13 97       	sbiw	r26, 0x03	; 3
     29e:	84 83       	std	Z+4, r24	; 0x04
     2a0:	15 82       	std	Z+5, r1	; 0x05
     2a2:	14 96       	adiw	r26, 0x04	; 4
     2a4:	8c 91       	ld	r24, X
     2a6:	86 83       	std	Z+6, r24	; 0x06
     2a8:	17 82       	std	Z+7, r1	; 0x07
     2aa:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
		register_value = (char)strtol(register_string, NULL, 16);
     2ae:	ed b7       	in	r30, 0x3d	; 61
     2b0:	fe b7       	in	r31, 0x3e	; 62
     2b2:	38 96       	adiw	r30, 0x08	; 8
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	fe bf       	out	0x3e, r31	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	ed bf       	out	0x3d, r30	; 61
     2be:	c8 01       	movw	r24, r16
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	40 e1       	ldi	r20, 0x10	; 16
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	0e 94 95 34 	call	0x692a	; 0x692a <strtol>
		//Now write the value to the register
		adxl345_write(address, register_value);
     2cc:	8c 2d       	mov	r24, r12
     2ce:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
		//Now read back the reg to verify
		register_value=adxl345_read(address);
     2d2:	8c 2d       	mov	r24, r12
     2d4:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     2d8:	18 2f       	mov	r17, r24
		printf("\nReg. Address: %x\n", address);
     2da:	00 d0       	rcall	.+0      	; 0x2dc <execute_command+0x140>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <execute_command+0x142>
     2de:	ed b7       	in	r30, 0x3d	; 61
     2e0:	fe b7       	in	r31, 0x3e	; 62
     2e2:	31 96       	adiw	r30, 0x01	; 1
     2e4:	8b e2       	ldi	r24, 0x2B	; 43
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	ad b7       	in	r26, 0x3d	; 61
     2ea:	be b7       	in	r27, 0x3e	; 62
     2ec:	12 96       	adiw	r26, 0x02	; 2
     2ee:	9c 93       	st	X, r25
     2f0:	8e 93       	st	-X, r24
     2f2:	11 97       	sbiw	r26, 0x01	; 1
     2f4:	c2 82       	std	Z+2, r12	; 0x02
     2f6:	13 82       	std	Z+3, r1	; 0x03
     2f8:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <printf>
		printf("Reg. Value: %02x", register_value);
     2fc:	ed b7       	in	r30, 0x3d	; 61
     2fe:	fe b7       	in	r31, 0x3e	; 62
     300:	31 96       	adiw	r30, 0x01	; 1
     302:	8a e1       	ldi	r24, 0x1A	; 26
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	ad b7       	in	r26, 0x3d	; 61
     308:	be b7       	in	r27, 0x3e	; 62
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	9c 93       	st	X, r25
     30e:	8e 93       	st	-X, r24
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	12 83       	std	Z+2, r17	; 0x02
     314:	17 c0       	rjmp	.+46     	; 0x344 <execute_command+0x1a8>
		return 1;
	}
	//Check to see if the address was given in 'Short-Hand' (Ctrl+'digit')
	else if(command[0] < 29)
     316:	8d 31       	cpi	r24, 0x1D	; 29
     318:	f0 f4       	brcc	.+60     	; 0x356 <execute_command+0x1ba>
	{
		if(command_length > 1) return 0;
     31a:	b1 e0       	ldi	r27, 0x01	; 1
     31c:	bd 15       	cp	r27, r13
     31e:	08 f4       	brcc	.+2      	; 0x322 <execute_command+0x186>
     320:	50 c0       	rjmp	.+160    	; 0x3c2 <execute_command+0x226>
		
		//Convert the character to the proper address value
		address = command[0]+29;
		register_value=adxl345_read(address);
     322:	83 5e       	subi	r24, 0xE3	; 227
     324:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
		//For Debugging Purposes...
		//printf("\nReg. Address: %x\n", address);
		//printf("Reg. Value: %02x", register_value);
		printf("%02x", register_value);
     328:	00 d0       	rcall	.+0      	; 0x32a <execute_command+0x18e>
     32a:	00 d0       	rcall	.+0      	; 0x32c <execute_command+0x190>
     32c:	ed b7       	in	r30, 0x3d	; 61
     32e:	fe b7       	in	r31, 0x3e	; 62
     330:	31 96       	adiw	r30, 0x01	; 1
     332:	2e e3       	ldi	r18, 0x3E	; 62
     334:	31 e0       	ldi	r19, 0x01	; 1
     336:	ad b7       	in	r26, 0x3d	; 61
     338:	be b7       	in	r27, 0x3e	; 62
     33a:	12 96       	adiw	r26, 0x02	; 2
     33c:	3c 93       	st	X, r19
     33e:	2e 93       	st	-X, r18
     340:	11 97       	sbiw	r26, 0x01	; 1
     342:	82 83       	std	Z+2, r24	; 0x02
     344:	13 82       	std	Z+3, r1	; 0x03
     346:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <printf>
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	39 c0       	rjmp	.+114    	; 0x3c8 <execute_command+0x22c>
		return 1;
	}
	else if(command[0]==30)
     356:	8e 31       	cpi	r24, 0x1E	; 30
     358:	19 f5       	brne	.+70     	; 0x3a0 <execute_command+0x204>
	{
		if(command_length > 1) return 0;
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	bd 15       	cp	r27, r13
     35e:	88 f1       	brcs	.+98     	; 0x3c2 <execute_command+0x226>
     360:	1d e1       	ldi	r17, 0x1D	; 29
	
		for(address=29; address<58; address++)
		{
			printf("%02x,", adxl345_read(address));
     362:	83 e4       	ldi	r24, 0x43	; 67
     364:	e8 2e       	mov	r14, r24
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	f8 2e       	mov	r15, r24
     36a:	81 2f       	mov	r24, r17
     36c:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     370:	00 d0       	rcall	.+0      	; 0x372 <execute_command+0x1d6>
     372:	00 d0       	rcall	.+0      	; 0x374 <execute_command+0x1d8>
     374:	ed b7       	in	r30, 0x3d	; 61
     376:	fe b7       	in	r31, 0x3e	; 62
     378:	31 96       	adiw	r30, 0x01	; 1
     37a:	ad b7       	in	r26, 0x3d	; 61
     37c:	be b7       	in	r27, 0x3e	; 62
     37e:	12 96       	adiw	r26, 0x02	; 2
     380:	fc 92       	st	X, r15
     382:	ee 92       	st	-X, r14
     384:	11 97       	sbiw	r26, 0x01	; 1
     386:	82 83       	std	Z+2, r24	; 0x02
     388:	13 82       	std	Z+3, r1	; 0x03
     38a:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <printf>
	}
	else if(command[0]==30)
	{
		if(command_length > 1) return 0;
	
		for(address=29; address<58; address++)
     38e:	1f 5f       	subi	r17, 0xFF	; 255
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	1a 33       	cpi	r17, 0x3A	; 58
     39a:	39 f7       	brne	.-50     	; 0x36a <execute_command+0x1ce>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	14 c0       	rjmp	.+40     	; 0x3c8 <execute_command+0x22c>
		{
			printf("%02x,", adxl345_read(address));
		}
		return 1;
	}
	else if(command[0]=='s' || command[0] == 'S')return 2;
     3a0:	83 37       	cpi	r24, 0x73	; 115
     3a2:	89 f0       	breq	.+34     	; 0x3c6 <execute_command+0x22a>
     3a4:	83 35       	cpi	r24, 0x53	; 83
     3a6:	79 f0       	breq	.+30     	; 0x3c6 <execute_command+0x22a>
	else{
		printf("\nInvalid Command");
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <execute_command+0x20e>
     3aa:	89 e4       	ldi	r24, 0x49	; 73
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	ed b7       	in	r30, 0x3d	; 61
     3b0:	fe b7       	in	r31, 0x3e	; 62
     3b2:	92 83       	std	Z+2, r25	; 0x02
     3b4:	81 83       	std	Z+1, r24	; 0x01
     3b6:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <printf>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <execute_command+0x22c>
		return 0;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <execute_command+0x22c>
     3c6:	82 e0       	ldi	r24, 0x02	; 2
	}
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	08 95       	ret

000003e2 <init_filesystem>:
	fat_write_file(*file_handle, (unsigned char*)buf, strlen(buf));
	sd_raw_sync();
}

char init_filesystem(void)
{
     3e2:	0f 93       	push	r16
	//setup sd card slot 
	if(!sd_raw_init())
     3e4:	0e 94 89 0c 	call	0x1912	; 0x1912 <sd_raw_init>
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <init_filesystem+0xc>
     3ec:	45 c0       	rjmp	.+138    	; 0x478 <init_filesystem+0x96>
#endif
		return 0;
	}

	//open first partition
	partition = partition_open(sd_raw_read,
     3ee:	8f e0       	ldi	r24, 0x0F	; 15
     3f0:	9a e0       	ldi	r25, 0x0A	; 10
     3f2:	6b eb       	ldi	r22, 0xBB	; 187
     3f4:	7b e0       	ldi	r23, 0x0B	; 11
     3f6:	40 e1       	ldi	r20, 0x10	; 16
     3f8:	58 e0       	ldi	r21, 0x08	; 8
     3fa:	21 ec       	ldi	r18, 0xC1	; 193
     3fc:	3d e0       	ldi	r19, 0x0D	; 13
     3fe:	00 e0       	ldi	r16, 0x00	; 0
     400:	0e 94 6c 05 	call	0xad8	; 0xad8 <partition_open>
     404:	90 93 e0 04 	sts	0x04E0, r25
     408:	80 93 df 04 	sts	0x04DF, r24
									0,
#endif
									0
							   );

	if(!partition)
     40c:	89 2b       	or	r24, r25
     40e:	89 f4       	brne	.+34     	; 0x432 <init_filesystem+0x50>
	{
		//If the partition did not open, assume the storage device
		//is a "superfloppy", i.e. has no MBR.
		partition = partition_open(sd_raw_read,
     410:	8f e0       	ldi	r24, 0x0F	; 15
     412:	9a e0       	ldi	r25, 0x0A	; 10
     414:	6b eb       	ldi	r22, 0xBB	; 187
     416:	7b e0       	ldi	r23, 0x0B	; 11
     418:	40 e1       	ldi	r20, 0x10	; 16
     41a:	58 e0       	ldi	r21, 0x08	; 8
     41c:	21 ec       	ldi	r18, 0xC1	; 193
     41e:	3d e0       	ldi	r19, 0x0D	; 13
     420:	0f ef       	ldi	r16, 0xFF	; 255
     422:	0e 94 6c 05 	call	0xad8	; 0xad8 <partition_open>
     426:	90 93 e0 04 	sts	0x04E0, r25
     42a:	80 93 df 04 	sts	0x04DF, r24
								   0,
								   0,
#endif
								   -1
								  );
		if(!partition)
     42e:	89 2b       	or	r24, r25
     430:	19 f1       	breq	.+70     	; 0x478 <init_filesystem+0x96>
		}
	}

	//Open file system
	//struct fat_fs_struct* fs = fat_open(partition);
	fs = fat_open(partition);
     432:	80 91 df 04 	lds	r24, 0x04DF
     436:	90 91 e0 04 	lds	r25, 0x04E0
     43a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <fat_open>
     43e:	90 93 ad 04 	sts	0x04AD, r25
     442:	80 93 ac 04 	sts	0x04AC, r24
	if(!fs)
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	b9 f0       	breq	.+46     	; 0x478 <init_filesystem+0x96>
		return 0;
	}

	//Open root directory
	//struct fat_dir_entry_struct directory;
	fat_get_dir_entry_of_path(fs, "/", &directory);
     44a:	6a e5       	ldi	r22, 0x5A	; 90
     44c:	71 e0       	ldi	r23, 0x01	; 1
     44e:	4e ea       	ldi	r20, 0xAE	; 174
     450:	54 e0       	ldi	r21, 0x04	; 4
     452:	0e 94 2b 31 	call	0x6256	; 0x6256 <fat_get_dir_entry_of_path>

	//struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
	dd=fat_open_dir(fs, &directory);
     456:	80 91 ac 04 	lds	r24, 0x04AC
     45a:	90 91 ad 04 	lds	r25, 0x04AD
     45e:	6e ea       	ldi	r22, 0xAE	; 174
     460:	74 e0       	ldi	r23, 0x04	; 4
     462:	0e 94 a2 30 	call	0x6144	; 0x6144 <fat_open_dir>
     466:	90 93 e8 04 	sts	0x04E8, r25
     46a:	80 93 e7 04 	sts	0x04E7, r24
     46e:	20 e0       	ldi	r18, 0x00	; 0
     470:	89 2b       	or	r24, r25
     472:	19 f0       	breq	.+6      	; 0x47a <init_filesystem+0x98>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	01 c0       	rjmp	.+2      	; 0x47a <init_filesystem+0x98>
     478:	20 e0       	ldi	r18, 0x00	; 0
		printf_P(PSTR("opening root directory failed\n"));
#endif
		return 0;
	}
	return 1;
}
     47a:	82 2f       	mov	r24, r18
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <save_data>:
//Output: buffer array is saved to LOG_FILE
//Description: Saves the buf character array to the SD card.
//CONDITIONS: LOG_FILE must be initialized to the handle of an open file.
void save_data(struct fat_file_struct **file_handle, const char * const buf)
{
	fat_write_file(*file_handle, (unsigned char*)buf, strlen(buf));
     480:	db 01       	movw	r26, r22
     482:	0d 90       	ld	r0, X+
     484:	00 20       	and	r0, r0
     486:	e9 f7       	brne	.-6      	; 0x482 <save_data+0x2>
     488:	11 97       	sbiw	r26, 0x01	; 1
     48a:	a6 1b       	sub	r26, r22
     48c:	b7 0b       	sbc	r27, r23
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	91 81       	ldd	r25, Z+1	; 0x01
     494:	ad 01       	movw	r20, r26
     496:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <fat_write_file>
	sd_raw_sync();
     49a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <sd_raw_sync>
}
     49e:	08 95       	ret

000004a0 <ioinit>:
//Outputs:	None
void ioinit(void)
{
    //1 = output, 0 = input
	
	adxl345_hw_setup();
     4a0:	0e 94 bc 31 	call	0x6378	; 0x6378 <adxl345_hw_setup>
	
	DDRD |= (1<<TX_O)|(1<<STAT3)|(1<<STAT2)|(1<<STAT1);		//Define Port D Outputs
     4a4:	8a b1       	in	r24, 0x0a	; 10
     4a6:	82 6e       	ori	r24, 0xE2	; 226
     4a8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<RX_I);		//Use internal pull-ups on these inputs
     4aa:	58 9a       	sbi	0x0b, 0	; 11
    DDRD &= ~(1<<RX_I);	//Define Port D inputs
     4ac:	50 98       	cbi	0x0a, 0	; 10
	
	//Set Extra Pins to Outputs for testing
	DDRC |= 0xF0;
     4ae:	87 b1       	in	r24, 0x07	; 7
     4b0:	80 6f       	ori	r24, 0xF0	; 240
     4b2:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0x03;
     4b4:	84 b1       	in	r24, 0x04	; 4
     4b6:	83 60       	ori	r24, 0x03	; 3
     4b8:	84 b9       	out	0x04, r24	; 4
	
    UBRR0H = (MYUBRR >> 8) & 0x7F;	//Make sure highest bit(URSEL) is 0 indicating we are writing to UBRRH
     4ba:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = MYUBRR;
     4be:	89 e1       	ldi	r24, 0x19	; 25
     4c0:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0A = (1<<U2X0);					//Double the UART Speed
     4c4:	22 e0       	ldi	r18, 0x02	; 2
     4c6:	20 93 c0 00 	sts	0x00C0, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		//Enable Rx and Tx in UART
     4ca:	88 e1       	ldi	r24, 0x18	; 24
     4cc:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);		//8-Bit Characters
     4d0:	86 e0       	ldi	r24, 0x06	; 6
     4d2:	80 93 c2 00 	sts	0x00C2, r24
    stdout = &mystdout; //Required for printf init
     4d6:	8f e8       	ldi	r24, 0x8F	; 143
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	90 93 ee 06 	sts	0x06EE, r25
     4de:	80 93 ed 06 	sts	0x06ED, r24
	
	// Init timer 2
	//Set Prescaler to 8. (Timer Frequency set to 1Mhz
	TCCR2B = (1<<CS21); 	//Divde clock by 8 for 1 Mhz Timer 2 Frequency
     4e2:	20 93 b1 00 	sts	0x00B1, r18
    	
	cli();
     4e6:	f8 94       	cli
}
     4e8:	08 95       	ret

000004ea <find_file_in_dir>:

    return 0;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	eb 01       	movw	r28, r22
     4f8:	8a 01       	movw	r16, r20
     4fa:	79 01       	movw	r14, r18
     4fc:	0b c0       	rjmp	.+22     	; 0x514 <find_file_in_dir+0x2a>
    while(fat_read_dir(dd, dir_entry))
     4fe:	c7 01       	movw	r24, r14
     500:	b8 01       	movw	r22, r16
     502:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <strcmp>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	29 f4       	brne	.+10     	; 0x514 <find_file_in_dir+0x2a>
        {
            fat_reset_dir(dd);
     50a:	ce 01       	movw	r24, r28
     50c:	0e 94 57 18 	call	0x30ae	; 0x30ae <fat_reset_dir>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	06 c0       	rjmp	.+12     	; 0x520 <find_file_in_dir+0x36>
    return 0;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
     514:	ce 01       	movw	r24, r28
     516:	b7 01       	movw	r22, r14
     518:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <fat_read_dir>
     51c:	88 23       	and	r24, r24
     51e:	79 f7       	brne	.-34     	; 0x4fe <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	08 95       	ret

0000052e <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	df 93       	push	r29
     538:	cf 93       	push	r28
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	e1 97       	sbiw	r28, 0x31	; 49
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	8c 01       	movw	r16, r24
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
     54c:	7e 01       	movw	r14, r28
     54e:	08 94       	sec
     550:	e1 1c       	adc	r14, r1
     552:	f1 1c       	adc	r15, r1
     554:	97 01       	movw	r18, r14
     556:	0e 94 75 02 	call	0x4ea	; 0x4ea <find_file_in_dir>
     55a:	88 23       	and	r24, r24
     55c:	19 f4       	brne	.+6      	; 0x564 <open_file_in_dir+0x36>
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	05 c0       	rjmp	.+10     	; 0x56e <open_file_in_dir+0x40>
        return 0;

    return fat_open_file(fs, &file_entry);
     564:	c8 01       	movw	r24, r16
     566:	b7 01       	movw	r22, r14
     568:	0e 94 e3 30 	call	0x61c6	; 0x61c6 <fat_open_file>
     56c:	9c 01       	movw	r18, r24
}
     56e:	c9 01       	movw	r24, r18
     570:	e1 96       	adiw	r28, 0x31	; 49
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	08 95       	ret

0000058a <create_log_file>:
    while( !(UCSR0A & (1<<RXC0)) );
	return(UDR0);
}

struct fat_file_struct* create_log_file(void)
{
     58a:	bf 92       	push	r11
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	df 93       	push	r29
     59a:	cf 93       	push	r28
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	c1 55       	subi	r28, 0x51	; 81
     5a2:	d0 40       	sbci	r29, 0x00	; 0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
	struct fat_dir_entry_struct file_entry;
	char name[32];
	int file_number=0;
	
	sprintf(name, "ADXL345_%03d.csv", file_number);
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <create_log_file+0x26>
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <create_log_file+0x28>
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <create_log_file+0x2a>
     5b4:	ed b7       	in	r30, 0x3d	; 61
     5b6:	fe b7       	in	r31, 0x3e	; 62
     5b8:	31 96       	adiw	r30, 0x01	; 1
     5ba:	8e 01       	movw	r16, r28
     5bc:	0f 5f       	subi	r16, 0xFF	; 255
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	ad b7       	in	r26, 0x3d	; 61
     5c2:	be b7       	in	r27, 0x3e	; 62
     5c4:	12 96       	adiw	r26, 0x02	; 2
     5c6:	1c 93       	st	X, r17
     5c8:	0e 93       	st	-X, r16
     5ca:	11 97       	sbiw	r26, 0x01	; 1
     5cc:	9c e5       	ldi	r25, 0x5C	; 92
     5ce:	e9 2e       	mov	r14, r25
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	f9 2e       	mov	r15, r25
     5d4:	f3 82       	std	Z+3, r15	; 0x03
     5d6:	e2 82       	std	Z+2, r14	; 0x02
     5d8:	15 82       	std	Z+5, r1	; 0x05
     5da:	14 82       	std	Z+4, r1	; 0x04
     5dc:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
     5e0:	cc 24       	eor	r12, r12
     5e2:	dd 24       	eor	r13, r13
     5e4:	ed b7       	in	r30, 0x3d	; 61
     5e6:	fe b7       	in	r31, 0x3e	; 62
     5e8:	36 96       	adiw	r30, 0x06	; 6
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	fe bf       	out	0x3e, r31	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	ed bf       	out	0x3d, r30	; 61
	while(find_file_in_dir(fs,dd,name,&directory)){
		file_number++;
		sprintf(name, "ADXL345_%03d.csv", file_number);
     5f4:	be 2c       	mov	r11, r14
     5f6:	ef 2c       	mov	r14, r15
     5f8:	1e c0       	rjmp	.+60     	; 0x636 <create_log_file+0xac>
	char name[32];
	int file_number=0;
	
	sprintf(name, "ADXL345_%03d.csv", file_number);
	while(find_file_in_dir(fs,dd,name,&directory)){
		file_number++;
     5fa:	08 94       	sec
     5fc:	c1 1c       	adc	r12, r1
     5fe:	d1 1c       	adc	r13, r1
		sprintf(name, "ADXL345_%03d.csv", file_number);
     600:	00 d0       	rcall	.+0      	; 0x602 <create_log_file+0x78>
     602:	00 d0       	rcall	.+0      	; 0x604 <create_log_file+0x7a>
     604:	00 d0       	rcall	.+0      	; 0x606 <create_log_file+0x7c>
     606:	ed b7       	in	r30, 0x3d	; 61
     608:	fe b7       	in	r31, 0x3e	; 62
     60a:	31 96       	adiw	r30, 0x01	; 1
     60c:	ad b7       	in	r26, 0x3d	; 61
     60e:	be b7       	in	r27, 0x3e	; 62
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	0c 93       	st	X, r16
     614:	11 97       	sbiw	r26, 0x01	; 1
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	1c 93       	st	X, r17
     61a:	b2 82       	std	Z+2, r11	; 0x02
     61c:	e3 82       	std	Z+3, r14	; 0x03
     61e:	d5 82       	std	Z+5, r13	; 0x05
     620:	c4 82       	std	Z+4, r12	; 0x04
     622:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
     626:	ed b7       	in	r30, 0x3d	; 61
     628:	fe b7       	in	r31, 0x3e	; 62
     62a:	36 96       	adiw	r30, 0x06	; 6
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	fe bf       	out	0x3e, r31	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	ed bf       	out	0x3d, r30	; 61
	struct fat_dir_entry_struct file_entry;
	char name[32];
	int file_number=0;
	
	sprintf(name, "ADXL345_%03d.csv", file_number);
	while(find_file_in_dir(fs,dd,name,&directory)){
     636:	60 91 e7 04 	lds	r22, 0x04E7
     63a:	70 91 e8 04 	lds	r23, 0x04E8
     63e:	80 91 ac 04 	lds	r24, 0x04AC
     642:	90 91 ad 04 	lds	r25, 0x04AD
     646:	a8 01       	movw	r20, r16
     648:	2e ea       	ldi	r18, 0xAE	; 174
     64a:	34 e0       	ldi	r19, 0x04	; 4
     64c:	0e 94 75 02 	call	0x4ea	; 0x4ea <find_file_in_dir>
     650:	88 23       	and	r24, r24
     652:	99 f6       	brne	.-90     	; 0x5fa <create_log_file+0x70>
		file_number++;
		sprintf(name, "ADXL345_%03d.csv", file_number);
	}
	
#ifdef DEBUG
	if(!fat_create_file(dd, name, &file_entry))
     654:	80 91 e7 04 	lds	r24, 0x04E7
     658:	90 91 e8 04 	lds	r25, 0x04E8
     65c:	b8 01       	movw	r22, r16
     65e:	ae 01       	movw	r20, r28
     660:	4f 5d       	subi	r20, 0xDF	; 223
     662:	5f 4f       	sbci	r21, 0xFF	; 255
     664:	0e 94 a5 29 	call	0x534a	; 0x534a <fat_create_file>
     668:	88 23       	and	r24, r24
     66a:	69 f4       	brne	.+26     	; 0x686 <create_log_file+0xfc>
	{
		printf_P(PSTR("No File Created!\n\r"));
     66c:	00 d0       	rcall	.+0      	; 0x66e <create_log_file+0xe4>
     66e:	88 e6       	ldi	r24, 0x68	; 104
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	ad b7       	in	r26, 0x3d	; 61
     674:	be b7       	in	r27, 0x3e	; 62
     676:	12 96       	adiw	r26, 0x02	; 2
     678:	9c 93       	st	X, r25
     67a:	8e 93       	st	-X, r24
     67c:	11 97       	sbiw	r26, 0x01	; 1
     67e:	0e 94 30 36 	call	0x6c60	; 0x6c60 <printf_P>
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
	}
#endif
   /* search file in current directory and open it */
	return open_file_in_dir(fs, dd, name);
     686:	60 91 e7 04 	lds	r22, 0x04E7
     68a:	70 91 e8 04 	lds	r23, 0x04E8
     68e:	80 91 ac 04 	lds	r24, 0x04AC
     692:	90 91 ad 04 	lds	r25, 0x04AD
     696:	ae 01       	movw	r20, r28
     698:	4f 5f       	subi	r20, 0xFF	; 255
     69a:	5f 4f       	sbci	r21, 0xFF	; 255
     69c:	0e 94 97 02 	call	0x52e	; 0x52e <open_file_in_dir>

}
     6a0:	cf 5a       	subi	r28, 0xAF	; 175
     6a2:	df 4f       	sbci	r29, 0xFF	; 255
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	cf 91       	pop	r28
     6b0:	df 91       	pop	r29
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	08 95       	ret

000006c2 <main>:
int x_value=0, y_value=0, z_value=0;
char ascii_value[6];
char data_buffer[512];

int main(void)
{
     6c2:	2f 92       	push	r2
     6c4:	3f 92       	push	r3
     6c6:	4f 92       	push	r4
     6c8:	5f 92       	push	r5
     6ca:	6f 92       	push	r6
     6cc:	7f 92       	push	r7
     6ce:	8f 92       	push	r8
     6d0:	9f 92       	push	r9
     6d2:	af 92       	push	r10
     6d4:	bf 92       	push	r11
     6d6:	cf 92       	push	r12
     6d8:	df 92       	push	r13
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	27 97       	sbiw	r28, 0x07	; 7
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
	char logging_enabled=0;
	
    /* setup uart */
    //uart_init();

	ioinit();	//Setup the AVR I/O for data logging
     6f6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ioinit>
	UNSELECT_ACCEL();
     6fa:	40 9a       	sbi	0x08, 0	; 8
	
	//Flash lights to indicate succesfull startup
	LED1_ON();
     6fc:	5f 9a       	sbi	0x0b, 7	; 11
	delay_ms(100);		
     6fe:	84 e6       	ldi	r24, 0x64	; 100
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	LED1_OFF();
     706:	5f 98       	cbi	0x0b, 7	; 11
	
	LED2_ON();
     708:	5e 9a       	sbi	0x0b, 6	; 11
	delay_ms(100);		
     70a:	84 e6       	ldi	r24, 0x64	; 100
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	LED2_OFF();
     712:	5e 98       	cbi	0x0b, 6	; 11
	
	LED3_ON();
     714:	5d 9a       	sbi	0x0b, 5	; 11
	delay_ms(100);		
     716:	84 e6       	ldi	r24, 0x64	; 100
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	LED3_OFF();	
     71e:	5d 98       	cbi	0x0b, 5	; 11
	delay_ms(100);
     720:	84 e6       	ldi	r24, 0x64	; 100
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>

	PORTC |= 0x20;
     728:	45 9a       	sbi	0x08, 5	; 8
	delay_ms(100);
     72a:	84 e6       	ldi	r24, 0x64	; 100
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	PORTC &= ~(0x20);
     732:	45 98       	cbi	0x08, 5	; 8
	delay_ms(100);
     734:	84 e6       	ldi	r24, 0x64	; 100
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	
	PORTC |= 0x10;
     73c:	44 9a       	sbi	0x08, 4	; 8
	delay_ms(100);
     73e:	84 e6       	ldi	r24, 0x64	; 100
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	PORTC &= ~(0x10);
     746:	44 98       	cbi	0x08, 4	; 8
	delay_ms(100);
     748:	84 e6       	ldi	r24, 0x64	; 100
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	
	PORTB |= 0x02;
     750:	29 9a       	sbi	0x05, 1	; 5
	delay_ms(100);
     752:	84 e6       	ldi	r24, 0x64	; 100
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	PORTB &= ~(0x02);
     75a:	29 98       	cbi	0x05, 1	; 5
	delay_ms(100);
     75c:	84 e6       	ldi	r24, 0x64	; 100
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>

	PORTB |= 0x01;
     764:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(100);
     766:	84 e6       	ldi	r24, 0x64	; 100
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
	PORTB &= ~(0x01);
     76e:	28 98       	cbi	0x05, 0	; 5
	delay_ms(100);	
     770:	84 e6       	ldi	r24, 0x64	; 100
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>

	//Initialize SD and FAT32
	//while(!init_filesystem());
	sd_init_success=init_filesystem();
     778:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <init_filesystem>
	//while(!sd_init_success && (sd_init_tries++ < 3))
	//{
	//	sd_init_success = init_filesystem();
	//}
	if(sd_init_success)logging_enabled =1;
     77c:	88 23       	and	r24, r24
     77e:	09 f0       	breq	.+2      	; 0x782 <main+0xc0>
     780:	9a c1       	rjmp	.+820    	; 0xab6 <__stack+0x1b7>
     782:	88 24       	eor	r8, r8

	//Initialize system for file logging
	if(logging_enabled)log_file_handle=create_log_file();

	//Initialize Accelerometer to start logging data
	adxl345_defaults();
     784:	0e 94 27 32 	call	0x644e	; 0x644e <adxl345_defaults>
	
	//Flash all lights to indicate start of logging!
	for(int i=0; i<((logging_enabled+1)*2); i++){
     788:	08 2d       	mov	r16, r8
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	0f 5f       	subi	r16, 0xFF	; 255
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	00 0f       	add	r16, r16
     792:	11 1f       	adc	r17, r17
     794:	ee 24       	eor	r14, r14
     796:	ff 24       	eor	r15, r15
		LED1_ON();
     798:	5f 9a       	sbi	0x0b, 7	; 11
		LED2_ON();
     79a:	5e 9a       	sbi	0x0b, 6	; 11
		LED3_ON();
     79c:	5d 9a       	sbi	0x0b, 5	; 11
		delay_ms(100);
     79e:	84 e6       	ldi	r24, 0x64	; 100
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>
		LED1_OFF();
     7a6:	5f 98       	cbi	0x0b, 7	; 11
		LED2_OFF();
     7a8:	5e 98       	cbi	0x0b, 6	; 11
		LED3_OFF();
     7aa:	5d 98       	cbi	0x0b, 5	; 11
		delay_ms(100);
     7ac:	84 e6       	ldi	r24, 0x64	; 100
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>

	//Initialize Accelerometer to start logging data
	adxl345_defaults();
	
	//Flash all lights to indicate start of logging!
	for(int i=0; i<((logging_enabled+1)*2); i++){
     7b4:	08 94       	sec
     7b6:	e1 1c       	adc	r14, r1
     7b8:	f1 1c       	adc	r15, r1
     7ba:	e0 16       	cp	r14, r16
     7bc:	f1 06       	cpc	r15, r17
     7be:	64 f3       	brlt	.-40     	; 0x798 <main+0xd6>
     7c0:	44 24       	eor	r4, r4
     7c2:	55 24       	eor	r5, r5

					high_byte = adxl345_read(DATAZ1);
					low_byte = adxl345_read(DATAZ0);
					z_value = (high_byte << 8) | low_byte;

					sprintf(ascii_value, "%04x", x_value);
     7c4:	51 ee       	ldi	r21, 0xE1	; 225
     7c6:	65 2e       	mov	r6, r21
     7c8:	54 e0       	ldi	r21, 0x04	; 4
     7ca:	75 2e       	mov	r7, r21
     7cc:	4d e6       	ldi	r20, 0x6D	; 109
     7ce:	24 2e       	mov	r2, r20
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	34 2e       	mov	r3, r20
	
	
	while(1){
		//The enabled_interrupts variable is used to keep track of the enabled interrupts that can cause a status LED to turn on
		//(WATERMARK, OVERRUN AND DATA_READY are ignored because they generate interrupts regardless of if they are enabled or not)
		enabled_interrupts = adxl345_read(INT_ENABLE);
     7d4:	8e e2       	ldi	r24, 0x2E	; 46
     7d6:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
		enabled_interrupts &= ~(WATERMARK | OVERRUN | DATA_READY);
     7da:	8c 77       	andi	r24, 0x7C	; 124
     7dc:	8f 83       	std	Y+7, r24	; 0x07
		//interrupt_map is used to keep track of which interrupts are going to the INT1 pin and which are going to the INT2 pin.
		//If the bit is 0, the interrupt is going to the INT1 pin; if the bit is 1, the interrupt is going to the INT2 pin.
		interrupt_map = adxl345_read(INT_MAP);
     7de:	8f e2       	ldi	r24, 0x2F	; 47
     7e0:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
					strcat(data_buffer, "\n");

					printf("X:%04x\tY:%04x\tZ:%04x\r", x_value, y_value, z_value);
				}
				//Check to see if ther are any other active interrupts for the INT1 Interrupt Source from the ADXL345.
				if((interrupt_source & enabled_interrupts & ~(interrupt_map)) != 0)led_2_timer=BLINK_TIME;
     7e4:	08 2f       	mov	r16, r24
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	00 95       	com	r16
     7ea:	10 95       	com	r17
     7ec:	1f c1       	rjmp	.+574    	; 0xa2c <__stack+0x12d>
		enabled_interrupts &= ~(WATERMARK | OVERRUN | DATA_READY);
		//interrupt_map is used to keep track of which interrupts are going to the INT1 pin and which are going to the INT2 pin.
		//If the bit is 0, the interrupt is going to the INT1 pin; if the bit is 1, the interrupt is going to the INT2 pin.
		interrupt_map = adxl345_read(INT_MAP);
		while((UCSR0A & (1<<RXC0)) == 0){
			if((PIND & ACCEL_INT1) == 0){
     7ee:	4b 99       	sbic	0x09, 3	; 9
     7f0:	f6 c0       	rjmp	.+492    	; 0x9de <__stack+0xdf>
				//Read the interrupt source register to clear any interrupts
				interrupt_source=adxl345_read(INT_SOURCE);
     7f2:	80 e3       	ldi	r24, 0x30	; 48
     7f4:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     7f8:	98 2e       	mov	r9, r24
				if((interrupt_source & DATA_READY)==DATA_READY)
     7fa:	87 ff       	sbrs	r24, 7
     7fc:	e6 c0       	rjmp	.+460    	; 0x9ca <__stack+0xcb>
				{
					high_byte = adxl345_read(DATAX1);
     7fe:	83 e3       	ldi	r24, 0x33	; 51
     800:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     804:	80 93 ab 01 	sts	0x01AB, r24
					low_byte = adxl345_read(DATAX0);
     808:	82 e3       	ldi	r24, 0x32	; 50
     80a:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     80e:	80 93 aa 01 	sts	0x01AA, r24
					x_value = (high_byte << 8) | low_byte;
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	b0 90 ab 01 	lds	r11, 0x01AB
     818:	aa 24       	eor	r10, r10
     81a:	8a 29       	or	r24, r10
     81c:	9b 29       	or	r25, r11
     81e:	90 93 ad 01 	sts	0x01AD, r25
     822:	80 93 ac 01 	sts	0x01AC, r24
					
					high_byte = adxl345_read(DATAY1);
     826:	85 e3       	ldi	r24, 0x35	; 53
     828:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     82c:	80 93 ab 01 	sts	0x01AB, r24
					low_byte = adxl345_read(DATAY0);
     830:	84 e3       	ldi	r24, 0x34	; 52
     832:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     836:	80 93 aa 01 	sts	0x01AA, r24
					y_value = (high_byte << 8) | low_byte;
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	d0 90 ab 01 	lds	r13, 0x01AB
     840:	cc 24       	eor	r12, r12
     842:	8c 29       	or	r24, r12
     844:	9d 29       	or	r25, r13
     846:	90 93 af 01 	sts	0x01AF, r25
     84a:	80 93 ae 01 	sts	0x01AE, r24

					high_byte = adxl345_read(DATAZ1);
     84e:	87 e3       	ldi	r24, 0x37	; 55
     850:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     854:	80 93 ab 01 	sts	0x01AB, r24
					low_byte = adxl345_read(DATAZ0);
     858:	86 e3       	ldi	r24, 0x36	; 54
     85a:	0e 94 3c 32 	call	0x6478	; 0x6478 <adxl345_read>
     85e:	80 93 aa 01 	sts	0x01AA, r24
					z_value = (high_byte << 8) | low_byte;
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	f0 90 ab 01 	lds	r15, 0x01AB
     868:	ee 24       	eor	r14, r14
     86a:	8e 29       	or	r24, r14
     86c:	9f 29       	or	r25, r15
     86e:	90 93 b1 01 	sts	0x01B1, r25
     872:	80 93 b0 01 	sts	0x01B0, r24

					sprintf(ascii_value, "%04x", x_value);
     876:	00 d0       	rcall	.+0      	; 0x878 <main+0x1b6>
     878:	00 d0       	rcall	.+0      	; 0x87a <main+0x1b8>
     87a:	00 d0       	rcall	.+0      	; 0x87c <main+0x1ba>
     87c:	ed b7       	in	r30, 0x3d	; 61
     87e:	fe b7       	in	r31, 0x3e	; 62
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	ad b7       	in	r26, 0x3d	; 61
     884:	be b7       	in	r27, 0x3e	; 62
     886:	12 96       	adiw	r26, 0x02	; 2
     888:	7c 92       	st	X, r7
     88a:	6e 92       	st	-X, r6
     88c:	11 97       	sbiw	r26, 0x01	; 1
     88e:	33 82       	std	Z+3, r3	; 0x03
     890:	22 82       	std	Z+2, r2	; 0x02
     892:	80 91 ac 01 	lds	r24, 0x01AC
     896:	90 91 ad 01 	lds	r25, 0x01AD
     89a:	95 83       	std	Z+5, r25	; 0x05
     89c:	84 83       	std	Z+4, r24	; 0x04
     89e:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
					strcat(data_buffer, ascii_value);
     8a2:	ed b7       	in	r30, 0x3d	; 61
     8a4:	fe b7       	in	r31, 0x3e	; 62
     8a6:	36 96       	adiw	r30, 0x06	; 6
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	fe bf       	out	0x3e, r31	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	ed bf       	out	0x3d, r30	; 61
     8b2:	8b ee       	ldi	r24, 0xEB	; 235
     8b4:	94 e0       	ldi	r25, 0x04	; 4
     8b6:	b3 01       	movw	r22, r6
     8b8:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <strcat>
					strcat(data_buffer, ",");
     8bc:	8b ee       	ldi	r24, 0xEB	; 235
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	62 e7       	ldi	r22, 0x72	; 114
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <strcat>
					
					sprintf(ascii_value, "%04x", y_value);
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <main+0x208>
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <main+0x20a>
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <main+0x20c>
     8ce:	ed b7       	in	r30, 0x3d	; 61
     8d0:	fe b7       	in	r31, 0x3e	; 62
     8d2:	31 96       	adiw	r30, 0x01	; 1
     8d4:	ad b7       	in	r26, 0x3d	; 61
     8d6:	be b7       	in	r27, 0x3e	; 62
     8d8:	12 96       	adiw	r26, 0x02	; 2
     8da:	7c 92       	st	X, r7
     8dc:	6e 92       	st	-X, r6
     8de:	11 97       	sbiw	r26, 0x01	; 1
     8e0:	33 82       	std	Z+3, r3	; 0x03
     8e2:	22 82       	std	Z+2, r2	; 0x02
     8e4:	80 91 ae 01 	lds	r24, 0x01AE
     8e8:	90 91 af 01 	lds	r25, 0x01AF
     8ec:	95 83       	std	Z+5, r25	; 0x05
     8ee:	84 83       	std	Z+4, r24	; 0x04
     8f0:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
					strcat(data_buffer, ascii_value);
     8f4:	ed b7       	in	r30, 0x3d	; 61
     8f6:	fe b7       	in	r31, 0x3e	; 62
     8f8:	36 96       	adiw	r30, 0x06	; 6
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	fe bf       	out	0x3e, r31	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	ed bf       	out	0x3d, r30	; 61
     904:	8b ee       	ldi	r24, 0xEB	; 235
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	b3 01       	movw	r22, r6
     90a:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <strcat>
					strcat(data_buffer, ",");
     90e:	8b ee       	ldi	r24, 0xEB	; 235
     910:	94 e0       	ldi	r25, 0x04	; 4
     912:	62 e7       	ldi	r22, 0x72	; 114
     914:	71 e0       	ldi	r23, 0x01	; 1
     916:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <strcat>
					
					sprintf(ascii_value, "%04x", z_value);
     91a:	00 d0       	rcall	.+0      	; 0x91c <__stack+0x1d>
     91c:	00 d0       	rcall	.+0      	; 0x91e <__stack+0x1f>
     91e:	00 d0       	rcall	.+0      	; 0x920 <__stack+0x21>
     920:	ed b7       	in	r30, 0x3d	; 61
     922:	fe b7       	in	r31, 0x3e	; 62
     924:	31 96       	adiw	r30, 0x01	; 1
     926:	ad b7       	in	r26, 0x3d	; 61
     928:	be b7       	in	r27, 0x3e	; 62
     92a:	12 96       	adiw	r26, 0x02	; 2
     92c:	7c 92       	st	X, r7
     92e:	6e 92       	st	-X, r6
     930:	11 97       	sbiw	r26, 0x01	; 1
     932:	33 82       	std	Z+3, r3	; 0x03
     934:	22 82       	std	Z+2, r2	; 0x02
     936:	80 91 b0 01 	lds	r24, 0x01B0
     93a:	90 91 b1 01 	lds	r25, 0x01B1
     93e:	95 83       	std	Z+5, r25	; 0x05
     940:	84 83       	std	Z+4, r24	; 0x04
     942:	0e 94 5d 36 	call	0x6cba	; 0x6cba <sprintf>
					strcat(data_buffer, ascii_value);
     946:	ed b7       	in	r30, 0x3d	; 61
     948:	fe b7       	in	r31, 0x3e	; 62
     94a:	36 96       	adiw	r30, 0x06	; 6
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	fe bf       	out	0x3e, r31	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	ed bf       	out	0x3d, r30	; 61
     956:	8b ee       	ldi	r24, 0xEB	; 235
     958:	94 e0       	ldi	r25, 0x04	; 4
     95a:	b3 01       	movw	r22, r6
     95c:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <strcat>
					strcat(data_buffer, "\n");
     960:	8b ee       	ldi	r24, 0xEB	; 235
     962:	94 e0       	ldi	r25, 0x04	; 4
     964:	64 e7       	ldi	r22, 0x74	; 116
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <strcat>

					printf("X:%04x\tY:%04x\tZ:%04x\r", x_value, y_value, z_value);
     96c:	8d b7       	in	r24, 0x3d	; 61
     96e:	9e b7       	in	r25, 0x3e	; 62
     970:	08 97       	sbiw	r24, 0x08	; 8
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	9e bf       	out	0x3e, r25	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	8d bf       	out	0x3d, r24	; 61
     97c:	ed b7       	in	r30, 0x3d	; 61
     97e:	fe b7       	in	r31, 0x3e	; 62
     980:	31 96       	adiw	r30, 0x01	; 1
     982:	86 e7       	ldi	r24, 0x76	; 118
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	ad b7       	in	r26, 0x3d	; 61
     988:	be b7       	in	r27, 0x3e	; 62
     98a:	12 96       	adiw	r26, 0x02	; 2
     98c:	9c 93       	st	X, r25
     98e:	8e 93       	st	-X, r24
     990:	11 97       	sbiw	r26, 0x01	; 1
     992:	80 91 ac 01 	lds	r24, 0x01AC
     996:	90 91 ad 01 	lds	r25, 0x01AD
     99a:	93 83       	std	Z+3, r25	; 0x03
     99c:	82 83       	std	Z+2, r24	; 0x02
     99e:	80 91 ae 01 	lds	r24, 0x01AE
     9a2:	90 91 af 01 	lds	r25, 0x01AF
     9a6:	95 83       	std	Z+5, r25	; 0x05
     9a8:	84 83       	std	Z+4, r24	; 0x04
     9aa:	80 91 b0 01 	lds	r24, 0x01B0
     9ae:	90 91 b1 01 	lds	r25, 0x01B1
     9b2:	97 83       	std	Z+7, r25	; 0x07
     9b4:	86 83       	std	Z+6, r24	; 0x06
     9b6:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <printf>
     9ba:	ad b7       	in	r26, 0x3d	; 61
     9bc:	be b7       	in	r27, 0x3e	; 62
     9be:	18 96       	adiw	r26, 0x08	; 8
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	be bf       	out	0x3e, r27	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	ad bf       	out	0x3d, r26	; 61
				}
				//Check to see if ther are any other active interrupts for the INT1 Interrupt Source from the ADXL345.
				if((interrupt_source & enabled_interrupts & ~(interrupt_map)) != 0)led_2_timer=BLINK_TIME;
     9ca:	bf 81       	ldd	r27, Y+7	; 0x07
     9cc:	9b 22       	and	r9, r27
     9ce:	89 2d       	mov	r24, r9
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	80 23       	and	r24, r16
     9d4:	91 23       	and	r25, r17
     9d6:	89 2b       	or	r24, r25
     9d8:	11 f0       	breq	.+4      	; 0x9de <__stack+0xdf>
     9da:	34 e6       	ldi	r19, 0x64	; 100
     9dc:	43 2e       	mov	r4, r19
			}
			if((PIND & ACCEL_INT2) == 0) led_3_timer=BLINK_TIME;
     9de:	4a 99       	sbic	0x09, 2	; 9
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <__stack+0xe7>
     9e2:	24 e6       	ldi	r18, 0x64	; 100
     9e4:	52 2e       	mov	r5, r18

			if(led_2_timer > 0){
     9e6:	44 20       	and	r4, r4
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <__stack+0xf1>
				LED2_ON();
     9ea:	5e 9a       	sbi	0x0b, 6	; 11
				led_2_timer-=1;
     9ec:	4a 94       	dec	r4
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__stack+0xf3>
			}
			else LED2_OFF();
     9f0:	5e 98       	cbi	0x0b, 6	; 11
			
			if(led_3_timer > 0){
     9f2:	55 20       	and	r5, r5
     9f4:	19 f0       	breq	.+6      	; 0x9fc <__stack+0xfd>
				LED3_ON();
     9f6:	5d 9a       	sbi	0x0b, 5	; 11
				led_3_timer-=1;
     9f8:	5a 94       	dec	r5
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <__stack+0xff>
			}
			else LED3_OFF();
     9fc:	5d 98       	cbi	0x0b, 5	; 11

			if(strlen(data_buffer)>=495){
     9fe:	eb ee       	ldi	r30, 0xEB	; 235
     a00:	f4 e0       	ldi	r31, 0x04	; 4
     a02:	01 90       	ld	r0, Z+
     a04:	00 20       	and	r0, r0
     a06:	e9 f7       	brne	.-6      	; 0xa02 <__stack+0x103>
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	eb 5e       	subi	r30, 0xEB	; 235
     a0c:	f4 40       	sbci	r31, 0x04	; 4
     a0e:	ef 5e       	subi	r30, 0xEF	; 239
     a10:	f1 40       	sbci	r31, 0x01	; 1
     a12:	60 f0       	brcs	.+24     	; 0xa2c <__stack+0x12d>
				LED1_ON();
     a14:	5f 9a       	sbi	0x0b, 7	; 11
				if(logging_enabled)save_data(&log_file_handle, data_buffer);
     a16:	88 20       	and	r8, r8
     a18:	31 f0       	breq	.+12     	; 0xa26 <__stack+0x127>
     a1a:	89 ee       	ldi	r24, 0xE9	; 233
     a1c:	94 e0       	ldi	r25, 0x04	; 4
     a1e:	6b ee       	ldi	r22, 0xEB	; 235
     a20:	74 e0       	ldi	r23, 0x04	; 4
     a22:	0e 94 40 02 	call	0x480	; 0x480 <save_data>
				*data_buffer='\0';
     a26:	10 92 eb 04 	sts	0x04EB, r1
				LED1_OFF();
     a2a:	5f 98       	cbi	0x0b, 7	; 11
		enabled_interrupts = adxl345_read(INT_ENABLE);
		enabled_interrupts &= ~(WATERMARK | OVERRUN | DATA_READY);
		//interrupt_map is used to keep track of which interrupts are going to the INT1 pin and which are going to the INT2 pin.
		//If the bit is 0, the interrupt is going to the INT1 pin; if the bit is 1, the interrupt is going to the INT2 pin.
		interrupt_map = adxl345_read(INT_MAP);
		while((UCSR0A & (1<<RXC0)) == 0){
     a2c:	80 91 c0 00 	lds	r24, 0x00C0
     a30:	87 ff       	sbrs	r24, 7
     a32:	dd ce       	rjmp	.-582    	; 0x7ee <main+0x12c>
				LED1_OFF();
			}
		}
		//If we get here, we need to enter the command prompt
		//printf("Got a character!\n");
		if(logging_enabled)fat_close_file(log_file_handle);
     a34:	88 20       	and	r8, r8
     a36:	31 f0       	breq	.+12     	; 0xa44 <__stack+0x145>
     a38:	80 91 e9 04 	lds	r24, 0x04E9
     a3c:	90 91 ea 04 	lds	r25, 0x04EA
     a40:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <fat_close_file>
		continue_char = UDR0;		//Read the character from the UART to clear the buffer
     a44:	10 91 c6 00 	lds	r17, 0x00C6
		delay_ms(50);
     a48:	82 e3       	ldi	r24, 0x32	; 50
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 8c 00 	call	0x118	; 0x118 <delay_ms>

		//Put the ADXL345 into standby mode
		adxl345_write(POWER_CTL, ~MEASURE);
     a50:	8d e2       	ldi	r24, 0x2D	; 45
     a52:	67 ef       	ldi	r22, 0xF7	; 247
     a54:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
     a58:	1a c0       	rjmp	.+52     	; 0xa8e <__stack+0x18f>
		while(continue_char !=2)
		{
			LED2_OFF();
     a5a:	5e 98       	cbi	0x0b, 6	; 11
			LED3_OFF();
     a5c:	5d 98       	cbi	0x0b, 5	; 11
			printf("\n>");
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <__stack+0x161>
     a60:	ec e8       	ldi	r30, 0x8C	; 140
     a62:	f1 e0       	ldi	r31, 0x01	; 1
     a64:	ad b7       	in	r26, 0x3d	; 61
     a66:	be b7       	in	r27, 0x3e	; 62
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	fc 93       	st	X, r31
     a6c:	ee 93       	st	-X, r30
     a6e:	11 97       	sbiw	r26, 0x01	; 1
     a70:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <printf>
			//If we get a valid command length, than execute the command
			if(get_command(command_buffer))continue_char=execute_command(command_buffer);
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	0e 94 9a 00 	call	0x134	; 0x134 <get_command>
     a80:	88 23       	and	r24, r24
     a82:	59 f3       	breq	.-42     	; 0xa5a <__stack+0x15b>
     a84:	ce 01       	movw	r24, r28
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	0e 94 ce 00 	call	0x19c	; 0x19c <execute_command>
     a8c:	18 2f       	mov	r17, r24
		continue_char = UDR0;		//Read the character from the UART to clear the buffer
		delay_ms(50);

		//Put the ADXL345 into standby mode
		adxl345_write(POWER_CTL, ~MEASURE);
		while(continue_char !=2)
     a8e:	12 30       	cpi	r17, 0x02	; 2
     a90:	21 f7       	brne	.-56     	; 0xa5a <__stack+0x15b>
			LED3_OFF();
			printf("\n>");
			//If we get a valid command length, than execute the command
			if(get_command(command_buffer))continue_char=execute_command(command_buffer);
		}
		printf("\n");
     a92:	8a e0       	ldi	r24, 0x0A	; 10
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 56 36 	call	0x6cac	; 0x6cac <putchar>
		//Put the ADXL345 back into measurement mode
		adxl345_write(POWER_CTL, MEASURE);
     a9a:	8d e2       	ldi	r24, 0x2D	; 45
     a9c:	68 e0       	ldi	r22, 0x08	; 8
     a9e:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
		if(logging_enabled)log_file_handle=create_log_file();
     aa2:	88 20       	and	r8, r8
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <__stack+0x1a9>
     aa6:	96 ce       	rjmp	.-724    	; 0x7d4 <main+0x112>
     aa8:	0e 94 c5 02 	call	0x58a	; 0x58a <create_log_file>
     aac:	90 93 ea 04 	sts	0x04EA, r25
     ab0:	80 93 e9 04 	sts	0x04E9, r24
     ab4:	8f ce       	rjmp	.-738    	; 0x7d4 <main+0x112>
	//	sd_init_success = init_filesystem();
	//}
	if(sd_init_success)logging_enabled =1;

	//Initialize system for file logging
	if(logging_enabled)log_file_handle=create_log_file();
     ab6:	0e 94 c5 02 	call	0x58a	; 0x58a <create_log_file>
     aba:	90 93 ea 04 	sts	0x04EA, r25
     abe:	80 93 e9 04 	sts	0x04E9, r24
     ac2:	88 24       	eor	r8, r8
     ac4:	83 94       	inc	r8
     ac6:	5e ce       	rjmp	.-836    	; 0x784 <main+0xc2>

00000ac8 <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
     ac8:	fc 01       	movw	r30, r24
    if(!partition)
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	11 f4       	brne	.+4      	; 0xad2 <partition_close+0xa>
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
     ad2:	10 86       	std	Z+8, r1	; 0x08
     ad4:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
     ad6:	08 95       	ret

00000ad8 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
     ad8:	4f 92       	push	r4
     ada:	5f 92       	push	r5
     adc:	6f 92       	push	r6
     ade:	7f 92       	push	r7
     ae0:	8f 92       	push	r8
     ae2:	9f 92       	push	r9
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	df 93       	push	r29
     af4:	cf 93       	push	r28
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	60 97       	sbiw	r28, 0x10	; 16
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	6c 01       	movw	r12, r24
     b08:	4b 01       	movw	r8, r22
     b0a:	3a 01       	movw	r6, r20
     b0c:	29 01       	movw	r4, r18
     b0e:	b0 2e       	mov	r11, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	09 f4       	brne	.+2      	; 0xb16 <partition_open+0x3e>
     b14:	9c c0       	rjmp	.+312    	; 0xc4e <partition_open+0x176>
     b16:	61 15       	cp	r22, r1
     b18:	71 05       	cpc	r23, r1
     b1a:	09 f4       	brne	.+2      	; 0xb1e <partition_open+0x46>
     b1c:	98 c0       	rjmp	.+304    	; 0xc4e <partition_open+0x176>
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	80 17       	cp	r24, r16
     b22:	0c f4       	brge	.+2      	; 0xb26 <partition_open+0x4e>
     b24:	94 c0       	rjmp	.+296    	; 0xc4e <partition_open+0x176>
        return 0;

    if(index >= 0)
     b26:	07 fd       	sbrc	r16, 7
     b28:	25 c0       	rjmp	.+74     	; 0xb74 <partition_open+0x9c>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
     b2a:	80 2f       	mov	r24, r16
     b2c:	99 27       	eor	r25, r25
     b2e:	87 fd       	sbrc	r24, 7
     b30:	90 95       	com	r25
     b32:	b4 e0       	ldi	r27, 0x04	; 4
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	ba 95       	dec	r27
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <partition_open+0x5c>
     b3c:	82 54       	subi	r24, 0x42	; 66
     b3e:	9e 4f       	sbci	r25, 0xFE	; 254
     b40:	fc 01       	movw	r30, r24
     b42:	ff 0f       	add	r31, r31
     b44:	ee 0b       	sbc	r30, r30
     b46:	fe 2f       	mov	r31, r30
     b48:	9c 01       	movw	r18, r24
     b4a:	4e 2f       	mov	r20, r30
     b4c:	5e 2f       	mov	r21, r30
     b4e:	6e 2f       	mov	r22, r30
     b50:	7e 2f       	mov	r23, r30
     b52:	8e 2f       	mov	r24, r30
     b54:	9e 2f       	mov	r25, r30
     b56:	8e 01       	movw	r16, r28
     b58:	0f 5f       	subi	r16, 0xFF	; 255
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255
     b5c:	e0 e1       	ldi	r30, 0x10	; 16
     b5e:	ee 2e       	mov	r14, r30
     b60:	f1 2c       	mov	r15, r1
     b62:	f6 01       	movw	r30, r12
     b64:	09 95       	icall
     b66:	88 23       	and	r24, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <partition_open+0x94>
     b6a:	71 c0       	rjmp	.+226    	; 0xc4e <partition_open+0x176>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <partition_open+0x9c>
     b72:	6d c0       	rjmp	.+218    	; 0xc4e <partition_open+0x176>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
     b74:	80 91 ba 01 	lds	r24, 0x01BA
     b78:	88 23       	and	r24, r24
     b7a:	09 f0       	breq	.+2      	; 0xb7e <partition_open+0xa6>
     b7c:	68 c0       	rjmp	.+208    	; 0xc4e <partition_open+0x176>
     b7e:	80 c0       	rjmp	.+256    	; 0xc80 <partition_open+0x1a8>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	80 93 ba 01 	sts	0x01BA, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
     b86:	2a 85       	ldd	r18, Y+10	; 0x0a
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	54 2f       	mov	r21, r20
     b90:	43 2f       	mov	r20, r19
     b92:	32 2f       	mov	r19, r18
     b94:	22 27       	eor	r18, r18
     b96:	8b 85       	ldd	r24, Y+11	; 0x0b
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	dc 01       	movw	r26, r24
     ba0:	99 27       	eor	r25, r25
     ba2:	88 27       	eor	r24, r24
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	89 85       	ldd	r24, Y+9	; 0x09
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	28 2b       	or	r18, r24
     bb6:	39 2b       	or	r19, r25
     bb8:	4a 2b       	or	r20, r26
     bba:	5b 2b       	or	r21, r27
     bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	b8 2f       	mov	r27, r24
     bc6:	aa 27       	eor	r26, r26
     bc8:	99 27       	eor	r25, r25
     bca:	88 27       	eor	r24, r24
     bcc:	28 2b       	or	r18, r24
     bce:	39 2b       	or	r19, r25
     bd0:	4a 2b       	or	r20, r26
     bd2:	5b 2b       	or	r21, r27
     bd4:	20 93 bb 01 	sts	0x01BB, r18
     bd8:	30 93 bc 01 	sts	0x01BC, r19
     bdc:	40 93 bd 01 	sts	0x01BD, r20
     be0:	50 93 be 01 	sts	0x01BE, r21
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
     be4:	2e 85       	ldd	r18, Y+14	; 0x0e
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	54 2f       	mov	r21, r20
     bee:	43 2f       	mov	r20, r19
     bf0:	32 2f       	mov	r19, r18
     bf2:	22 27       	eor	r18, r18
     bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	dc 01       	movw	r26, r24
     bfe:	99 27       	eor	r25, r25
     c00:	88 27       	eor	r24, r24
     c02:	28 2b       	or	r18, r24
     c04:	39 2b       	or	r19, r25
     c06:	4a 2b       	or	r20, r26
     c08:	5b 2b       	or	r21, r27
     c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	28 2b       	or	r18, r24
     c14:	39 2b       	or	r19, r25
     c16:	4a 2b       	or	r20, r26
     c18:	5b 2b       	or	r21, r27
     c1a:	88 89       	ldd	r24, Y+16	; 0x10
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e0       	ldi	r26, 0x00	; 0
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	b8 2f       	mov	r27, r24
     c24:	aa 27       	eor	r26, r26
     c26:	99 27       	eor	r25, r25
     c28:	88 27       	eor	r24, r24
     c2a:	28 2b       	or	r18, r24
     c2c:	39 2b       	or	r19, r25
     c2e:	4a 2b       	or	r20, r26
     c30:	5b 2b       	or	r21, r27
     c32:	20 93 bf 01 	sts	0x01BF, r18
     c36:	30 93 c0 01 	sts	0x01C0, r19
     c3a:	40 93 c1 01 	sts	0x01C1, r20
     c3e:	50 93 c2 01 	sts	0x01C2, r21
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <partition_open+0x172>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	80 93 ba 01 	sts	0x01BA, r24
     c4a:	9f 01       	movw	r18, r30
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <partition_open+0x17a>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
     c52:	c9 01       	movw	r24, r18
     c54:	60 96       	adiw	r28, 0x10	; 16
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	5f 90       	pop	r5
     c7c:	4f 90       	pop	r4
     c7e:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
     c80:	e2 eb       	ldi	r30, 0xB2	; 178
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	81 e1       	ldi	r24, 0x11	; 17
     c86:	df 01       	movw	r26, r30
     c88:	1d 92       	st	X+, r1
     c8a:	8a 95       	dec	r24
     c8c:	e9 f7       	brne	.-6      	; 0xc88 <partition_open+0x1b0>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
     c8e:	d0 92 b3 01 	sts	0x01B3, r13
     c92:	c0 92 b2 01 	sts	0x01B2, r12
    new_partition->device_read_interval = device_read_interval;
     c96:	90 92 b5 01 	sts	0x01B5, r9
     c9a:	80 92 b4 01 	sts	0x01B4, r8
    new_partition->device_write = device_write;
     c9e:	70 92 b7 01 	sts	0x01B7, r7
     ca2:	60 92 b6 01 	sts	0x01B6, r6
    new_partition->device_write_interval = device_write_interval;
     ca6:	50 92 b9 01 	sts	0x01B9, r5
     caa:	40 92 b8 01 	sts	0x01B8, r4

    if(index >= 0)
     cae:	b7 fe       	sbrs	r11, 7
     cb0:	67 cf       	rjmp	.-306    	; 0xb80 <partition_open+0xa8>
     cb2:	c8 cf       	rjmp	.-112    	; 0xc44 <partition_open+0x16c>

00000cb4 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	08 95       	ret

00000cb8 <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	08 95       	ret

00000cbc <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
     cbc:	28 2f       	mov	r18, r24
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
     cc2:	0d b4       	in	r0, 0x2d	; 45
     cc4:	07 fe       	sbrs	r0, 7
     cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
     cc8:	8d b5       	in	r24, 0x2d	; 45
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     cce:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
     cd0:	82 2f       	mov	r24, r18
     cd2:	80 64       	ori	r24, 0x40	; 64
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     cd4:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     cd6:	0d b4       	in	r0, 0x2d	; 45
     cd8:	07 fe       	sbrs	r0, 7
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
     cdc:	8d b5       	in	r24, 0x2d	; 45
     cde:	8f 77       	andi	r24, 0x7F	; 127
     ce0:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
     ce2:	87 2f       	mov	r24, r23
     ce4:	99 27       	eor	r25, r25
     ce6:	aa 27       	eor	r26, r26
     ce8:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     cea:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     cec:	0d b4       	in	r0, 0x2d	; 45
     cee:	07 fe       	sbrs	r0, 7
     cf0:	fd cf       	rjmp	.-6      	; 0xcec <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
     cf2:	8d b5       	in	r24, 0x2d	; 45
     cf4:	8f 77       	andi	r24, 0x7F	; 127
     cf6:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
     cf8:	cb 01       	movw	r24, r22
     cfa:	aa 27       	eor	r26, r26
     cfc:	bb 27       	eor	r27, r27
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     cfe:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     d00:	0d b4       	in	r0, 0x2d	; 45
     d02:	07 fe       	sbrs	r0, 7
     d04:	fd cf       	rjmp	.-6      	; 0xd00 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
     d06:	8d b5       	in	r24, 0x2d	; 45
     d08:	8f 77       	andi	r24, 0x7F	; 127
     d0a:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
     d0c:	bb 27       	eor	r27, r27
     d0e:	a7 2f       	mov	r26, r23
     d10:	96 2f       	mov	r25, r22
     d12:	85 2f       	mov	r24, r21
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     d14:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     d16:	0d b4       	in	r0, 0x2d	; 45
     d18:	07 fe       	sbrs	r0, 7
     d1a:	fd cf       	rjmp	.-6      	; 0xd16 <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
     d1c:	8d b5       	in	r24, 0x2d	; 45
     d1e:	8f 77       	andi	r24, 0x7F	; 127
     d20:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     d22:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     d24:	0d b4       	in	r0, 0x2d	; 45
     d26:	07 fe       	sbrs	r0, 7
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
     d2a:	8d b5       	in	r24, 0x2d	; 45
     d2c:	8f 77       	andi	r24, 0x7F	; 127
     d2e:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
     d30:	22 23       	and	r18, r18
     d32:	19 f0       	breq	.+6      	; 0xd3a <sd_raw_send_command+0x7e>
     d34:	28 30       	cpi	r18, 0x08	; 8
     d36:	69 f4       	brne	.+26     	; 0xd52 <sd_raw_send_command+0x96>
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <sd_raw_send_command+0x8a>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     d3a:	85 e9       	ldi	r24, 0x95	; 149
     d3c:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     d3e:	0d b4       	in	r0, 0x2d	; 45
     d40:	07 fe       	sbrs	r0, 7
     d42:	fd cf       	rjmp	.-6      	; 0xd3e <sd_raw_send_command+0x82>
     d44:	0b c0       	rjmp	.+22     	; 0xd5c <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     d46:	87 e8       	ldi	r24, 0x87	; 135
     d48:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     d4a:	0d b4       	in	r0, 0x2d	; 45
     d4c:	07 fe       	sbrs	r0, 7
     d4e:	fd cf       	rjmp	.-6      	; 0xd4a <sd_raw_send_command+0x8e>
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <sd_raw_send_command+0xa0>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
     d52:	8f ef       	ldi	r24, 0xFF	; 255
     d54:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
     d56:	0d b4       	in	r0, 0x2d	; 45
     d58:	07 fe       	sbrs	r0, 7
     d5a:	fd cf       	rjmp	.-6      	; 0xd56 <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
     d5c:	8d b5       	in	r24, 0x2d	; 45
     d5e:	8f 77       	andi	r24, 0x7F	; 127
     d60:	8d bd       	out	0x2d, r24	; 45
     d62:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     d64:	2f ef       	ldi	r18, 0xFF	; 255
     d66:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
     d68:	0d b4       	in	r0, 0x2d	; 45
     d6a:	07 fe       	sbrs	r0, 7
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
     d6e:	8d b5       	in	r24, 0x2d	; 45
     d70:	8f 77       	andi	r24, 0x7F	; 127
     d72:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     d74:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	19 f4       	brne	.+6      	; 0xd80 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
     d7a:	9f 5f       	subi	r25, 0xFF	; 255
     d7c:	9a 30       	cpi	r25, 0x0A	; 10
     d7e:	99 f7       	brne	.-26     	; 0xd66 <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
     d80:	08 95       	ret

00000d82 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <sd_raw_get_info+0x3e>
        return 0;

    memset(info, 0, sizeof(*info));
     da0:	8d e1       	ldi	r24, 0x1D	; 29
     da2:	fe 01       	movw	r30, r28
     da4:	11 92       	st	Z+, r1
     da6:	8a 95       	dec	r24
     da8:	e9 f7       	brne	.-6      	; 0xda4 <sd_raw_get_info+0x22>

    select_card();
     daa:	2a 98       	cbi	0x05, 2	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
     dba:	88 23       	and	r24, r24
     dbc:	19 f0       	breq	.+6      	; 0xdc4 <sd_raw_get_info+0x42>
    {
        unselect_card();
     dbe:	2a 9a       	sbi	0x05, 2	; 5
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	21 c1       	rjmp	.+578    	; 0x1006 <sd_raw_get_info+0x284>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
     dc8:	0d b4       	in	r0, 0x2d	; 45
     dca:	07 fe       	sbrs	r0, 7
     dcc:	fd cf       	rjmp	.-6      	; 0xdc8 <sd_raw_get_info+0x46>
    SPSR &= ~(1 << SPIF);
     dce:	8d b5       	in	r24, 0x2d	; 45
     dd0:	8f 77       	andi	r24, 0x7F	; 127
     dd2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     dd4:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
     dd6:	8e 3f       	cpi	r24, 0xFE	; 254
     dd8:	b1 f7       	brne	.-20     	; 0xdc6 <sd_raw_get_info+0x44>
     dda:	1c 2f       	mov	r17, r28
     ddc:	ce 01       	movw	r24, r28
     dde:	fc 01       	movw	r30, r24
     de0:	60 e6       	ldi	r22, 0x60	; 96
     de2:	70 e0       	ldi	r23, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     de4:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
     de6:	9e 2f       	mov	r25, r30
     de8:	91 1b       	sub	r25, r17
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     dea:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <sd_raw_get_info+0x6a>
    SPSR &= ~(1 << SPIF);
     df2:	8d b5       	in	r24, 0x2d	; 45
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     df8:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
     dfa:	98 30       	cpi	r25, 0x08	; 8
     dfc:	28 f4       	brcc	.+10     	; 0xe08 <sd_raw_get_info+0x86>
     dfe:	93 30       	cpi	r25, 0x03	; 3
     e00:	88 f4       	brcc	.+34     	; 0xe24 <sd_raw_get_info+0xa2>
     e02:	99 23       	and	r25, r25
     e04:	59 f0       	breq	.+22     	; 0xe1c <sd_raw_get_info+0x9a>
     e06:	0c c0       	rjmp	.+24     	; 0xe20 <sd_raw_get_info+0x9e>
     e08:	9d 30       	cpi	r25, 0x0D	; 13
     e0a:	18 f4       	brcc	.+6      	; 0xe12 <sd_raw_get_info+0x90>
     e0c:	99 30       	cpi	r25, 0x09	; 9
     e0e:	70 f4       	brcc	.+28     	; 0xe2c <sd_raw_get_info+0xaa>
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <sd_raw_get_info+0xa6>
     e12:	9d 30       	cpi	r25, 0x0D	; 13
     e14:	19 f1       	breq	.+70     	; 0xe5c <sd_raw_get_info+0xda>
     e16:	9e 30       	cpi	r25, 0x0E	; 14
     e18:	69 f5       	brne	.+90     	; 0xe74 <sd_raw_get_info+0xf2>
     e1a:	24 c0       	rjmp	.+72     	; 0xe64 <sd_raw_get_info+0xe2>
        {
            case 0:
                info->manufacturer = b;
     e1c:	28 83       	st	Y, r18
     e1e:	2a c0       	rjmp	.+84     	; 0xe74 <sd_raw_get_info+0xf2>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
     e20:	20 83       	st	Z, r18
     e22:	28 c0       	rjmp	.+80     	; 0xe74 <sd_raw_get_info+0xf2>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
     e24:	21 83       	std	Z+1, r18	; 0x01
     e26:	26 c0       	rjmp	.+76     	; 0xe74 <sd_raw_get_info+0xf2>
                break;
            case 8:
                info->revision = b;
     e28:	2a 87       	std	Y+10, r18	; 0x0a
     e2a:	24 c0       	rjmp	.+72     	; 0xe74 <sd_raw_get_info+0xf2>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	06 2e       	mov	r0, r22
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <sd_raw_get_info+0xbc>
     e36:	22 0f       	add	r18, r18
     e38:	33 1f       	adc	r19, r19
     e3a:	44 1f       	adc	r20, r20
     e3c:	55 1f       	adc	r21, r21
     e3e:	0a 94       	dec	r0
     e40:	d2 f7       	brpl	.-12     	; 0xe36 <sd_raw_get_info+0xb4>
     e42:	8b 85       	ldd	r24, Y+11	; 0x0b
     e44:	9c 85       	ldd	r25, Y+12	; 0x0c
     e46:	ad 85       	ldd	r26, Y+13	; 0x0d
     e48:	be 85       	ldd	r27, Y+14	; 0x0e
     e4a:	82 2b       	or	r24, r18
     e4c:	93 2b       	or	r25, r19
     e4e:	a4 2b       	or	r26, r20
     e50:	b5 2b       	or	r27, r21
     e52:	8b 87       	std	Y+11, r24	; 0x0b
     e54:	9c 87       	std	Y+12, r25	; 0x0c
     e56:	ad 87       	std	Y+13, r26	; 0x0d
     e58:	be 87       	std	Y+14, r27	; 0x0e
     e5a:	0c c0       	rjmp	.+24     	; 0xe74 <sd_raw_get_info+0xf2>
                break;
            case 13:
                info->manufacturing_year = b << 4;
     e5c:	22 95       	swap	r18
     e5e:	20 7f       	andi	r18, 0xF0	; 240
     e60:	2f 87       	std	Y+15, r18	; 0x0f
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <sd_raw_get_info+0xf2>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
     e64:	92 2f       	mov	r25, r18
     e66:	92 95       	swap	r25
     e68:	9f 70       	andi	r25, 0x0F	; 15
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	89 2b       	or	r24, r25
     e6e:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
     e70:	2f 70       	andi	r18, 0x0F	; 15
     e72:	28 8b       	std	Y+16, r18	; 0x10
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	68 50       	subi	r22, 0x08	; 8
     e78:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	60 3d       	cpi	r22, 0xD0	; 208
     e7e:	78 07       	cpc	r23, r24
     e80:	09 f0       	breq	.+2      	; 0xe84 <sd_raw_get_info+0x102>
     e82:	b1 cf       	rjmp	.-158    	; 0xde6 <sd_raw_get_info+0x64>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
     e84:	89 e0       	ldi	r24, 0x09	; 9
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
     e92:	88 23       	and	r24, r24
     e94:	09 f0       	breq	.+2      	; 0xe98 <sd_raw_get_info+0x116>
     e96:	93 cf       	rjmp	.-218    	; 0xdbe <sd_raw_get_info+0x3c>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
     e9c:	0d b4       	in	r0, 0x2d	; 45
     e9e:	07 fe       	sbrs	r0, 7
     ea0:	fd cf       	rjmp	.-6      	; 0xe9c <sd_raw_get_info+0x11a>
    SPSR &= ~(1 << SPIF);
     ea2:	8d b5       	in	r24, 0x2d	; 45
     ea4:	8f 77       	andi	r24, 0x7F	; 127
     ea6:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     ea8:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
     eaa:	8e 3f       	cpi	r24, 0xFE	; 254
     eac:	b1 f7       	brne	.-20     	; 0xe9a <sd_raw_get_info+0x118>
            info->format = (b & 0x0c) >> 2;
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     eae:	80 91 cc 03 	lds	r24, 0x03CC
     eb2:	c8 2e       	mov	r12, r24
     eb4:	dd 24       	eor	r13, r13
     eb6:	e2 e0       	ldi	r30, 0x02	; 2
     eb8:	ce 22       	and	r12, r30
     eba:	dd 24       	eor	r13, r13
     ebc:	99 24       	eor	r9, r9
     ebe:	bb 24       	eor	r11, r11
     ec0:	ee 24       	eor	r14, r14
     ec2:	ff 24       	eor	r15, r15
     ec4:	10 e0       	ldi	r17, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     ec6:	88 24       	eor	r8, r8
     ec8:	8a 94       	dec	r8
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
     eca:	aa 24       	eor	r10, r10
     ecc:	a3 94       	inc	r10
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
     ece:	8e bc       	out	0x2e, r8	; 46
    while(!(SPSR & (1 << SPIF)));
     ed0:	0d b4       	in	r0, 0x2d	; 45
     ed2:	07 fe       	sbrs	r0, 7
     ed4:	fd cf       	rjmp	.-6      	; 0xed0 <sd_raw_get_info+0x14e>
    SPSR &= ~(1 << SPIF);
     ed6:	8d b5       	in	r24, 0x2d	; 45
     ed8:	8f 77       	andi	r24, 0x7F	; 127
     eda:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
     edc:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
     ede:	1e 30       	cpi	r17, 0x0E	; 14
     ee0:	81 f4       	brne	.+32     	; 0xf02 <sd_raw_get_info+0x180>
        {
            if(b & 0x40)
     ee2:	82 2f       	mov	r24, r18
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	26 fd       	sbrc	r18, 6
                info->flag_copy = 1;
     ee8:	a9 8e       	std	Y+25, r10	; 0x19
            if(b & 0x20)
     eea:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
     eec:	aa 8e       	std	Y+26, r10	; 0x1a
            if(b & 0x10)
     eee:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
     ef0:	ab 8e       	std	Y+27, r10	; 0x1b
            info->format = (b & 0x0c) >> 2;
     ef2:	8c 70       	andi	r24, 0x0C	; 12
     ef4:	90 70       	andi	r25, 0x00	; 0
     ef6:	95 95       	asr	r25
     ef8:	87 95       	ror	r24
     efa:	95 95       	asr	r25
     efc:	87 95       	ror	r24
     efe:	8c 8f       	std	Y+28, r24	; 0x1c
     f00:	7c c0       	rjmp	.+248    	; 0xffa <sd_raw_get_info+0x278>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     f02:	c1 14       	cp	r12, r1
     f04:	d1 04       	cpc	r13, r1
     f06:	39 f1       	breq	.+78     	; 0xf56 <sd_raw_get_info+0x1d4>
            {
                switch(i)
     f08:	17 30       	cpi	r17, 0x07	; 7
     f0a:	29 f0       	breq	.+10     	; 0xf16 <sd_raw_get_info+0x194>
     f0c:	17 30       	cpi	r17, 0x07	; 7
     f0e:	50 f0       	brcs	.+20     	; 0xf24 <sd_raw_get_info+0x1a2>
     f10:	1a 30       	cpi	r17, 0x0A	; 10
     f12:	40 f4       	brcc	.+16     	; 0xf24 <sd_raw_get_info+0x1a2>
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <sd_raw_get_info+0x196>
                {
                    case 7:
                        b &= 0x3f;
     f16:	2f 73       	andi	r18, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
     f18:	9e 2d       	mov	r25, r14
     f1a:	88 27       	eor	r24, r24
                        csd_c_size |= b;
     f1c:	e2 2e       	mov	r14, r18
     f1e:	ff 24       	eor	r15, r15
     f20:	e8 2a       	or	r14, r24
     f22:	f9 2a       	or	r15, r25
                        break;
                }
                if(i == 9)
     f24:	19 30       	cpi	r17, 0x09	; 9
     f26:	09 f0       	breq	.+2      	; 0xf2a <sd_raw_get_info+0x1a8>
     f28:	68 c0       	rjmp	.+208    	; 0xffa <sd_raw_get_info+0x278>
                {
                    ++csd_c_size;
     f2a:	08 94       	sec
     f2c:	e1 1c       	adc	r14, r1
     f2e:	f1 1c       	adc	r15, r1
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
     f30:	97 01       	movw	r18, r14
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	03 e1       	ldi	r16, 0x13	; 19
     f40:	0e 94 16 34 	call	0x682c	; 0x682c <__ashldi3>
     f44:	29 8b       	std	Y+17, r18	; 0x11
     f46:	3a 8b       	std	Y+18, r19	; 0x12
     f48:	4b 8b       	std	Y+19, r20	; 0x13
     f4a:	5c 8b       	std	Y+20, r21	; 0x14
     f4c:	6d 8b       	std	Y+21, r22	; 0x15
     f4e:	7e 8b       	std	Y+22, r23	; 0x16
     f50:	8f 8b       	std	Y+23, r24	; 0x17
     f52:	98 8f       	std	Y+24, r25	; 0x18
     f54:	52 c0       	rjmp	.+164    	; 0xffa <sd_raw_get_info+0x278>
                }
            }
            else
#endif
            {
                switch(i)
     f56:	17 30       	cpi	r17, 0x07	; 7
     f58:	d9 f0       	breq	.+54     	; 0xf90 <sd_raw_get_info+0x20e>
     f5a:	18 30       	cpi	r17, 0x08	; 8
     f5c:	30 f4       	brcc	.+12     	; 0xf6a <sd_raw_get_info+0x1e8>
     f5e:	15 30       	cpi	r17, 0x05	; 5
     f60:	61 f0       	breq	.+24     	; 0xf7a <sd_raw_get_info+0x1f8>
     f62:	16 30       	cpi	r17, 0x06	; 6
     f64:	09 f0       	breq	.+2      	; 0xf68 <sd_raw_get_info+0x1e6>
     f66:	49 c0       	rjmp	.+146    	; 0xffa <sd_raw_get_info+0x278>
     f68:	0c c0       	rjmp	.+24     	; 0xf82 <sd_raw_get_info+0x200>
     f6a:	19 30       	cpi	r17, 0x09	; 9
     f6c:	31 f1       	breq	.+76     	; 0xfba <sd_raw_get_info+0x238>
     f6e:	19 30       	cpi	r17, 0x09	; 9
     f70:	c0 f0       	brcs	.+48     	; 0xfa2 <sd_raw_get_info+0x220>
     f72:	1a 30       	cpi	r17, 0x0A	; 10
     f74:	09 f0       	breq	.+2      	; 0xf78 <sd_raw_get_info+0x1f6>
     f76:	41 c0       	rjmp	.+130    	; 0xffa <sd_raw_get_info+0x278>
     f78:	25 c0       	rjmp	.+74     	; 0xfc4 <sd_raw_get_info+0x242>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
     f7a:	7f e0       	ldi	r23, 0x0F	; 15
     f7c:	97 2e       	mov	r9, r23
     f7e:	92 22       	and	r9, r18
     f80:	3c c0       	rjmp	.+120    	; 0xffa <sd_raw_get_info+0x278>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
     f82:	82 2f       	mov	r24, r18
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	83 70       	andi	r24, 0x03	; 3
     f88:	90 70       	andi	r25, 0x00	; 0
                        csd_c_size <<= 8;
     f8a:	f8 2e       	mov	r15, r24
     f8c:	ee 24       	eor	r14, r14
     f8e:	35 c0       	rjmp	.+106    	; 0xffa <sd_raw_get_info+0x278>
                        break;
                    case 7:
                        csd_c_size |= b;
     f90:	82 2f       	mov	r24, r18
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	e8 2a       	or	r14, r24
     f96:	f9 2a       	or	r15, r25
                        csd_c_size <<= 2;
     f98:	ee 0c       	add	r14, r14
     f9a:	ff 1c       	adc	r15, r15
     f9c:	ee 0c       	add	r14, r14
     f9e:	ff 1c       	adc	r15, r15
     fa0:	2c c0       	rjmp	.+88     	; 0xffa <sd_raw_get_info+0x278>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
     fa2:	22 95       	swap	r18
     fa4:	26 95       	lsr	r18
     fa6:	26 95       	lsr	r18
     fa8:	23 70       	andi	r18, 0x03	; 3
     faa:	82 2f       	mov	r24, r18
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	e8 2a       	or	r14, r24
     fb0:	f9 2a       	or	r15, r25
                        ++csd_c_size;
     fb2:	08 94       	sec
     fb4:	e1 1c       	adc	r14, r1
     fb6:	f1 1c       	adc	r15, r1
     fb8:	20 c0       	rjmp	.+64     	; 0xffa <sd_raw_get_info+0x278>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
     fba:	43 e0       	ldi	r20, 0x03	; 3
     fbc:	b4 2e       	mov	r11, r20
     fbe:	b2 22       	and	r11, r18
                        csd_c_size_mult <<= 1;
     fc0:	bb 0c       	add	r11, r11
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <sd_raw_get_info+0x278>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
     fc4:	22 1f       	adc	r18, r18
     fc6:	22 27       	eor	r18, r18
     fc8:	22 1f       	adc	r18, r18
     fca:	b2 2a       	or	r11, r18

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
     fcc:	97 01       	movw	r18, r14
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	e9 2d       	mov	r30, r9
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	32 96       	adiw	r30, 0x02	; 2
     fd8:	eb 0d       	add	r30, r11
     fda:	f1 1d       	adc	r31, r1
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <sd_raw_get_info+0x264>
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	44 1f       	adc	r20, r20
     fe4:	55 1f       	adc	r21, r21
     fe6:	ea 95       	dec	r30
     fe8:	d2 f7       	brpl	.-12     	; 0xfde <sd_raw_get_info+0x25c>
     fea:	29 8b       	std	Y+17, r18	; 0x11
     fec:	3a 8b       	std	Y+18, r19	; 0x12
     fee:	4b 8b       	std	Y+19, r20	; 0x13
     ff0:	5c 8b       	std	Y+20, r21	; 0x14
     ff2:	1d 8a       	std	Y+21, r1	; 0x15
     ff4:	1e 8a       	std	Y+22, r1	; 0x16
     ff6:	1f 8a       	std	Y+23, r1	; 0x17
     ff8:	18 8e       	std	Y+24, r1	; 0x18
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
     ffa:	1f 5f       	subi	r17, 0xFF	; 255
     ffc:	12 31       	cpi	r17, 0x12	; 18
     ffe:	09 f0       	breq	.+2      	; 0x1002 <sd_raw_get_info+0x280>
    1000:	66 cf       	rjmp	.-308    	; 0xece <sd_raw_get_info+0x14c>
                }
            }
        }
    }

    unselect_card();
    1002:	2a 9a       	sbi	0x05, 2	; 5
    1004:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	bf 90       	pop	r11
    1018:	af 90       	pop	r10
    101a:	9f 90       	pop	r9
    101c:	8f 90       	pop	r8
    101e:	08 95       	ret

00001020 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    1020:	2f 92       	push	r2
    1022:	3f 92       	push	r3
    1024:	4f 92       	push	r4
    1026:	5f 92       	push	r5
    1028:	6f 92       	push	r6
    102a:	7f 92       	push	r7
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	2c 97       	sbiw	r28, 0x0c	; 12
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	39 01       	movw	r6, r18
    1056:	4a 01       	movw	r8, r20
    1058:	5b 01       	movw	r10, r22
    105a:	6c 01       	movw	r12, r24
    105c:	1a 83       	std	Y+2, r17	; 0x02
    105e:	09 83       	std	Y+1, r16	; 0x01
    1060:	fc 82       	std	Y+4, r15	; 0x04
    1062:	eb 82       	std	Y+3, r14	; 0x03
    1064:	90 c1       	rjmp	.+800    	; 0x1386 <sd_raw_write+0x366>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    1066:	bf ef       	ldi	r27, 0xFF	; 255
    1068:	4b 2e       	mov	r4, r27
    106a:	b1 e0       	ldi	r27, 0x01	; 1
    106c:	5b 2e       	mov	r5, r27
    106e:	46 20       	and	r4, r6
    1070:	57 20       	and	r5, r7
        block_address = offset - block_offset;
    1072:	92 01       	movw	r18, r4
    1074:	a6 2d       	mov	r26, r6
    1076:	a4 19       	sub	r26, r4
    1078:	aa 87       	std	Y+10, r26	; 0x0a
    107a:	e1 e0       	ldi	r30, 0x01	; 1
    107c:	6a 16       	cp	r6, r26
    107e:	08 f0       	brcs	.+2      	; 0x1082 <sd_raw_write+0x62>
    1080:	e0 e0       	ldi	r30, 0x00	; 0
    1082:	87 2d       	mov	r24, r7
    1084:	83 1b       	sub	r24, r19
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	78 16       	cp	r7, r24
    108a:	08 f0       	brcs	.+2      	; 0x108e <sd_raw_write+0x6e>
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	b8 2f       	mov	r27, r24
    1090:	be 1b       	sub	r27, r30
    1092:	bd 83       	std	Y+5, r27	; 0x05
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	8b 17       	cp	r24, r27
    1098:	08 f0       	brcs	.+2      	; 0x109c <sd_raw_write+0x7c>
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	29 2b       	or	r18, r25
    109e:	e8 2d       	mov	r30, r8
    10a0:	e2 1b       	sub	r30, r18
    10a2:	ee 83       	std	Y+6, r30	; 0x06
    10a4:	31 e0       	ldi	r19, 0x01	; 1
    10a6:	8e 16       	cp	r8, r30
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <sd_raw_write+0x8c>
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	f9 2d       	mov	r31, r9
    10ae:	f3 1b       	sub	r31, r19
    10b0:	ff 83       	std	Y+7, r31	; 0x07
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	9f 16       	cp	r9, r31
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <sd_raw_write+0x9a>
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	2a 2d       	mov	r18, r10
    10bc:	26 1b       	sub	r18, r22
    10be:	28 87       	std	Y+8, r18	; 0x08
    10c0:	71 e0       	ldi	r23, 0x01	; 1
    10c2:	a2 16       	cp	r10, r18
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <sd_raw_write+0xa8>
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	2b 2c       	mov	r2, r11
    10ca:	27 1a       	sub	r2, r23
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	b2 14       	cp	r11, r2
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <sd_raw_write+0xb4>
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	3c 2c       	mov	r3, r12
    10d6:	39 1a       	sub	r3, r25
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	c3 14       	cp	r12, r3
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <sd_raw_write+0xc0>
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	3d 2d       	mov	r19, r13
    10e2:	39 1b       	sub	r19, r25
    10e4:	39 87       	std	Y+9, r19	; 0x09
        write_length = 512 - block_offset; /* write up to block border */
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	92 e0       	ldi	r25, 0x02	; 2
    10ea:	84 19       	sub	r24, r4
    10ec:	95 09       	sbc	r25, r5
    10ee:	9c 87       	std	Y+12, r25	; 0x0c
    10f0:	8b 87       	std	Y+11, r24	; 0x0b
    10f2:	ab 81       	ldd	r26, Y+3	; 0x03
    10f4:	bc 81       	ldd	r27, Y+4	; 0x04
    10f6:	a8 17       	cp	r26, r24
    10f8:	b9 07       	cpc	r27, r25
    10fa:	10 f4       	brcc	.+4      	; 0x1100 <sd_raw_write+0xe0>
    10fc:	bc 87       	std	Y+12, r27	; 0x0c
    10fe:	ab 87       	std	Y+11, r26	; 0x0b
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    1100:	80 91 c3 03 	lds	r24, 0x03C3
    1104:	ba 85       	ldd	r27, Y+10	; 0x0a
    1106:	8b 17       	cp	r24, r27
    1108:	09 f5       	brne	.+66     	; 0x114c <sd_raw_write+0x12c>
    110a:	80 91 c4 03 	lds	r24, 0x03C4
    110e:	ed 81       	ldd	r30, Y+5	; 0x05
    1110:	8e 17       	cp	r24, r30
    1112:	e1 f4       	brne	.+56     	; 0x114c <sd_raw_write+0x12c>
    1114:	80 91 c5 03 	lds	r24, 0x03C5
    1118:	fe 81       	ldd	r31, Y+6	; 0x06
    111a:	8f 17       	cp	r24, r31
    111c:	b9 f4       	brne	.+46     	; 0x114c <sd_raw_write+0x12c>
    111e:	80 91 c6 03 	lds	r24, 0x03C6
    1122:	2f 81       	ldd	r18, Y+7	; 0x07
    1124:	82 17       	cp	r24, r18
    1126:	91 f4       	brne	.+36     	; 0x114c <sd_raw_write+0x12c>
    1128:	80 91 c7 03 	lds	r24, 0x03C7
    112c:	38 85       	ldd	r19, Y+8	; 0x08
    112e:	83 17       	cp	r24, r19
    1130:	69 f4       	brne	.+26     	; 0x114c <sd_raw_write+0x12c>
    1132:	80 91 c8 03 	lds	r24, 0x03C8
    1136:	82 15       	cp	r24, r2
    1138:	49 f4       	brne	.+18     	; 0x114c <sd_raw_write+0x12c>
    113a:	80 91 c9 03 	lds	r24, 0x03C9
    113e:	83 15       	cp	r24, r3
    1140:	29 f4       	brne	.+10     	; 0x114c <sd_raw_write+0x12c>
    1142:	80 91 ca 03 	lds	r24, 0x03CA
    1146:	99 85       	ldd	r25, Y+9	; 0x09
    1148:	89 17       	cp	r24, r25
    114a:	a9 f1       	breq	.+106    	; 0x11b6 <sd_raw_write+0x196>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    114c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <sd_raw_sync>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <sd_raw_write+0x136>
    1154:	1f c1       	rjmp	.+574    	; 0x1394 <sd_raw_write+0x374>
                return 0;
#endif

            if(block_offset || write_length < 512)
    1156:	41 14       	cp	r4, r1
    1158:	51 04       	cpc	r5, r1
    115a:	29 f4       	brne	.+10     	; 0x1166 <sd_raw_write+0x146>
    115c:	ab 85       	ldd	r26, Y+11	; 0x0b
    115e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1160:	a0 50       	subi	r26, 0x00	; 0
    1162:	b2 40       	sbci	r27, 0x02	; 2
    1164:	90 f4       	brcc	.+36     	; 0x118a <sd_raw_write+0x16a>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    1166:	2a 85       	ldd	r18, Y+10	; 0x0a
    1168:	3d 81       	ldd	r19, Y+5	; 0x05
    116a:	4e 81       	ldd	r20, Y+6	; 0x06
    116c:	5f 81       	ldd	r21, Y+7	; 0x07
    116e:	68 85       	ldd	r22, Y+8	; 0x08
    1170:	72 2d       	mov	r23, r2
    1172:	83 2d       	mov	r24, r3
    1174:	99 85       	ldd	r25, Y+9	; 0x09
    1176:	03 ec       	ldi	r16, 0xC3	; 195
    1178:	11 e0       	ldi	r17, 0x01	; 1
    117a:	e1 2c       	mov	r14, r1
    117c:	a2 e0       	ldi	r26, 0x02	; 2
    117e:	fa 2e       	mov	r15, r26
    1180:	0e 94 0f 0a 	call	0x141e	; 0x141e <sd_raw_read>
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <sd_raw_write+0x16a>
    1188:	05 c1       	rjmp	.+522    	; 0x1394 <sd_raw_write+0x374>
                    return 0;
            }
            raw_block_address = block_address;
    118a:	fa 85       	ldd	r31, Y+10	; 0x0a
    118c:	f0 93 c3 03 	sts	0x03C3, r31
    1190:	2d 81       	ldd	r18, Y+5	; 0x05
    1192:	20 93 c4 03 	sts	0x03C4, r18
    1196:	3e 81       	ldd	r19, Y+6	; 0x06
    1198:	30 93 c5 03 	sts	0x03C5, r19
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	80 93 c6 03 	sts	0x03C6, r24
    11a2:	98 85       	ldd	r25, Y+8	; 0x08
    11a4:	90 93 c7 03 	sts	0x03C7, r25
    11a8:	20 92 c8 03 	sts	0x03C8, r2
    11ac:	30 92 c9 03 	sts	0x03C9, r3
    11b0:	a9 85       	ldd	r26, Y+9	; 0x09
    11b2:	a0 93 ca 03 	sts	0x03CA, r26
        }

        if(buffer != raw_block)
    11b6:	e9 81       	ldd	r30, Y+1	; 0x01
    11b8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ba:	e3 5c       	subi	r30, 0xC3	; 195
    11bc:	f1 40       	sbci	r31, 0x01	; 1
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <sd_raw_write+0x1c8>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    11c0:	92 01       	movw	r18, r4
    11c2:	2d 53       	subi	r18, 0x3D	; 61
    11c4:	3e 4f       	sbci	r19, 0xFE	; 254
    11c6:	c9 01       	movw	r24, r18
    11c8:	69 81       	ldd	r22, Y+1	; 0x01
    11ca:	7a 81       	ldd	r23, Y+2	; 0x02
    11cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    11ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    11d0:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    11d4:	10 92 cb 03 	sts	0x03CB, r1

            if(length == write_length)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	ab 85       	ldd	r26, Y+11	; 0x0b
    11de:	bc 85       	ldd	r27, Y+12	; 0x0c
    11e0:	8a 17       	cp	r24, r26
    11e2:	9b 07       	cpc	r25, r27
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <sd_raw_write+0x1c8>
    11e6:	d4 c0       	rjmp	.+424    	; 0x1390 <sd_raw_write+0x370>
                return 1;
#endif
        }

        /* address card */
        select_card();
    11e8:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    11ea:	80 91 cc 03 	lds	r24, 0x03CC
    11ee:	82 ff       	sbrs	r24, 2
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <sd_raw_write+0x1f0>
    11f2:	2a 85       	ldd	r18, Y+10	; 0x0a
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	4e 81       	ldd	r20, Y+6	; 0x06
    11f8:	5f 81       	ldd	r21, Y+7	; 0x07
    11fa:	68 85       	ldd	r22, Y+8	; 0x08
    11fc:	72 2d       	mov	r23, r2
    11fe:	83 2d       	mov	r24, r3
    1200:	99 85       	ldd	r25, Y+9	; 0x09
    1202:	09 e0       	ldi	r16, 0x09	; 9
    1204:	0e 94 97 33 	call	0x672e	; 0x672e <__lshrdi3>
    1208:	ba 01       	movw	r22, r20
    120a:	a9 01       	movw	r20, r18
    120c:	9b 01       	movw	r18, r22
    120e:	05 c0       	rjmp	.+10     	; 0x121a <sd_raw_write+0x1fa>
    1210:	8a 85       	ldd	r24, Y+10	; 0x0a
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	2e 81       	ldd	r18, Y+6	; 0x06
    1216:	3f 81       	ldd	r19, Y+7	; 0x07
    1218:	ac 01       	movw	r20, r24
    121a:	88 e1       	ldi	r24, 0x18	; 24
    121c:	b9 01       	movw	r22, r18
    121e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
    1222:	88 23       	and	r24, r24
    1224:	11 f0       	breq	.+4      	; 0x122a <sd_raw_write+0x20a>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    1226:	2a 9a       	sbi	0x05, 2	; 5
    1228:	b5 c0       	rjmp	.+362    	; 0x1394 <sd_raw_write+0x374>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    122a:	be ef       	ldi	r27, 0xFE	; 254
    122c:	be bd       	out	0x2e, r27	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    122e:	0d b4       	in	r0, 0x2d	; 45
    1230:	07 fe       	sbrs	r0, 7
    1232:	fd cf       	rjmp	.-6      	; 0x122e <sd_raw_write+0x20e>
    SPSR &= ~(1 << SPIF);
    1234:	8d b5       	in	r24, 0x2d	; 45
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	8d bd       	out	0x2d, r24	; 45
    123a:	e3 ec       	ldi	r30, 0xC3	; 195
    123c:	f1 e0       	ldi	r31, 0x01	; 1
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    123e:	81 91       	ld	r24, Z+
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1240:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    1242:	0d b4       	in	r0, 0x2d	; 45
    1244:	07 fe       	sbrs	r0, 7
    1246:	fd cf       	rjmp	.-6      	; 0x1242 <sd_raw_write+0x222>
    SPSR &= ~(1 << SPIF);
    1248:	8d b5       	in	r24, 0x2d	; 45
    124a:	8f 77       	andi	r24, 0x7F	; 127
    124c:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    124e:	23 e0       	ldi	r18, 0x03	; 3
    1250:	e3 3c       	cpi	r30, 0xC3	; 195
    1252:	f2 07       	cpc	r31, r18
    1254:	a1 f7       	brne	.-24     	; 0x123e <sd_raw_write+0x21e>
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1256:	3f ef       	ldi	r19, 0xFF	; 255
    1258:	3e bd       	out	0x2e, r19	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    125a:	0d b4       	in	r0, 0x2d	; 45
    125c:	07 fe       	sbrs	r0, 7
    125e:	fd cf       	rjmp	.-6      	; 0x125a <sd_raw_write+0x23a>
    SPSR &= ~(1 << SPIF);
    1260:	8d b5       	in	r24, 0x2d	; 45
    1262:	8f 77       	andi	r24, 0x7F	; 127
    1264:	8d bd       	out	0x2d, r24	; 45
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    126a:	0d b4       	in	r0, 0x2d	; 45
    126c:	07 fe       	sbrs	r0, 7
    126e:	fd cf       	rjmp	.-6      	; 0x126a <sd_raw_write+0x24a>
    SPSR &= ~(1 << SPIF);
    1270:	8d b5       	in	r24, 0x2d	; 45
    1272:	8f 77       	andi	r24, 0x7F	; 127
    1274:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1276:	9f ef       	ldi	r25, 0xFF	; 255
    1278:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    127a:	0d b4       	in	r0, 0x2d	; 45
    127c:	07 fe       	sbrs	r0, 7
    127e:	fd cf       	rjmp	.-6      	; 0x127a <sd_raw_write+0x25a>
    SPSR &= ~(1 << SPIF);
    1280:	8d b5       	in	r24, 0x2d	; 45
    1282:	8f 77       	andi	r24, 0x7F	; 127
    1284:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1286:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    1288:	8f 3f       	cpi	r24, 0xFF	; 255
    128a:	a9 f7       	brne	.-22     	; 0x1276 <sd_raw_write+0x256>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    128c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    128e:	0d b4       	in	r0, 0x2d	; 45
    1290:	07 fe       	sbrs	r0, 7
    1292:	fd cf       	rjmp	.-6      	; 0x128e <sd_raw_write+0x26e>
    SPSR &= ~(1 << SPIF);
    1294:	8d b5       	in	r24, 0x2d	; 45
    1296:	8f 77       	andi	r24, 0x7F	; 127
    1298:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    129a:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    129c:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    129e:	a9 81       	ldd	r26, Y+1	; 0x01
    12a0:	ba 81       	ldd	r27, Y+2	; 0x02
    12a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    12a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    12a6:	ae 0f       	add	r26, r30
    12a8:	bf 1f       	adc	r27, r31
    12aa:	ba 83       	std	Y+2, r27	; 0x02
    12ac:	a9 83       	std	Y+1, r26	; 0x01
        offset += write_length;
    12ae:	9f 01       	movw	r18, r30
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	46 2c       	mov	r4, r6
    12be:	4e 0e       	add	r4, r30
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	46 14       	cp	r4, r6
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <sd_raw_write+0x2a8>
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	e7 2d       	mov	r30, r7
    12ca:	e3 0f       	add	r30, r19
    12cc:	a1 e0       	ldi	r26, 0x01	; 1
    12ce:	e7 15       	cp	r30, r7
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <sd_raw_write+0x2b4>
    12d2:	a0 e0       	ldi	r26, 0x00	; 0
    12d4:	5f 2e       	mov	r5, r31
    12d6:	5e 0e       	add	r5, r30
    12d8:	f1 e0       	ldi	r31, 0x01	; 1
    12da:	5e 16       	cp	r5, r30
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <sd_raw_write+0x2c0>
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	af 2b       	or	r26, r31
    12e2:	e8 2d       	mov	r30, r8
    12e4:	e4 0f       	add	r30, r20
    12e6:	b1 e0       	ldi	r27, 0x01	; 1
    12e8:	e8 15       	cp	r30, r8
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <sd_raw_write+0x2ce>
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ea 2e       	mov	r14, r26
    12f0:	ee 0e       	add	r14, r30
    12f2:	f1 e0       	ldi	r31, 0x01	; 1
    12f4:	ee 16       	cp	r14, r30
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <sd_raw_write+0x2da>
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	bf 2b       	or	r27, r31
    12fc:	e9 2d       	mov	r30, r9
    12fe:	e5 0f       	add	r30, r21
    1300:	a1 e0       	ldi	r26, 0x01	; 1
    1302:	e9 15       	cp	r30, r9
    1304:	08 f0       	brcs	.+2      	; 0x1308 <sd_raw_write+0x2e8>
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	fb 2e       	mov	r15, r27
    130a:	fe 0e       	add	r15, r30
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	fe 16       	cp	r15, r30
    1310:	08 f0       	brcs	.+2      	; 0x1314 <sd_raw_write+0x2f4>
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	af 2b       	or	r26, r31
    1316:	ea 2d       	mov	r30, r10
    1318:	e6 0f       	add	r30, r22
    131a:	b1 e0       	ldi	r27, 0x01	; 1
    131c:	ea 15       	cp	r30, r10
    131e:	08 f0       	brcs	.+2      	; 0x1322 <sd_raw_write+0x302>
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	0a 2f       	mov	r16, r26
    1324:	0e 0f       	add	r16, r30
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	0e 17       	cp	r16, r30
    132a:	08 f0       	brcs	.+2      	; 0x132e <sd_raw_write+0x30e>
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	bf 2b       	or	r27, r31
    1330:	eb 2d       	mov	r30, r11
    1332:	e7 0f       	add	r30, r23
    1334:	a1 e0       	ldi	r26, 0x01	; 1
    1336:	eb 15       	cp	r30, r11
    1338:	08 f0       	brcs	.+2      	; 0x133c <sd_raw_write+0x31c>
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	1b 2f       	mov	r17, r27
    133e:	1e 0f       	add	r17, r30
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	1e 17       	cp	r17, r30
    1344:	08 f0       	brcs	.+2      	; 0x1348 <sd_raw_write+0x328>
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	af 2b       	or	r26, r31
    134a:	ec 2d       	mov	r30, r12
    134c:	e8 0f       	add	r30, r24
    134e:	b1 e0       	ldi	r27, 0x01	; 1
    1350:	ec 15       	cp	r30, r12
    1352:	08 f0       	brcs	.+2      	; 0x1356 <sd_raw_write+0x336>
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ae 0f       	add	r26, r30
    1358:	f1 e0       	ldi	r31, 0x01	; 1
    135a:	ae 17       	cp	r26, r30
    135c:	08 f0       	brcs	.+2      	; 0x1360 <sd_raw_write+0x340>
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	bf 2b       	or	r27, r31
    1362:	8d 2d       	mov	r24, r13
    1364:	89 0f       	add	r24, r25
    1366:	32 01       	movw	r6, r4
    1368:	47 01       	movw	r8, r14
    136a:	58 01       	movw	r10, r16
    136c:	6d 01       	movw	r12, r26
    136e:	d8 0e       	add	r13, r24
        length -= write_length;
    1370:	2b 81       	ldd	r18, Y+3	; 0x03
    1372:	3c 81       	ldd	r19, Y+4	; 0x04
    1374:	8b 85       	ldd	r24, Y+11	; 0x0b
    1376:	9c 85       	ldd	r25, Y+12	; 0x0c
    1378:	28 1b       	sub	r18, r24
    137a:	39 0b       	sbc	r19, r25
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	90 93 cb 03 	sts	0x03CB, r25
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    1386:	ab 81       	ldd	r26, Y+3	; 0x03
    1388:	bc 81       	ldd	r27, Y+4	; 0x04
    138a:	ab 2b       	or	r26, r27
    138c:	09 f0       	breq	.+2      	; 0x1390 <sd_raw_write+0x370>
    138e:	6b ce       	rjmp	.-810    	; 0x1066 <sd_raw_write+0x46>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <sd_raw_write+0x376>
    1394:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    1396:	2c 96       	adiw	r28, 0x0c	; 12
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	ef 90       	pop	r14
    13ae:	df 90       	pop	r13
    13b0:	cf 90       	pop	r12
    13b2:	bf 90       	pop	r11
    13b4:	af 90       	pop	r10
    13b6:	9f 90       	pop	r9
    13b8:	8f 90       	pop	r8
    13ba:	7f 90       	pop	r7
    13bc:	6f 90       	pop	r6
    13be:	5f 90       	pop	r5
    13c0:	4f 90       	pop	r4
    13c2:	3f 90       	pop	r3
    13c4:	2f 90       	pop	r2
    13c6:	08 95       	ret

000013c8 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    13d0:	80 91 cb 03 	lds	r24, 0x03CB
    13d4:	88 23       	and	r24, r24
    13d6:	11 f0       	breq	.+4      	; 0x13dc <sd_raw_sync+0x14>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	1c c0       	rjmp	.+56     	; 0x1414 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    13dc:	20 91 c3 03 	lds	r18, 0x03C3
    13e0:	30 91 c4 03 	lds	r19, 0x03C4
    13e4:	40 91 c5 03 	lds	r20, 0x03C5
    13e8:	50 91 c6 03 	lds	r21, 0x03C6
    13ec:	60 91 c7 03 	lds	r22, 0x03C7
    13f0:	70 91 c8 03 	lds	r23, 0x03C8
    13f4:	80 91 c9 03 	lds	r24, 0x03C9
    13f8:	90 91 ca 03 	lds	r25, 0x03CA
    13fc:	03 ec       	ldi	r16, 0xC3	; 195
    13fe:	11 e0       	ldi	r17, 0x01	; 1
    1400:	e1 2c       	mov	r14, r1
    1402:	e2 e0       	ldi	r30, 0x02	; 2
    1404:	fe 2e       	mov	r15, r30
    1406:	0e 94 10 08 	call	0x1020	; 0x1020 <sd_raw_write>
    140a:	88 23       	and	r24, r24
    140c:	19 f0       	breq	.+6      	; 0x1414 <sd_raw_sync+0x4c>
        return 0;
    raw_block_written = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 93 cb 03 	sts	0x03CB, r24
#endif
    return 1;
}
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	08 95       	ret

0000141e <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    141e:	2f 92       	push	r2
    1420:	3f 92       	push	r3
    1422:	4f 92       	push	r4
    1424:	5f 92       	push	r5
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	29 97       	sbiw	r28, 0x09	; 9
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	39 01       	movw	r6, r18
    1454:	4a 01       	movw	r8, r20
    1456:	5b 01       	movw	r10, r22
    1458:	6c 01       	movw	r12, r24
    145a:	28 01       	movw	r4, r16
    145c:	fa 82       	std	Y+2, r15	; 0x02
    145e:	e9 82       	std	Y+1, r14	; 0x01
    1460:	6b c1       	rjmp	.+726    	; 0x1738 <sd_raw_read+0x31a>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    1462:	ff ef       	ldi	r31, 0xFF	; 255
    1464:	ef 2e       	mov	r14, r31
    1466:	f1 e0       	ldi	r31, 0x01	; 1
    1468:	ff 2e       	mov	r15, r31
    146a:	e6 20       	and	r14, r6
    146c:	f7 20       	and	r15, r7
        block_address = offset - block_offset;
    146e:	97 01       	movw	r18, r14
    1470:	a6 2d       	mov	r26, r6
    1472:	ae 19       	sub	r26, r14
    1474:	af 83       	std	Y+7, r26	; 0x07
    1476:	e1 e0       	ldi	r30, 0x01	; 1
    1478:	6a 16       	cp	r6, r26
    147a:	08 f0       	brcs	.+2      	; 0x147e <sd_raw_read+0x60>
    147c:	e0 e0       	ldi	r30, 0x00	; 0
    147e:	87 2d       	mov	r24, r7
    1480:	83 1b       	sub	r24, r19
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	78 16       	cp	r7, r24
    1486:	08 f0       	brcs	.+2      	; 0x148a <sd_raw_read+0x6c>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	b8 2f       	mov	r27, r24
    148c:	be 1b       	sub	r27, r30
    148e:	bb 83       	std	Y+3, r27	; 0x03
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	8b 17       	cp	r24, r27
    1494:	08 f0       	brcs	.+2      	; 0x1498 <sd_raw_read+0x7a>
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	29 2b       	or	r18, r25
    149a:	38 2c       	mov	r3, r8
    149c:	32 1a       	sub	r3, r18
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	83 14       	cp	r8, r3
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <sd_raw_read+0x88>
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	19 2d       	mov	r17, r9
    14a8:	13 1b       	sub	r17, r19
    14aa:	61 e0       	ldi	r22, 0x01	; 1
    14ac:	91 16       	cp	r9, r17
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <sd_raw_read+0x94>
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	ea 2d       	mov	r30, r10
    14b4:	e6 1b       	sub	r30, r22
    14b6:	ec 83       	std	Y+4, r30	; 0x04
    14b8:	71 e0       	ldi	r23, 0x01	; 1
    14ba:	ae 16       	cp	r10, r30
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <sd_raw_read+0xa2>
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	fb 2d       	mov	r31, r11
    14c2:	f7 1b       	sub	r31, r23
    14c4:	fd 83       	std	Y+5, r31	; 0x05
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	bf 16       	cp	r11, r31
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <sd_raw_read+0xb0>
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	2c 2c       	mov	r2, r12
    14d0:	29 1a       	sub	r2, r25
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	c2 14       	cp	r12, r2
    14d6:	08 f0       	brcs	.+2      	; 0x14da <sd_raw_read+0xbc>
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	2d 2d       	mov	r18, r13
    14dc:	29 1b       	sub	r18, r25
    14de:	2e 83       	std	Y+6, r18	; 0x06
        read_length = 512 - block_offset; /* read up to block border */
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	92 e0       	ldi	r25, 0x02	; 2
    14e4:	8e 19       	sub	r24, r14
    14e6:	9f 09       	sbc	r25, r15
    14e8:	99 87       	std	Y+9, r25	; 0x09
    14ea:	88 87       	std	Y+8, r24	; 0x08
    14ec:	a9 81       	ldd	r26, Y+1	; 0x01
    14ee:	ba 81       	ldd	r27, Y+2	; 0x02
    14f0:	a8 17       	cp	r26, r24
    14f2:	b9 07       	cpc	r27, r25
    14f4:	10 f4       	brcc	.+4      	; 0x14fa <sd_raw_read+0xdc>
    14f6:	b9 87       	std	Y+9, r27	; 0x09
    14f8:	a8 87       	std	Y+8, r26	; 0x08
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    14fa:	80 91 c3 03 	lds	r24, 0x03C3
    14fe:	bf 81       	ldd	r27, Y+7	; 0x07
    1500:	8b 17       	cp	r24, r27
    1502:	09 f5       	brne	.+66     	; 0x1546 <sd_raw_read+0x128>
    1504:	80 91 c4 03 	lds	r24, 0x03C4
    1508:	eb 81       	ldd	r30, Y+3	; 0x03
    150a:	8e 17       	cp	r24, r30
    150c:	e1 f4       	brne	.+56     	; 0x1546 <sd_raw_read+0x128>
    150e:	80 91 c5 03 	lds	r24, 0x03C5
    1512:	83 15       	cp	r24, r3
    1514:	c1 f4       	brne	.+48     	; 0x1546 <sd_raw_read+0x128>
    1516:	80 91 c6 03 	lds	r24, 0x03C6
    151a:	81 17       	cp	r24, r17
    151c:	a1 f4       	brne	.+40     	; 0x1546 <sd_raw_read+0x128>
    151e:	80 91 c7 03 	lds	r24, 0x03C7
    1522:	fc 81       	ldd	r31, Y+4	; 0x04
    1524:	8f 17       	cp	r24, r31
    1526:	79 f4       	brne	.+30     	; 0x1546 <sd_raw_read+0x128>
    1528:	80 91 c8 03 	lds	r24, 0x03C8
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	82 17       	cp	r24, r18
    1530:	51 f4       	brne	.+20     	; 0x1546 <sd_raw_read+0x128>
    1532:	80 91 c9 03 	lds	r24, 0x03C9
    1536:	82 15       	cp	r24, r2
    1538:	31 f4       	brne	.+12     	; 0x1546 <sd_raw_read+0x128>
    153a:	80 91 ca 03 	lds	r24, 0x03CA
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	83 17       	cp	r24, r19
    1542:	09 f4       	brne	.+2      	; 0x1546 <sd_raw_read+0x128>
    1544:	83 c0       	rjmp	.+262    	; 0x164c <sd_raw_read+0x22e>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1546:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <sd_raw_sync>
    154a:	88 23       	and	r24, r24
    154c:	09 f4       	brne	.+2      	; 0x1550 <sd_raw_read+0x132>
    154e:	fa c0       	rjmp	.+500    	; 0x1744 <sd_raw_read+0x326>
                return 0;
#endif

            /* address card */
            select_card();
    1550:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    1552:	80 91 cc 03 	lds	r24, 0x03CC
    1556:	82 ff       	sbrs	r24, 2
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <sd_raw_read+0x15a>
    155a:	2f 81       	ldd	r18, Y+7	; 0x07
    155c:	3b 81       	ldd	r19, Y+3	; 0x03
    155e:	43 2d       	mov	r20, r3
    1560:	51 2f       	mov	r21, r17
    1562:	6c 81       	ldd	r22, Y+4	; 0x04
    1564:	7d 81       	ldd	r23, Y+5	; 0x05
    1566:	82 2d       	mov	r24, r2
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	09 e0       	ldi	r16, 0x09	; 9
    156c:	0e 94 97 33 	call	0x672e	; 0x672e <__lshrdi3>
    1570:	ba 01       	movw	r22, r20
    1572:	a9 01       	movw	r20, r18
    1574:	9b 01       	movw	r18, r22
    1576:	05 c0       	rjmp	.+10     	; 0x1582 <sd_raw_read+0x164>
    1578:	8f 81       	ldd	r24, Y+7	; 0x07
    157a:	9b 81       	ldd	r25, Y+3	; 0x03
    157c:	23 2d       	mov	r18, r3
    157e:	31 2f       	mov	r19, r17
    1580:	ac 01       	movw	r20, r24
    1582:	81 e1       	ldi	r24, 0x11	; 17
    1584:	b9 01       	movw	r22, r18
    1586:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
    158a:	88 23       	and	r24, r24
    158c:	19 f0       	breq	.+6      	; 0x1594 <sd_raw_read+0x176>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    158e:	2a 9a       	sbi	0x05, 2	; 5
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	d8 c0       	rjmp	.+432    	; 0x1744 <sd_raw_read+0x326>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1598:	0d b4       	in	r0, 0x2d	; 45
    159a:	07 fe       	sbrs	r0, 7
    159c:	fd cf       	rjmp	.-6      	; 0x1598 <sd_raw_read+0x17a>
    SPSR &= ~(1 << SPIF);
    159e:	8d b5       	in	r24, 0x2d	; 45
    15a0:	8f 77       	andi	r24, 0x7F	; 127
    15a2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    15a4:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    15a6:	8e 3f       	cpi	r24, 0xFE	; 254
    15a8:	a9 f7       	brne	.-22     	; 0x1594 <sd_raw_read+0x176>
    15aa:	e3 ec       	ldi	r30, 0xC3	; 195
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    15ae:	9f ef       	ldi	r25, 0xFF	; 255
    15b0:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    15b2:	0d b4       	in	r0, 0x2d	; 45
    15b4:	07 fe       	sbrs	r0, 7
    15b6:	fd cf       	rjmp	.-6      	; 0x15b2 <sd_raw_read+0x194>
    SPSR &= ~(1 << SPIF);
    15b8:	8d b5       	in	r24, 0x2d	; 45
    15ba:	8f 77       	andi	r24, 0x7F	; 127
    15bc:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    15be:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    15c0:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    15c2:	a3 e0       	ldi	r26, 0x03	; 3
    15c4:	e2 3c       	cpi	r30, 0xC2	; 194
    15c6:	fa 07       	cpc	r31, r26
    15c8:	11 f0       	breq	.+4      	; 0x15ce <sd_raw_read+0x1b0>
                *cache++ = sd_raw_rec_byte();
    15ca:	31 96       	adiw	r30, 0x01	; 1
    15cc:	f0 cf       	rjmp	.-32     	; 0x15ae <sd_raw_read+0x190>
            raw_block_address = block_address;
    15ce:	bf 81       	ldd	r27, Y+7	; 0x07
    15d0:	b0 93 c3 03 	sts	0x03C3, r27
    15d4:	eb 81       	ldd	r30, Y+3	; 0x03
    15d6:	e0 93 c4 03 	sts	0x03C4, r30
    15da:	30 92 c5 03 	sts	0x03C5, r3
    15de:	10 93 c6 03 	sts	0x03C6, r17
    15e2:	fc 81       	ldd	r31, Y+4	; 0x04
    15e4:	f0 93 c7 03 	sts	0x03C7, r31
    15e8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ea:	20 93 c8 03 	sts	0x03C8, r18
    15ee:	20 92 c9 03 	sts	0x03C9, r2
    15f2:	3e 81       	ldd	r19, Y+6	; 0x06
    15f4:	30 93 ca 03 	sts	0x03CA, r19

            memcpy(buffer, raw_block + block_offset, read_length);
    15f8:	97 01       	movw	r18, r14
    15fa:	2d 53       	subi	r18, 0x3D	; 61
    15fc:	3e 4f       	sbci	r19, 0xFE	; 254
    15fe:	c2 01       	movw	r24, r4
    1600:	b9 01       	movw	r22, r18
    1602:	48 85       	ldd	r20, Y+8	; 0x08
    1604:	59 85       	ldd	r21, Y+9	; 0x09
    1606:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <memcpy>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    160e:	0d b4       	in	r0, 0x2d	; 45
    1610:	07 fe       	sbrs	r0, 7
    1612:	fd cf       	rjmp	.-6      	; 0x160e <sd_raw_read+0x1f0>
    SPSR &= ~(1 << SPIF);
    1614:	8d b5       	in	r24, 0x2d	; 45
    1616:	8f 77       	andi	r24, 0x7F	; 127
    1618:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    161a:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    161c:	9f ef       	ldi	r25, 0xFF	; 255
    161e:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    1620:	0d b4       	in	r0, 0x2d	; 45
    1622:	07 fe       	sbrs	r0, 7
    1624:	fd cf       	rjmp	.-6      	; 0x1620 <sd_raw_read+0x202>
    SPSR &= ~(1 << SPIF);
    1626:	8d b5       	in	r24, 0x2d	; 45
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    162c:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    162e:	2a 9a       	sbi	0x05, 2	; 5
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1630:	af ef       	ldi	r26, 0xFF	; 255
    1632:	ae bd       	out	0x2e, r26	; 46
    while(!(SPSR & (1 << SPIF)));
    1634:	0d b4       	in	r0, 0x2d	; 45
    1636:	07 fe       	sbrs	r0, 7
    1638:	fd cf       	rjmp	.-6      	; 0x1634 <sd_raw_read+0x216>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    163a:	e8 85       	ldd	r30, Y+8	; 0x08
    163c:	f9 85       	ldd	r31, Y+9	; 0x09
    163e:	4e 0e       	add	r4, r30
    1640:	5f 1e       	adc	r5, r31
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    1642:	8d b5       	in	r24, 0x2d	; 45
    1644:	8f 77       	andi	r24, 0x7F	; 127
    1646:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1648:	8e b5       	in	r24, 0x2e	; 46
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <sd_raw_read+0x248>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    164c:	97 01       	movw	r18, r14
    164e:	2d 53       	subi	r18, 0x3D	; 61
    1650:	3e 4f       	sbci	r19, 0xFE	; 254
    1652:	c2 01       	movw	r24, r4
    1654:	b9 01       	movw	r22, r18
    1656:	48 85       	ldd	r20, Y+8	; 0x08
    1658:	59 85       	ldd	r21, Y+9	; 0x09
    165a:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <memcpy>
            buffer += read_length;
    165e:	28 85       	ldd	r18, Y+8	; 0x08
    1660:	39 85       	ldd	r19, Y+9	; 0x09
    1662:	42 0e       	add	r4, r18
    1664:	53 1e       	adc	r5, r19
        }
#endif

        length -= read_length;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	a8 85       	ldd	r26, Y+8	; 0x08
    166c:	b9 85       	ldd	r27, Y+9	; 0x09
    166e:	8a 1b       	sub	r24, r26
    1670:	9b 0b       	sbc	r25, r27
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
        offset += read_length;
    1676:	ad 01       	movw	r20, r26
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	26 2c       	mov	r2, r6
    1686:	24 0e       	add	r2, r20
    1688:	31 e0       	ldi	r19, 0x01	; 1
    168a:	26 14       	cp	r2, r6
    168c:	08 f0       	brcs	.+2      	; 0x1690 <sd_raw_read+0x272>
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	27 2d       	mov	r18, r7
    1692:	25 0f       	add	r18, r21
    1694:	e1 e0       	ldi	r30, 0x01	; 1
    1696:	27 15       	cp	r18, r7
    1698:	08 f0       	brcs	.+2      	; 0x169c <sd_raw_read+0x27e>
    169a:	e0 e0       	ldi	r30, 0x00	; 0
    169c:	33 2e       	mov	r3, r19
    169e:	32 0e       	add	r3, r18
    16a0:	31 e0       	ldi	r19, 0x01	; 1
    16a2:	32 16       	cp	r3, r18
    16a4:	08 f0       	brcs	.+2      	; 0x16a8 <sd_raw_read+0x28a>
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	e3 2b       	or	r30, r19
    16aa:	28 2d       	mov	r18, r8
    16ac:	26 0f       	add	r18, r22
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	28 15       	cp	r18, r8
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <sd_raw_read+0x298>
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	ee 2e       	mov	r14, r30
    16b8:	e2 0e       	add	r14, r18
    16ba:	31 e0       	ldi	r19, 0x01	; 1
    16bc:	e2 16       	cp	r14, r18
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <sd_raw_read+0x2a4>
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	f3 2b       	or	r31, r19
    16c4:	29 2d       	mov	r18, r9
    16c6:	27 0f       	add	r18, r23
    16c8:	e1 e0       	ldi	r30, 0x01	; 1
    16ca:	29 15       	cp	r18, r9
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <sd_raw_read+0x2b2>
    16ce:	e0 e0       	ldi	r30, 0x00	; 0
    16d0:	ff 2e       	mov	r15, r31
    16d2:	f2 0e       	add	r15, r18
    16d4:	31 e0       	ldi	r19, 0x01	; 1
    16d6:	f2 16       	cp	r15, r18
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <sd_raw_read+0x2be>
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	e3 2b       	or	r30, r19
    16de:	2a 2d       	mov	r18, r10
    16e0:	28 0f       	add	r18, r24
    16e2:	f1 e0       	ldi	r31, 0x01	; 1
    16e4:	2a 15       	cp	r18, r10
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <sd_raw_read+0x2cc>
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	0e 2f       	mov	r16, r30
    16ec:	02 0f       	add	r16, r18
    16ee:	31 e0       	ldi	r19, 0x01	; 1
    16f0:	02 17       	cp	r16, r18
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <sd_raw_read+0x2d8>
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	f3 2b       	or	r31, r19
    16f8:	2b 2d       	mov	r18, r11
    16fa:	29 0f       	add	r18, r25
    16fc:	e1 e0       	ldi	r30, 0x01	; 1
    16fe:	2b 15       	cp	r18, r11
    1700:	08 f0       	brcs	.+2      	; 0x1704 <sd_raw_read+0x2e6>
    1702:	e0 e0       	ldi	r30, 0x00	; 0
    1704:	1f 2f       	mov	r17, r31
    1706:	12 0f       	add	r17, r18
    1708:	31 e0       	ldi	r19, 0x01	; 1
    170a:	12 17       	cp	r17, r18
    170c:	08 f0       	brcs	.+2      	; 0x1710 <sd_raw_read+0x2f2>
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	e3 2b       	or	r30, r19
    1712:	2c 2d       	mov	r18, r12
    1714:	2a 0f       	add	r18, r26
    1716:	f1 e0       	ldi	r31, 0x01	; 1
    1718:	2c 15       	cp	r18, r12
    171a:	08 f0       	brcs	.+2      	; 0x171e <sd_raw_read+0x300>
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	e2 0f       	add	r30, r18
    1720:	31 e0       	ldi	r19, 0x01	; 1
    1722:	e2 17       	cp	r30, r18
    1724:	08 f0       	brcs	.+2      	; 0x1728 <sd_raw_read+0x30a>
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	f3 2b       	or	r31, r19
    172a:	8d 2d       	mov	r24, r13
    172c:	8b 0f       	add	r24, r27
    172e:	31 01       	movw	r6, r2
    1730:	47 01       	movw	r8, r14
    1732:	58 01       	movw	r10, r16
    1734:	6f 01       	movw	r12, r30
    1736:	d8 0e       	add	r13, r24
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	ef 2b       	or	r30, r31
    173e:	09 f0       	breq	.+2      	; 0x1742 <sd_raw_read+0x324>
    1740:	90 ce       	rjmp	.-736    	; 0x1462 <sd_raw_read+0x44>
    1742:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    1744:	29 96       	adiw	r28, 0x09	; 9
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	7f 90       	pop	r7
    176a:	6f 90       	pop	r6
    176c:	5f 90       	pop	r5
    176e:	4f 90       	pop	r4
    1770:	3f 90       	pop	r3
    1772:	2f 90       	pop	r2
    1774:	08 95       	ret

00001776 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    1776:	2f 92       	push	r2
    1778:	3f 92       	push	r3
    177a:	4f 92       	push	r4
    177c:	5f 92       	push	r5
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	60 97       	sbiw	r28, 0x10	; 16
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	52 2e       	mov	r5, r18
    17ac:	43 2e       	mov	r4, r19
    17ae:	4b 83       	std	Y+3, r20	; 0x03
    17b0:	5c 83       	std	Y+4, r21	; 0x04
    17b2:	6d 83       	std	Y+5, r22	; 0x05
    17b4:	7e 83       	std	Y+6, r23	; 0x06
    17b6:	8f 83       	std	Y+7, r24	; 0x07
    17b8:	98 87       	std	Y+8, r25	; 0x08
    17ba:	18 01       	movw	r2, r16
    17bc:	37 01       	movw	r6, r14
    17be:	9a 82       	std	Y+2, r9	; 0x02
    17c0:	89 82       	std	Y+1, r8	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    17c2:	01 15       	cp	r16, r1
    17c4:	11 05       	cpc	r17, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <sd_raw_read_interval+0x54>
    17c8:	88 c0       	rjmp	.+272    	; 0x18da <sd_raw_read_interval+0x164>
    17ca:	e1 14       	cp	r14, r1
    17cc:	f1 04       	cpc	r15, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <sd_raw_read_interval+0x5c>
    17d0:	84 c0       	rjmp	.+264    	; 0x18da <sd_raw_read_interval+0x164>
    17d2:	ce 14       	cp	r12, r14
    17d4:	df 04       	cpc	r13, r15
    17d6:	08 f4       	brcc	.+2      	; 0x17da <sd_raw_read_interval+0x64>
    17d8:	80 c0       	rjmp	.+256    	; 0x18da <sd_raw_read_interval+0x164>
    17da:	a1 14       	cp	r10, r1
    17dc:	b1 04       	cpc	r11, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <sd_raw_read_interval+0x6c>
    17e0:	7c c0       	rjmp	.+248    	; 0x18da <sd_raw_read_interval+0x164>
    17e2:	88 24       	eor	r8, r8
    17e4:	99 24       	eor	r9, r9
    17e6:	8e 18       	sub	r8, r14
    17e8:	9f 08       	sbc	r9, r15
    17ea:	ce 18       	sub	r12, r14
    17ec:	df 08       	sbc	r13, r15
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    17ee:	97 01       	movw	r18, r14
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	e9 86       	std	Y+9, r14	; 0x09
    17fe:	3a 87       	std	Y+10, r19	; 0x0a
    1800:	4b 87       	std	Y+11, r20	; 0x0b
    1802:	5c 87       	std	Y+12, r21	; 0x0c
    1804:	6d 87       	std	Y+13, r22	; 0x0d
    1806:	7e 87       	std	Y+14, r23	; 0x0e
    1808:	8f 87       	std	Y+15, r24	; 0x0f
    180a:	98 8b       	std	Y+16, r25	; 0x10
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    180c:	25 2d       	mov	r18, r5
    180e:	34 2d       	mov	r19, r4
    1810:	4b 81       	ldd	r20, Y+3	; 0x03
    1812:	5c 81       	ldd	r21, Y+4	; 0x04
    1814:	6d 81       	ldd	r22, Y+5	; 0x05
    1816:	7e 81       	ldd	r23, Y+6	; 0x06
    1818:	8f 81       	ldd	r24, Y+7	; 0x07
    181a:	98 85       	ldd	r25, Y+8	; 0x08
    181c:	81 01       	movw	r16, r2
    181e:	73 01       	movw	r14, r6
    1820:	0e 94 0f 0a 	call	0x141e	; 0x141e <sd_raw_read>
    1824:	88 23       	and	r24, r24
    1826:	09 f4       	brne	.+2      	; 0x182a <sd_raw_read_interval+0xb4>
    1828:	58 c0       	rjmp	.+176    	; 0x18da <sd_raw_read_interval+0x164>
            return 0;
        if(!callback(buffer, offset, p))
    182a:	c1 01       	movw	r24, r2
    182c:	05 2d       	mov	r16, r5
    182e:	14 2d       	mov	r17, r4
    1830:	2b 81       	ldd	r18, Y+3	; 0x03
    1832:	3c 81       	ldd	r19, Y+4	; 0x04
    1834:	4d 81       	ldd	r20, Y+5	; 0x05
    1836:	5e 81       	ldd	r21, Y+6	; 0x06
    1838:	6f 81       	ldd	r22, Y+7	; 0x07
    183a:	78 85       	ldd	r23, Y+8	; 0x08
    183c:	e9 80       	ldd	r14, Y+1	; 0x01
    183e:	fa 80       	ldd	r15, Y+2	; 0x02
    1840:	f5 01       	movw	r30, r10
    1842:	09 95       	icall
    1844:	88 23       	and	r24, r24
    1846:	09 f4       	brne	.+2      	; 0x184a <sd_raw_read_interval+0xd4>
    1848:	4a c0       	rjmp	.+148    	; 0x18de <sd_raw_read_interval+0x168>
            break;
    184a:	c8 0c       	add	r12, r8
    184c:	d9 1c       	adc	r13, r9
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    184e:	c6 01       	movw	r24, r12
    1850:	86 0d       	add	r24, r6
    1852:	97 1d       	adc	r25, r7
    1854:	86 15       	cp	r24, r6
    1856:	97 05       	cpc	r25, r7
    1858:	08 f4       	brcc	.+2      	; 0x185c <sd_raw_read_interval+0xe6>
    185a:	41 c0       	rjmp	.+130    	; 0x18de <sd_raw_read_interval+0x168>
    185c:	39 85       	ldd	r19, Y+9	; 0x09
    185e:	35 0d       	add	r19, r5
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	35 15       	cp	r19, r5
    1864:	08 f0       	brcs	.+2      	; 0x1868 <sd_raw_read_interval+0xf2>
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	8a 85       	ldd	r24, Y+10	; 0x0a
    186a:	84 0d       	add	r24, r4
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	84 15       	cp	r24, r4
    1870:	08 f0       	brcs	.+2      	; 0x1874 <sd_raw_read_interval+0xfe>
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	19 2f       	mov	r17, r25
    1876:	18 0f       	add	r17, r24
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	18 17       	cp	r17, r24
    187c:	08 f0       	brcs	.+2      	; 0x1880 <sd_raw_read_interval+0x10a>
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	92 2b       	or	r25, r18
    1882:	4b 81       	ldd	r20, Y+3	; 0x03
    1884:	94 0f       	add	r25, r20
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	94 17       	cp	r25, r20
    188a:	08 f0       	brcs	.+2      	; 0x188e <sd_raw_read_interval+0x118>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	6c 81       	ldd	r22, Y+4	; 0x04
    1890:	68 0f       	add	r22, r24
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	5c 81       	ldd	r21, Y+4	; 0x04
    1896:	65 17       	cp	r22, r21
    1898:	08 f0       	brcs	.+2      	; 0x189c <sd_raw_read_interval+0x126>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	5d 81       	ldd	r21, Y+5	; 0x05
    189e:	58 0f       	add	r21, r24
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	7d 81       	ldd	r23, Y+5	; 0x05
    18a4:	57 17       	cp	r21, r23
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <sd_raw_read_interval+0x134>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	4e 81       	ldd	r20, Y+6	; 0x06
    18ac:	48 0f       	add	r20, r24
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	2e 81       	ldd	r18, Y+6	; 0x06
    18b2:	42 17       	cp	r20, r18
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <sd_raw_read_interval+0x142>
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	7f 81       	ldd	r23, Y+7	; 0x07
    18ba:	87 0f       	add	r24, r23
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	87 17       	cp	r24, r23
    18c0:	08 f0       	brcs	.+2      	; 0x18c4 <sd_raw_read_interval+0x14e>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	53 2e       	mov	r5, r19
    18c6:	41 2e       	mov	r4, r17
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	6c 83       	std	Y+4, r22	; 0x04
    18cc:	5d 83       	std	Y+5, r21	; 0x05
    18ce:	4e 83       	std	Y+6, r20	; 0x06
    18d0:	8f 83       	std	Y+7, r24	; 0x07
    18d2:	88 85       	ldd	r24, Y+8	; 0x08
    18d4:	82 0f       	add	r24, r18
    18d6:	88 87       	std	Y+8, r24	; 0x08
    18d8:	99 cf       	rjmp	.-206    	; 0x180c <sd_raw_read_interval+0x96>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <sd_raw_read_interval+0x16a>
    18de:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    18e0:	60 96       	adiw	r28, 0x10	; 16
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	9f 90       	pop	r9
    1902:	8f 90       	pop	r8
    1904:	7f 90       	pop	r7
    1906:	6f 90       	pop	r6
    1908:	5f 90       	pop	r5
    190a:	4f 90       	pop	r4
    190c:	3f 90       	pop	r3
    190e:	2f 90       	pop	r2
    1910:	08 95       	ret

00001912 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    1912:	8f 92       	push	r8
    1914:	9f 92       	push	r9
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    1928:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    192a:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    192c:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    192e:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1<<DDB4);
    1930:	2c 9a       	sbi	0x05, 4	; 5

    unselect_card();
    1932:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    1934:	83 e5       	ldi	r24, 0x53	; 83
    1936:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    1938:	8d b5       	in	r24, 0x2d	; 45
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    193e:	10 92 cc 03 	sts	0x03CC, r1
    1942:	90 e0       	ldi	r25, 0x00	; 0
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1944:	2f ef       	ldi	r18, 0xFF	; 255
    1946:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    1948:	0d b4       	in	r0, 0x2d	; 45
    194a:	07 fe       	sbrs	r0, 7
    194c:	fd cf       	rjmp	.-6      	; 0x1948 <sd_raw_init+0x36>
    SPSR &= ~(1 << SPIF);
    194e:	8d b5       	in	r24, 0x2d	; 45
    1950:	8f 77       	andi	r24, 0x7F	; 127
    1952:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1954:	8e b5       	in	r24, 0x2e	; 46
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    1956:	9f 5f       	subi	r25, 0xFF	; 255
    1958:	9a 30       	cpi	r25, 0x0A	; 10
    195a:	a9 f7       	brne	.-22     	; 0x1946 <sd_raw_init+0x34>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    195c:	2a 98       	cbi	0x05, 2	; 5
    195e:	00 e0       	ldi	r16, 0x00	; 0
    1960:	10 e0       	ldi	r17, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
    1970:	f8 2e       	mov	r15, r24
		//uart_putw_hex(response);
		//uart_puts("\r\n");
        if(response == (1 << R1_IDLE_STATE))
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	f8 16       	cp	r15, r24
    1976:	41 f0       	breq	.+16     	; 0x1988 <sd_raw_init+0x76>
            break;

        if(i == 0x1ff)
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	0f 3f       	cpi	r16, 0xFF	; 255
    197c:	18 07       	cpc	r17, r24
    197e:	09 f4       	brne	.+2      	; 0x1982 <sd_raw_init+0x70>
    1980:	c3 c0       	rjmp	.+390    	; 0x1b08 <sd_raw_init+0x1f6>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    1982:	0f 5f       	subi	r16, 0xFF	; 255
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	ed cf       	rjmp	.-38     	; 0x1962 <sd_raw_init+0x50>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    1988:	88 e0       	ldi	r24, 0x08	; 8
    198a:	4a ea       	ldi	r20, 0xAA	; 170
    198c:	51 e0       	ldi	r21, 0x01	; 1
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    1996:	82 fd       	sbrc	r24, 2
    1998:	2d c0       	rjmp	.+90     	; 0x19f4 <sd_raw_init+0xe2>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    199a:	8f ef       	ldi	r24, 0xFF	; 255
    199c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    199e:	0d b4       	in	r0, 0x2d	; 45
    19a0:	07 fe       	sbrs	r0, 7
    19a2:	fd cf       	rjmp	.-6      	; 0x199e <sd_raw_init+0x8c>
    SPSR &= ~(1 << SPIF);
    19a4:	8d b5       	in	r24, 0x2d	; 45
    19a6:	8f 77       	andi	r24, 0x7F	; 127
    19a8:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    19aa:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    19b0:	0d b4       	in	r0, 0x2d	; 45
    19b2:	07 fe       	sbrs	r0, 7
    19b4:	fd cf       	rjmp	.-6      	; 0x19b0 <sd_raw_init+0x9e>
    SPSR &= ~(1 << SPIF);
    19b6:	8d b5       	in	r24, 0x2d	; 45
    19b8:	8f 77       	andi	r24, 0x7F	; 127
    19ba:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    19bc:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    19c2:	0d b4       	in	r0, 0x2d	; 45
    19c4:	07 fe       	sbrs	r0, 7
    19c6:	fd cf       	rjmp	.-6      	; 0x19c2 <sd_raw_init+0xb0>
    SPSR &= ~(1 << SPIF);
    19c8:	8d b5       	in	r24, 0x2d	; 45
    19ca:	8f 77       	andi	r24, 0x7F	; 127
    19cc:	8d bd       	out	0x2d, r24	; 45
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
    19ce:	0e b4       	in	r0, 0x2e	; 46
    19d0:	00 fe       	sbrs	r0, 0
    19d2:	ca c0       	rjmp	.+404    	; 0x1b68 <sd_raw_init+0x256>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    19d8:	0d b4       	in	r0, 0x2d	; 45
    19da:	07 fe       	sbrs	r0, 7
    19dc:	fd cf       	rjmp	.-6      	; 0x19d8 <sd_raw_init+0xc6>
    SPSR &= ~(1 << SPIF);
    19de:	8d b5       	in	r24, 0x2d	; 45
    19e0:	8f 77       	andi	r24, 0x7F	; 127
    19e2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    19e4:	8e b5       	in	r24, 0x2e	; 46
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    19e6:	8a 3a       	cpi	r24, 0xAA	; 170
    19e8:	09 f0       	breq	.+2      	; 0x19ec <sd_raw_init+0xda>
    19ea:	be c0       	rjmp	.+380    	; 0x1b68 <sd_raw_init+0x256>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	80 93 cc 03 	sts	0x03CC, r24
    19f2:	12 c0       	rjmp	.+36     	; 0x1a18 <sd_raw_init+0x106>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    19f4:	87 e3       	ldi	r24, 0x37	; 55
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    1a02:	89 e2       	ldi	r24, 0x29	; 41
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    1a10:	82 fd       	sbrc	r24, 2
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <sd_raw_init+0x106>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    1a14:	f0 92 cc 03 	sts	0x03CC, r15
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    1a18:	b0 90 cc 03 	lds	r11, 0x03CC
    1a1c:	8b 2d       	mov	r24, r11
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	03 e0       	ldi	r16, 0x03	; 3
    1a22:	80 2e       	mov	r8, r16
    1a24:	91 2c       	mov	r9, r1
    1a26:	88 22       	and	r8, r24
    1a28:	99 22       	and	r9, r25
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    1a2a:	12 e0       	ldi	r17, 0x02	; 2
    1a2c:	c1 2e       	mov	r12, r17
    1a2e:	d1 2c       	mov	r13, r1
    1a30:	c8 22       	and	r12, r24
    1a32:	d9 22       	and	r13, r25
    1a34:	c0 e0       	ldi	r28, 0x00	; 0
    1a36:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    1a38:	81 14       	cp	r8, r1
    1a3a:	91 04       	cpc	r9, r1
    1a3c:	b9 f0       	breq	.+46     	; 0x1a6c <sd_raw_init+0x15a>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    1a3e:	c1 14       	cp	r12, r1
    1a40:	d1 04       	cpc	r13, r1
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <sd_raw_init+0x13e>
    1a44:	e1 2c       	mov	r14, r1
    1a46:	f1 2c       	mov	r15, r1
    1a48:	01 2d       	mov	r16, r1
    1a4a:	b0 e4       	ldi	r27, 0x40	; 64
    1a4c:	1b 2f       	mov	r17, r27
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <sd_raw_init+0x144>
    1a50:	ee 24       	eor	r14, r14
    1a52:	ff 24       	eor	r15, r15
    1a54:	87 01       	movw	r16, r14
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    1a56:	87 e3       	ldi	r24, 0x37	; 55
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	60 e0       	ldi	r22, 0x00	; 0
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    1a64:	89 e2       	ldi	r24, 0x29	; 41
    1a66:	b8 01       	movw	r22, r16
    1a68:	a7 01       	movw	r20, r14
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <sd_raw_init+0x164>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    1a7a:	80 ff       	sbrs	r24, 0
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <sd_raw_init+0x17a>
            break;

        if(i == 0x7fff)
    1a7e:	8f e7       	ldi	r24, 0x7F	; 127
    1a80:	cf 3f       	cpi	r28, 0xFF	; 255
    1a82:	d8 07       	cpc	r29, r24
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <sd_raw_init+0x176>
    1a86:	40 c0       	rjmp	.+128    	; 0x1b08 <sd_raw_init+0x1f6>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    1a88:	21 96       	adiw	r28, 0x01	; 1
    1a8a:	d6 cf       	rjmp	.-84     	; 0x1a38 <sd_raw_init+0x126>
            return 0;
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    1a8c:	cd 28       	or	r12, r13
    1a8e:	99 f1       	breq	.+102    	; 0x1af6 <sd_raw_init+0x1e4>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    1a90:	8a e3       	ldi	r24, 0x3A	; 58
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
    1a9e:	88 23       	and	r24, r24
    1aa0:	99 f5       	brne	.+102    	; 0x1b08 <sd_raw_init+0x1f6>
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1aa6:	0d b4       	in	r0, 0x2d	; 45
    1aa8:	07 fe       	sbrs	r0, 7
    1aaa:	fd cf       	rjmp	.-6      	; 0x1aa6 <sd_raw_init+0x194>
    SPSR &= ~(1 << SPIF);
    1aac:	8d b5       	in	r24, 0x2d	; 45
    1aae:	8f 77       	andi	r24, 0x7F	; 127
    1ab0:	8d bd       	out	0x2d, r24	; 45
        {
            unselect_card();
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
    1ab2:	0e b4       	in	r0, 0x2e	; 46
    1ab4:	06 fe       	sbrs	r0, 6
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <sd_raw_init+0x1ae>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	b8 2a       	or	r11, r24
    1abc:	b0 92 cc 03 	sts	0x03CC, r11
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1ac4:	0d b4       	in	r0, 0x2d	; 45
    1ac6:	07 fe       	sbrs	r0, 7
    1ac8:	fd cf       	rjmp	.-6      	; 0x1ac4 <sd_raw_init+0x1b2>
    SPSR &= ~(1 << SPIF);
    1aca:	8d b5       	in	r24, 0x2d	; 45
    1acc:	8f 77       	andi	r24, 0x7F	; 127
    1ace:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1ad0:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1ad6:	0d b4       	in	r0, 0x2d	; 45
    1ad8:	07 fe       	sbrs	r0, 7
    1ada:	fd cf       	rjmp	.-6      	; 0x1ad6 <sd_raw_init+0x1c4>
    SPSR &= ~(1 << SPIF);
    1adc:	8d b5       	in	r24, 0x2d	; 45
    1ade:	8f 77       	andi	r24, 0x7F	; 127
    1ae0:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1ae2:	8e b5       	in	r24, 0x2e	; 46
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    1ae8:	0d b4       	in	r0, 0x2d	; 45
    1aea:	07 fe       	sbrs	r0, 7
    1aec:	fd cf       	rjmp	.-6      	; 0x1ae8 <sd_raw_init+0x1d6>
    SPSR &= ~(1 << SPIF);
    1aee:	8d b5       	in	r24, 0x2d	; 45
    1af0:	8f 77       	andi	r24, 0x7F	; 127
    1af2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    1af4:	8e b5       	in	r24, 0x2e	; 46
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    1af6:	80 e1       	ldi	r24, 0x10	; 16
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	52 e0       	ldi	r21, 0x02	; 2
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 5e 06 	call	0xcbc	; 0xcbc <sd_raw_send_command>
    1b04:	88 23       	and	r24, r24
    1b06:	11 f0       	breq	.+4      	; 0x1b0c <sd_raw_init+0x1fa>
    {
        unselect_card();
    1b08:	2a 9a       	sbi	0x05, 2	; 5
    1b0a:	2e c0       	rjmp	.+92     	; 0x1b68 <sd_raw_init+0x256>
		//uart_puts_p(PSTR("Failed at 'set block size'\n"));
        return 0;
    }

    /* deaddress card */
    unselect_card();
    1b0c:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    1b0e:	8c b5       	in	r24, 0x2c	; 44
    1b10:	8c 7f       	andi	r24, 0xFC	; 252
    1b12:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    1b14:	8d b5       	in	r24, 0x2d	; 45
    1b16:	81 60       	ori	r24, 0x01	; 1
    1b18:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	80 93 c3 03 	sts	0x03C3, r24
    1b20:	80 93 c4 03 	sts	0x03C4, r24
    1b24:	80 93 c5 03 	sts	0x03C5, r24
    1b28:	80 93 c6 03 	sts	0x03C6, r24
    1b2c:	80 93 c7 03 	sts	0x03C7, r24
    1b30:	80 93 c8 03 	sts	0x03C8, r24
    1b34:	80 93 c9 03 	sts	0x03C9, r24
    1b38:	80 93 ca 03 	sts	0x03CA, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	80 93 cb 03 	sts	0x03CB, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block))){
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	03 ec       	ldi	r16, 0xC3	; 195
    1b54:	11 e0       	ldi	r17, 0x01	; 1
    1b56:	e1 2c       	mov	r14, r1
    1b58:	a2 e0       	ldi	r26, 0x02	; 2
    1b5a:	fa 2e       	mov	r15, r26
    1b5c:	0e 94 0f 0a 	call	0x141e	; 0x141e <sd_raw_read>
    1b60:	88 23       	and	r24, r24
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <sd_raw_init+0x258>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <sd_raw_init+0x258>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
			return 0;
		}
#endif

    return 1;
}
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	9f 90       	pop	r9
    1b7e:	8f 90       	pop	r8
    1b80:	08 95       	ret

00001b82 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    1b82:	2f 92       	push	r2
    1b84:	3f 92       	push	r3
    1b86:	4f 92       	push	r4
    1b88:	5f 92       	push	r5
    1b8a:	6f 92       	push	r6
    1b8c:	7f 92       	push	r7
    1b8e:	8f 92       	push	r8
    1b90:	9f 92       	push	r9
    1b92:	af 92       	push	r10
    1b94:	bf 92       	push	r11
    1b96:	cf 92       	push	r12
    1b98:	df 92       	push	r13
    1b9a:	ef 92       	push	r14
    1b9c:	ff 92       	push	r15
    1b9e:	0f 93       	push	r16
    1ba0:	1f 93       	push	r17
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	28 97       	sbiw	r28, 0x08	; 8
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	92 2e       	mov	r9, r18
    1bb8:	83 2e       	mov	r8, r19
    1bba:	54 2e       	mov	r5, r20
    1bbc:	45 2e       	mov	r4, r21
    1bbe:	36 2e       	mov	r3, r22
    1bc0:	27 2e       	mov	r2, r23
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	38 01       	movw	r6, r16
    1bc8:	f8 86       	std	Y+8, r15	; 0x08
    1bca:	ef 82       	std	Y+7, r14	; 0x07
    1bcc:	da 82       	std	Y+2, r13	; 0x02
    1bce:	c9 82       	std	Y+1, r12	; 0x01
    1bd0:	bc 82       	std	Y+4, r11	; 0x04
    1bd2:	ab 82       	std	Y+3, r10	; 0x03
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    1bd4:	01 15       	cp	r16, r1
    1bd6:	11 05       	cpc	r17, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <sd_raw_write_interval+0x5a>
    1bda:	7e c0       	rjmp	.+252    	; 0x1cd8 <sd_raw_write_interval+0x156>
    1bdc:	cd 28       	or	r12, r13
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <sd_raw_write_interval+0x60>
    1be0:	7b c0       	rjmp	.+246    	; 0x1cd8 <sd_raw_write_interval+0x156>
        return 0;

    uint8_t endless = (length == 0);
    1be2:	bb 24       	eor	r11, r11
    1be4:	ef 28       	or	r14, r15
    1be6:	09 f0       	breq	.+2      	; 0x1bea <sd_raw_write_interval+0x68>
    1be8:	6e c0       	rjmp	.+220    	; 0x1cc6 <sd_raw_write_interval+0x144>
    1bea:	bb 24       	eor	r11, r11
    1bec:	b3 94       	inc	r11
    1bee:	6b c0       	rjmp	.+214    	; 0x1cc6 <sd_raw_write_interval+0x144>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    1bf0:	c3 01       	movw	r24, r6
    1bf2:	09 2d       	mov	r16, r9
    1bf4:	18 2d       	mov	r17, r8
    1bf6:	25 2d       	mov	r18, r5
    1bf8:	34 2d       	mov	r19, r4
    1bfa:	43 2d       	mov	r20, r3
    1bfc:	52 2d       	mov	r21, r2
    1bfe:	6d 81       	ldd	r22, Y+5	; 0x05
    1c00:	7e 81       	ldd	r23, Y+6	; 0x06
    1c02:	eb 80       	ldd	r14, Y+3	; 0x03
    1c04:	fc 80       	ldd	r15, Y+4	; 0x04
    1c06:	a9 81       	ldd	r26, Y+1	; 0x01
    1c08:	ba 81       	ldd	r27, Y+2	; 0x02
    1c0a:	fd 01       	movw	r30, r26
    1c0c:	09 95       	icall
    1c0e:	6c 01       	movw	r12, r24
        if(!bytes_to_write)
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <sd_raw_write_interval+0x94>
    1c14:	63 c0       	rjmp	.+198    	; 0x1cdc <sd_raw_write_interval+0x15a>
            break;
        if(!endless && bytes_to_write > length)
    1c16:	bb 20       	and	r11, r11
    1c18:	31 f4       	brne	.+12     	; 0x1c26 <sd_raw_write_interval+0xa4>
    1c1a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c1c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c1e:	e8 17       	cp	r30, r24
    1c20:	f9 07       	cpc	r31, r25
    1c22:	08 f4       	brcc	.+2      	; 0x1c26 <sd_raw_write_interval+0xa4>
    1c24:	59 c0       	rjmp	.+178    	; 0x1cd8 <sd_raw_write_interval+0x156>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    1c26:	29 2d       	mov	r18, r9
    1c28:	38 2d       	mov	r19, r8
    1c2a:	45 2d       	mov	r20, r5
    1c2c:	54 2d       	mov	r21, r4
    1c2e:	63 2d       	mov	r22, r3
    1c30:	72 2d       	mov	r23, r2
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	83 01       	movw	r16, r6
    1c38:	76 01       	movw	r14, r12
    1c3a:	0e 94 10 08 	call	0x1020	; 0x1020 <sd_raw_write>
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <sd_raw_write_interval+0xc2>
    1c42:	4a c0       	rjmp	.+148    	; 0x1cd8 <sd_raw_write_interval+0x156>
            return 0;

        offset += bytes_to_write;
    1c44:	96 01       	movw	r18, r12
    1c46:	f9 2d       	mov	r31, r9
    1c48:	fc 0d       	add	r31, r12
    1c4a:	e1 e0       	ldi	r30, 0x01	; 1
    1c4c:	f9 15       	cp	r31, r9
    1c4e:	08 f0       	brcs	.+2      	; 0x1c52 <sd_raw_write_interval+0xd0>
    1c50:	e0 e0       	ldi	r30, 0x00	; 0
    1c52:	88 2d       	mov	r24, r8
    1c54:	83 0f       	add	r24, r19
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	88 15       	cp	r24, r8
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <sd_raw_write_interval+0xdc>
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	1e 2f       	mov	r17, r30
    1c60:	18 0f       	add	r17, r24
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	18 17       	cp	r17, r24
    1c66:	08 f0       	brcs	.+2      	; 0x1c6a <sd_raw_write_interval+0xe8>
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	92 2b       	or	r25, r18
    1c6c:	95 0d       	add	r25, r5
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	95 15       	cp	r25, r5
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <sd_raw_write_interval+0xf4>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	68 2f       	mov	r22, r24
    1c78:	64 0d       	add	r22, r4
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	64 15       	cp	r22, r4
    1c7e:	08 f0       	brcs	.+2      	; 0x1c82 <sd_raw_write_interval+0x100>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	58 2f       	mov	r21, r24
    1c84:	53 0d       	add	r21, r3
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	53 15       	cp	r21, r3
    1c8a:	08 f0       	brcs	.+2      	; 0x1c8e <sd_raw_write_interval+0x10c>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	48 2f       	mov	r20, r24
    1c90:	42 0d       	add	r20, r2
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	42 15       	cp	r20, r2
    1c96:	08 f0       	brcs	.+2      	; 0x1c9a <sd_raw_write_interval+0x118>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c9c:	82 0f       	add	r24, r18
    1c9e:	21 e0       	ldi	r18, 0x01	; 1
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	83 17       	cp	r24, r19
    1ca4:	08 f0       	brcs	.+2      	; 0x1ca8 <sd_raw_write_interval+0x126>
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	9f 2e       	mov	r9, r31
    1caa:	81 2e       	mov	r8, r17
    1cac:	59 2e       	mov	r5, r25
    1cae:	46 2e       	mov	r4, r22
    1cb0:	1a 01       	movw	r2, r20
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb6:	82 0f       	add	r24, r18
    1cb8:	8e 83       	std	Y+6, r24	; 0x06
        length -= bytes_to_write;
    1cba:	af 81       	ldd	r26, Y+7	; 0x07
    1cbc:	b8 85       	ldd	r27, Y+8	; 0x08
    1cbe:	ac 19       	sub	r26, r12
    1cc0:	bd 09       	sbc	r27, r13
    1cc2:	b8 87       	std	Y+8, r27	; 0x08
    1cc4:	af 83       	std	Y+7, r26	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    1cc6:	bb 20       	and	r11, r11
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <sd_raw_write_interval+0x14a>
    1cca:	92 cf       	rjmp	.-220    	; 0x1bf0 <sd_raw_write_interval+0x6e>
    1ccc:	ef 81       	ldd	r30, Y+7	; 0x07
    1cce:	f8 85       	ldd	r31, Y+8	; 0x08
    1cd0:	ef 2b       	or	r30, r31
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <sd_raw_write_interval+0x154>
    1cd4:	8d cf       	rjmp	.-230    	; 0x1bf0 <sd_raw_write_interval+0x6e>
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <sd_raw_write_interval+0x15a>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <sd_raw_write_interval+0x15c>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    1cde:	28 96       	adiw	r28, 0x08	; 8
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	9f 90       	pop	r9
    1d00:	8f 90       	pop	r8
    1d02:	7f 90       	pop	r7
    1d04:	6f 90       	pop	r6
    1d06:	5f 90       	pop	r5
    1d08:	4f 90       	pop	r4
    1d0a:	3f 90       	pop	r3
    1d0c:	2f 90       	pop	r2
    1d0e:	08 95       	ret

00001d10 <fat_close>:
 *
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    1d10:	fc 01       	movw	r30, r24
    if(!fs)
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	11 f0       	breq	.+4      	; 0x1d1a <fat_close+0xa>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    1d16:	11 82       	std	Z+1, r1	; 0x01
    1d18:	10 82       	st	Z, r1
    1d1a:	08 95       	ret

00001d1c <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1d1c:	7f 92       	push	r7
    1d1e:	8f 92       	push	r8
    1d20:	9f 92       	push	r9
    1d22:	af 92       	push	r10
    1d24:	bf 92       	push	r11
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <fat_get_next_cluster+0x1c>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <fat_get_next_cluster+0x1e>
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <fat_get_next_cluster+0x20>
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <fat_get_next_cluster+0x2c>
    1d46:	41 c1       	rjmp	.+642    	; 0x1fca <fat_get_next_cluster+0x2ae>
    1d48:	42 30       	cpi	r20, 0x02	; 2
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	61 05       	cpc	r22, r1
    1d4e:	71 05       	cpc	r23, r1
    1d50:	08 f4       	brcc	.+2      	; 0x1d54 <fat_get_next_cluster+0x38>
    1d52:	3b c1       	rjmp	.+630    	; 0x1fca <fat_get_next_cluster+0x2ae>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    1d54:	ed 91       	ld	r30, X+
    1d56:	fc 91       	ld	r31, X
    1d58:	11 97       	sbiw	r26, 0x01	; 1
    1d5a:	80 85       	ldd	r24, Z+8	; 0x08
    1d5c:	1a 96       	adiw	r26, 0x0a	; 10
    1d5e:	2c 91       	ld	r18, X
    1d60:	1a 97       	sbiw	r26, 0x0a	; 10
    1d62:	1b 96       	adiw	r26, 0x0b	; 11
    1d64:	1c 91       	ld	r17, X
    1d66:	1b 97       	sbiw	r26, 0x0b	; 11
    1d68:	1c 96       	adiw	r26, 0x0c	; 12
    1d6a:	cc 90       	ld	r12, X
    1d6c:	1c 97       	sbiw	r26, 0x0c	; 12
    1d6e:	1d 96       	adiw	r26, 0x0d	; 13
    1d70:	bc 90       	ld	r11, X
    1d72:	1d 97       	sbiw	r26, 0x0d	; 13
    1d74:	1e 96       	adiw	r26, 0x0e	; 14
    1d76:	fc 90       	ld	r15, X
    1d78:	1e 97       	sbiw	r26, 0x0e	; 14
    1d7a:	1f 96       	adiw	r26, 0x0f	; 15
    1d7c:	ec 90       	ld	r14, X
    1d7e:	1f 97       	sbiw	r26, 0x0f	; 15
    1d80:	50 96       	adiw	r26, 0x10	; 16
    1d82:	dc 90       	ld	r13, X
    1d84:	50 97       	sbiw	r26, 0x10	; 16
    1d86:	51 96       	adiw	r26, 0x11	; 17
    1d88:	7c 90       	ld	r7, X
    1d8a:	8b 30       	cpi	r24, 0x0B	; 11
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <fat_get_next_cluster+0x74>
    1d8e:	90 c0       	rjmp	.+288    	; 0x1eb0 <fat_get_next_cluster+0x194>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1d90:	b2 e0       	ldi	r27, 0x02	; 2
    1d92:	44 0f       	add	r20, r20
    1d94:	55 1f       	adc	r21, r21
    1d96:	66 1f       	adc	r22, r22
    1d98:	77 1f       	adc	r23, r23
    1d9a:	ba 95       	dec	r27
    1d9c:	d1 f7       	brne	.-12     	; 0x1d92 <fat_get_next_cluster+0x76>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e0       	ldi	r26, 0x00	; 0
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	82 2e       	mov	r8, r18
    1da8:	84 0e       	add	r8, r20
    1daa:	31 e0       	ldi	r19, 0x01	; 1
    1dac:	84 16       	cp	r8, r20
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <fat_get_next_cluster+0x96>
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	15 0f       	add	r17, r21
    1db4:	21 e0       	ldi	r18, 0x01	; 1
    1db6:	15 17       	cp	r17, r21
    1db8:	08 f0       	brcs	.+2      	; 0x1dbc <fat_get_next_cluster+0xa0>
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	93 2e       	mov	r9, r19
    1dbe:	91 0e       	add	r9, r17
    1dc0:	01 e0       	ldi	r16, 0x01	; 1
    1dc2:	91 16       	cp	r9, r17
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <fat_get_next_cluster+0xac>
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	20 2b       	or	r18, r16
    1dca:	1c 2d       	mov	r17, r12
    1dcc:	16 0f       	add	r17, r22
    1dce:	31 e0       	ldi	r19, 0x01	; 1
    1dd0:	16 17       	cp	r17, r22
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <fat_get_next_cluster+0xba>
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	a2 2e       	mov	r10, r18
    1dd8:	a1 0e       	add	r10, r17
    1dda:	01 e0       	ldi	r16, 0x01	; 1
    1ddc:	a1 16       	cp	r10, r17
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <fat_get_next_cluster+0xc6>
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	30 2b       	or	r19, r16
    1de4:	1b 2d       	mov	r17, r11
    1de6:	17 0f       	add	r17, r23
    1de8:	01 e0       	ldi	r16, 0x01	; 1
    1dea:	17 17       	cp	r17, r23
    1dec:	08 f0       	brcs	.+2      	; 0x1df0 <fat_get_next_cluster+0xd4>
    1dee:	00 e0       	ldi	r16, 0x00	; 0
    1df0:	b3 2e       	mov	r11, r19
    1df2:	b1 0e       	add	r11, r17
    1df4:	21 e0       	ldi	r18, 0x01	; 1
    1df6:	b1 16       	cp	r11, r17
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <fat_get_next_cluster+0xe0>
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	02 2b       	or	r16, r18
    1dfe:	11 e0       	ldi	r17, 0x01	; 1
    1e00:	f8 16       	cp	r15, r24
    1e02:	08 f0       	brcs	.+2      	; 0x1e06 <fat_get_next_cluster+0xea>
    1e04:	10 e0       	ldi	r17, 0x00	; 0
    1e06:	c0 2e       	mov	r12, r16
    1e08:	cf 0c       	add	r12, r15
    1e0a:	01 e0       	ldi	r16, 0x01	; 1
    1e0c:	cf 14       	cp	r12, r15
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <fat_get_next_cluster+0xf6>
    1e10:	00 e0       	ldi	r16, 0x00	; 0
    1e12:	10 2b       	or	r17, r16
    1e14:	01 e0       	ldi	r16, 0x01	; 1
    1e16:	e9 16       	cp	r14, r25
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <fat_get_next_cluster+0x100>
    1e1a:	00 e0       	ldi	r16, 0x00	; 0
    1e1c:	f1 2e       	mov	r15, r17
    1e1e:	fe 0c       	add	r15, r14
    1e20:	11 e0       	ldi	r17, 0x01	; 1
    1e22:	fe 14       	cp	r15, r14
    1e24:	08 f0       	brcs	.+2      	; 0x1e28 <fat_get_next_cluster+0x10c>
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	01 2b       	or	r16, r17
    1e2a:	11 e0       	ldi	r17, 0x01	; 1
    1e2c:	da 16       	cp	r13, r26
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <fat_get_next_cluster+0x116>
    1e30:	10 e0       	ldi	r17, 0x00	; 0
    1e32:	80 2f       	mov	r24, r16
    1e34:	8d 0d       	add	r24, r13
    1e36:	a1 e0       	ldi	r26, 0x01	; 1
    1e38:	8d 15       	cp	r24, r13
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <fat_get_next_cluster+0x122>
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	1a 2b       	or	r17, r26
    1e40:	01 90       	ld	r0, Z+
    1e42:	f0 81       	ld	r31, Z
    1e44:	e0 2d       	mov	r30, r0
    1e46:	94 01       	movw	r18, r8
    1e48:	a5 01       	movw	r20, r10
    1e4a:	6c 2d       	mov	r22, r12
    1e4c:	7f 2d       	mov	r23, r15
    1e4e:	91 2f       	mov	r25, r17
    1e50:	97 0d       	add	r25, r7
    1e52:	8e 01       	movw	r16, r28
    1e54:	0d 5f       	subi	r16, 0xFD	; 253
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	a4 e0       	ldi	r26, 0x04	; 4
    1e5a:	ea 2e       	mov	r14, r26
    1e5c:	f1 2c       	mov	r15, r1
    1e5e:	09 95       	icall
    1e60:	88 23       	and	r24, r24
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <fat_get_next_cluster+0x14a>
    1e64:	b2 c0       	rjmp	.+356    	; 0x1fca <fat_get_next_cluster+0x2ae>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	4d 81       	ldd	r20, Y+5	; 0x05
    1e6c:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    1e6e:	21 15       	cp	r18, r1
    1e70:	31 05       	cpc	r19, r1
    1e72:	41 05       	cpc	r20, r1
    1e74:	51 05       	cpc	r21, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <fat_get_next_cluster+0x15e>
    1e78:	ac c0       	rjmp	.+344    	; 0x1fd2 <fat_get_next_cluster+0x2b6>
    1e7a:	27 3f       	cpi	r18, 0xF7	; 247
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	38 07       	cpc	r19, r24
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	48 07       	cpc	r20, r24
    1e84:	8f e0       	ldi	r24, 0x0F	; 15
    1e86:	58 07       	cpc	r21, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <fat_get_next_cluster+0x170>
    1e8a:	9f c0       	rjmp	.+318    	; 0x1fca <fat_get_next_cluster+0x2ae>
    1e8c:	da 01       	movw	r26, r20
    1e8e:	c9 01       	movw	r24, r18
    1e90:	80 5f       	subi	r24, 0xF0	; 240
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	af 4f       	sbci	r26, 0xFF	; 255
    1e96:	bf 40       	sbci	r27, 0x0F	; 15
    1e98:	07 97       	sbiw	r24, 0x07	; 7
    1e9a:	a1 05       	cpc	r26, r1
    1e9c:	b1 05       	cpc	r27, r1
    1e9e:	08 f4       	brcc	.+2      	; 0x1ea2 <fat_get_next_cluster+0x186>
    1ea0:	94 c0       	rjmp	.+296    	; 0x1fca <fat_get_next_cluster+0x2ae>
    1ea2:	da 01       	movw	r26, r20
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	88 5f       	subi	r24, 0xF8	; 248
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	af 4f       	sbci	r26, 0xFF	; 255
    1eac:	bf 40       	sbci	r27, 0x0F	; 15
    1eae:	89 c0       	rjmp	.+274    	; 0x1fc2 <fat_get_next_cluster+0x2a6>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    1eb0:	44 0f       	add	r20, r20
    1eb2:	55 1f       	adc	r21, r21
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e0       	ldi	r26, 0x00	; 0
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	82 2e       	mov	r8, r18
    1ec2:	84 0e       	add	r8, r20
    1ec4:	31 e0       	ldi	r19, 0x01	; 1
    1ec6:	84 16       	cp	r8, r20
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <fat_get_next_cluster+0x1b0>
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	15 0f       	add	r17, r21
    1ece:	21 e0       	ldi	r18, 0x01	; 1
    1ed0:	15 17       	cp	r17, r21
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <fat_get_next_cluster+0x1ba>
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	93 2e       	mov	r9, r19
    1ed8:	91 0e       	add	r9, r17
    1eda:	01 e0       	ldi	r16, 0x01	; 1
    1edc:	91 16       	cp	r9, r17
    1ede:	08 f0       	brcs	.+2      	; 0x1ee2 <fat_get_next_cluster+0x1c6>
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	20 2b       	or	r18, r16
    1ee4:	1c 2d       	mov	r17, r12
    1ee6:	16 0f       	add	r17, r22
    1ee8:	31 e0       	ldi	r19, 0x01	; 1
    1eea:	16 17       	cp	r17, r22
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <fat_get_next_cluster+0x1d4>
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	a2 2e       	mov	r10, r18
    1ef2:	a1 0e       	add	r10, r17
    1ef4:	01 e0       	ldi	r16, 0x01	; 1
    1ef6:	a1 16       	cp	r10, r17
    1ef8:	08 f0       	brcs	.+2      	; 0x1efc <fat_get_next_cluster+0x1e0>
    1efa:	00 e0       	ldi	r16, 0x00	; 0
    1efc:	30 2b       	or	r19, r16
    1efe:	1b 2d       	mov	r17, r11
    1f00:	17 0f       	add	r17, r23
    1f02:	01 e0       	ldi	r16, 0x01	; 1
    1f04:	17 17       	cp	r17, r23
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <fat_get_next_cluster+0x1ee>
    1f08:	00 e0       	ldi	r16, 0x00	; 0
    1f0a:	b3 2e       	mov	r11, r19
    1f0c:	b1 0e       	add	r11, r17
    1f0e:	21 e0       	ldi	r18, 0x01	; 1
    1f10:	b1 16       	cp	r11, r17
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <fat_get_next_cluster+0x1fa>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	02 2b       	or	r16, r18
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	f8 16       	cp	r15, r24
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <fat_get_next_cluster+0x204>
    1f1e:	10 e0       	ldi	r17, 0x00	; 0
    1f20:	c0 2e       	mov	r12, r16
    1f22:	cf 0c       	add	r12, r15
    1f24:	01 e0       	ldi	r16, 0x01	; 1
    1f26:	cf 14       	cp	r12, r15
    1f28:	08 f0       	brcs	.+2      	; 0x1f2c <fat_get_next_cluster+0x210>
    1f2a:	00 e0       	ldi	r16, 0x00	; 0
    1f2c:	10 2b       	or	r17, r16
    1f2e:	01 e0       	ldi	r16, 0x01	; 1
    1f30:	e9 16       	cp	r14, r25
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <fat_get_next_cluster+0x21a>
    1f34:	00 e0       	ldi	r16, 0x00	; 0
    1f36:	f1 2e       	mov	r15, r17
    1f38:	fe 0c       	add	r15, r14
    1f3a:	11 e0       	ldi	r17, 0x01	; 1
    1f3c:	fe 14       	cp	r15, r14
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <fat_get_next_cluster+0x226>
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	01 2b       	or	r16, r17
    1f44:	11 e0       	ldi	r17, 0x01	; 1
    1f46:	da 16       	cp	r13, r26
    1f48:	08 f0       	brcs	.+2      	; 0x1f4c <fat_get_next_cluster+0x230>
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
    1f4c:	80 2f       	mov	r24, r16
    1f4e:	8d 0d       	add	r24, r13
    1f50:	a1 e0       	ldi	r26, 0x01	; 1
    1f52:	8d 15       	cp	r24, r13
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <fat_get_next_cluster+0x23c>
    1f56:	a0 e0       	ldi	r26, 0x00	; 0
    1f58:	1a 2b       	or	r17, r26
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	f0 81       	ld	r31, Z
    1f5e:	e0 2d       	mov	r30, r0
    1f60:	94 01       	movw	r18, r8
    1f62:	a5 01       	movw	r20, r10
    1f64:	6c 2d       	mov	r22, r12
    1f66:	7f 2d       	mov	r23, r15
    1f68:	91 2f       	mov	r25, r17
    1f6a:	97 0d       	add	r25, r7
    1f6c:	8e 01       	movw	r16, r28
    1f6e:	0f 5f       	subi	r16, 0xFF	; 255
    1f70:	1f 4f       	sbci	r17, 0xFF	; 255
    1f72:	a2 e0       	ldi	r26, 0x02	; 2
    1f74:	ea 2e       	mov	r14, r26
    1f76:	f1 2c       	mov	r15, r1
    1f78:	09 95       	icall
    1f7a:	88 23       	and	r24, r24
    1f7c:	31 f1       	breq	.+76     	; 0x1fca <fat_get_next_cluster+0x2ae>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	9c 01       	movw	r18, r24
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    1f88:	21 15       	cp	r18, r1
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	41 05       	cpc	r20, r1
    1f8e:	51 05       	cpc	r21, r1
    1f90:	01 f1       	breq	.+64     	; 0x1fd2 <fat_get_next_cluster+0x2b6>
    1f92:	27 3f       	cpi	r18, 0xF7	; 247
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	38 07       	cpc	r19, r24
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	48 07       	cpc	r20, r24
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	58 07       	cpc	r21, r24
    1fa0:	a1 f0       	breq	.+40     	; 0x1fca <fat_get_next_cluster+0x2ae>
    1fa2:	da 01       	movw	r26, r20
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	80 5f       	subi	r24, 0xF0	; 240
    1fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    1faa:	a0 40       	sbci	r26, 0x00	; 0
    1fac:	b0 40       	sbci	r27, 0x00	; 0
    1fae:	07 97       	sbiw	r24, 0x07	; 7
    1fb0:	a1 05       	cpc	r26, r1
    1fb2:	b1 05       	cpc	r27, r1
    1fb4:	50 f0       	brcs	.+20     	; 0x1fca <fat_get_next_cluster+0x2ae>
    1fb6:	da 01       	movw	r26, r20
    1fb8:	c9 01       	movw	r24, r18
    1fba:	88 5f       	subi	r24, 0xF8	; 248
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	a0 40       	sbci	r26, 0x00	; 0
    1fc0:	b0 40       	sbci	r27, 0x00	; 0
    1fc2:	08 97       	sbiw	r24, 0x08	; 8
    1fc4:	a1 05       	cpc	r26, r1
    1fc6:	b1 05       	cpc	r27, r1
    1fc8:	20 f4       	brcc	.+8      	; 0x1fd2 <fat_get_next_cluster+0x2b6>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	ca 01       	movw	r24, r20
    1fd6:	26 96       	adiw	r28, 0x06	; 6
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	8f 90       	pop	r8
    1ffa:	7f 90       	pop	r7
    1ffc:	08 95       	ret

00001ffe <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1ffe:	2f 92       	push	r2
    2000:	3f 92       	push	r3
    2002:	4f 92       	push	r4
    2004:	5f 92       	push	r5
    2006:	6f 92       	push	r6
    2008:	7f 92       	push	r7
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	60 97       	sbiw	r28, 0x10	; 16
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	4c 01       	movw	r8, r24
    if(!fs || cluster_num < 2)
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	09 f4       	brne	.+2      	; 0x203a <fat_free_clusters+0x3c>
    2038:	82 c1       	rjmp	.+772    	; 0x233e <fat_free_clusters+0x340>
    203a:	42 30       	cpi	r20, 0x02	; 2
    203c:	51 05       	cpc	r21, r1
    203e:	61 05       	cpc	r22, r1
    2040:	71 05       	cpc	r23, r1
    2042:	08 f4       	brcc	.+2      	; 0x2046 <fat_free_clusters+0x48>
    2044:	7c c1       	rjmp	.+760    	; 0x233e <fat_free_clusters+0x340>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    2046:	dc 01       	movw	r26, r24
    2048:	1a 96       	adiw	r26, 0x0a	; 10
    204a:	bc 91       	ld	r27, X
    204c:	b8 87       	std	Y+8, r27	; 0x08
    204e:	fc 01       	movw	r30, r24
    2050:	f3 85       	ldd	r31, Z+11	; 0x0b
    2052:	f9 87       	std	Y+9, r31	; 0x09
    2054:	dc 01       	movw	r26, r24
    2056:	1c 96       	adiw	r26, 0x0c	; 12
    2058:	bc 91       	ld	r27, X
    205a:	ba 87       	std	Y+10, r27	; 0x0a
    205c:	fc 01       	movw	r30, r24
    205e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2060:	fb 87       	std	Y+11, r31	; 0x0b
    2062:	dc 01       	movw	r26, r24
    2064:	1e 96       	adiw	r26, 0x0e	; 14
    2066:	bc 91       	ld	r27, X
    2068:	bc 87       	std	Y+12, r27	; 0x0c
    206a:	fc 01       	movw	r30, r24
    206c:	f7 85       	ldd	r31, Z+15	; 0x0f
    206e:	fd 87       	std	Y+13, r31	; 0x0d
    2070:	dc 01       	movw	r26, r24
    2072:	50 96       	adiw	r26, 0x10	; 16
    2074:	bc 91       	ld	r27, X
    2076:	be 87       	std	Y+14, r27	; 0x0e
    2078:	fc 01       	movw	r30, r24
    207a:	f1 89       	ldd	r31, Z+17	; 0x11
    207c:	ff 87       	std	Y+15, r31	; 0x0f
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    207e:	dc 01       	movw	r26, r24
    2080:	ed 91       	ld	r30, X+
    2082:	fc 91       	ld	r31, X
    2084:	80 85       	ldd	r24, Z+8	; 0x08
    2086:	8b 30       	cpi	r24, 0x0B	; 11
    2088:	09 f0       	breq	.+2      	; 0x208c <fat_free_clusters+0x8e>
    208a:	ba c0       	rjmp	.+372    	; 0x2200 <fat_free_clusters+0x202>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    208c:	12 e0       	ldi	r17, 0x02	; 2
    208e:	44 0f       	add	r20, r20
    2090:	55 1f       	adc	r21, r21
    2092:	66 1f       	adc	r22, r22
    2094:	77 1f       	adc	r23, r23
    2096:	1a 95       	dec	r17
    2098:	d1 f7       	brne	.-12     	; 0x208e <fat_free_clusters+0x90>
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e8 85       	ldd	r30, Y+8	; 0x08
    20a4:	e4 0f       	add	r30, r20
    20a6:	e8 8b       	std	Y+16, r30	; 0x10
    20a8:	31 e0       	ldi	r19, 0x01	; 1
    20aa:	e4 17       	cp	r30, r20
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <fat_free_clusters+0xb2>
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	29 85       	ldd	r18, Y+9	; 0x09
    20b2:	25 0f       	add	r18, r21
    20b4:	e1 e0       	ldi	r30, 0x01	; 1
    20b6:	25 17       	cp	r18, r21
    20b8:	08 f0       	brcs	.+2      	; 0x20bc <fat_free_clusters+0xbe>
    20ba:	e0 e0       	ldi	r30, 0x00	; 0
    20bc:	32 0f       	add	r19, r18
    20be:	3f 83       	std	Y+7, r19	; 0x07
    20c0:	31 e0       	ldi	r19, 0x01	; 1
    20c2:	ff 81       	ldd	r31, Y+7	; 0x07
    20c4:	f2 17       	cp	r31, r18
    20c6:	08 f0       	brcs	.+2      	; 0x20ca <fat_free_clusters+0xcc>
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	e3 2b       	or	r30, r19
    20cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    20ce:	26 0f       	add	r18, r22
    20d0:	f1 e0       	ldi	r31, 0x01	; 1
    20d2:	26 17       	cp	r18, r22
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <fat_free_clusters+0xda>
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	2e 2e       	mov	r2, r30
    20da:	22 0e       	add	r2, r18
    20dc:	31 e0       	ldi	r19, 0x01	; 1
    20de:	22 16       	cp	r2, r18
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <fat_free_clusters+0xe6>
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	f3 2b       	or	r31, r19
    20e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    20e8:	27 0f       	add	r18, r23
    20ea:	31 e0       	ldi	r19, 0x01	; 1
    20ec:	27 17       	cp	r18, r23
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <fat_free_clusters+0xf4>
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	3f 2e       	mov	r3, r31
    20f4:	32 0e       	add	r3, r18
    20f6:	e1 e0       	ldi	r30, 0x01	; 1
    20f8:	32 16       	cp	r3, r18
    20fa:	08 f0       	brcs	.+2      	; 0x20fe <fat_free_clusters+0x100>
    20fc:	e0 e0       	ldi	r30, 0x00	; 0
    20fe:	3e 2b       	or	r19, r30
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	ec 85       	ldd	r30, Y+12	; 0x0c
    2104:	e8 17       	cp	r30, r24
    2106:	08 f0       	brcs	.+2      	; 0x210a <fat_free_clusters+0x10c>
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	4c 84       	ldd	r4, Y+12	; 0x0c
    210c:	43 0e       	add	r4, r19
    210e:	31 e0       	ldi	r19, 0x01	; 1
    2110:	fc 85       	ldd	r31, Y+12	; 0x0c
    2112:	4f 16       	cp	r4, r31
    2114:	08 f0       	brcs	.+2      	; 0x2118 <fat_free_clusters+0x11a>
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	23 2b       	or	r18, r19
    211a:	31 e0       	ldi	r19, 0x01	; 1
    211c:	ed 85       	ldd	r30, Y+13	; 0x0d
    211e:	e9 17       	cp	r30, r25
    2120:	08 f0       	brcs	.+2      	; 0x2124 <fat_free_clusters+0x126>
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	5d 84       	ldd	r5, Y+13	; 0x0d
    2126:	52 0e       	add	r5, r18
    2128:	21 e0       	ldi	r18, 0x01	; 1
    212a:	fd 85       	ldd	r31, Y+13	; 0x0d
    212c:	5f 16       	cp	r5, r31
    212e:	08 f0       	brcs	.+2      	; 0x2132 <fat_free_clusters+0x134>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	32 2b       	or	r19, r18
    2134:	21 e0       	ldi	r18, 0x01	; 1
    2136:	ee 85       	ldd	r30, Y+14	; 0x0e
    2138:	ea 17       	cp	r30, r26
    213a:	08 f0       	brcs	.+2      	; 0x213e <fat_free_clusters+0x140>
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2140:	63 0e       	add	r6, r19
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	fe 85       	ldd	r31, Y+14	; 0x0e
    2146:	6f 16       	cp	r6, r31
    2148:	08 f0       	brcs	.+2      	; 0x214c <fat_free_clusters+0x14e>
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	72 2e       	mov	r7, r18
    214e:	79 2a       	or	r7, r25
    2150:	2f 85       	ldd	r18, Y+15	; 0x0f
    2152:	72 0e       	add	r7, r18
    2154:	d4 01       	movw	r26, r8
    2156:	ed 91       	ld	r30, X+
    2158:	fc 91       	ld	r31, X
    215a:	01 90       	ld	r0, Z+
    215c:	f0 81       	ld	r31, Z
    215e:	e0 2d       	mov	r30, r0
    2160:	28 89       	ldd	r18, Y+16	; 0x10
    2162:	3f 81       	ldd	r19, Y+7	; 0x07
    2164:	a1 01       	movw	r20, r2
    2166:	b2 01       	movw	r22, r4
    2168:	c3 01       	movw	r24, r6
    216a:	8e 01       	movw	r16, r28
    216c:	0d 5f       	subi	r16, 0xFD	; 253
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	b4 e0       	ldi	r27, 0x04	; 4
    2172:	eb 2e       	mov	r14, r27
    2174:	f1 2c       	mov	r15, r1
    2176:	09 95       	icall
    2178:	88 23       	and	r24, r24
    217a:	09 f4       	brne	.+2      	; 0x217e <fat_free_clusters+0x180>
    217c:	e0 c0       	rjmp	.+448    	; 0x233e <fat_free_clusters+0x340>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
    217e:	ab 80       	ldd	r10, Y+3	; 0x03
    2180:	bc 80       	ldd	r11, Y+4	; 0x04
    2182:	cd 80       	ldd	r12, Y+5	; 0x05
    2184:	de 80       	ldd	r13, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
    2186:	a1 14       	cp	r10, r1
    2188:	b1 04       	cpc	r11, r1
    218a:	c1 04       	cpc	r12, r1
    218c:	d1 04       	cpc	r13, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <fat_free_clusters+0x194>
    2190:	d8 c0       	rjmp	.+432    	; 0x2342 <fat_free_clusters+0x344>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
    2192:	d6 01       	movw	r26, r12
    2194:	c5 01       	movw	r24, r10
    2196:	80 5f       	subi	r24, 0xF0	; 240
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	af 4f       	sbci	r26, 0xFF	; 255
    219c:	bf 40       	sbci	r27, 0x0F	; 15
    219e:	08 97       	sbiw	r24, 0x08	; 8
    21a0:	a1 05       	cpc	r26, r1
    21a2:	b1 05       	cpc	r27, r1
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <fat_free_clusters+0x1aa>
    21a6:	cb c0       	rjmp	.+406    	; 0x233e <fat_free_clusters+0x340>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
    21a8:	d6 01       	movw	r26, r12
    21aa:	c5 01       	movw	r24, r10
    21ac:	88 5f       	subi	r24, 0xF8	; 248
    21ae:	9f 4f       	sbci	r25, 0xFF	; 255
    21b0:	af 4f       	sbci	r26, 0xFF	; 255
    21b2:	bf 40       	sbci	r27, 0x0F	; 15
    21b4:	08 97       	sbiw	r24, 0x08	; 8
    21b6:	a1 05       	cpc	r26, r1
    21b8:	b1 05       	cpc	r27, r1
    21ba:	18 f4       	brcc	.+6      	; 0x21c2 <fat_free_clusters+0x1c4>
    21bc:	aa 24       	eor	r10, r10
    21be:	bb 24       	eor	r11, r11
    21c0:	65 01       	movw	r12, r10
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
    21c2:	1b 82       	std	Y+3, r1	; 0x03
    21c4:	1c 82       	std	Y+4, r1	; 0x04
    21c6:	1d 82       	std	Y+5, r1	; 0x05
    21c8:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    21ca:	d4 01       	movw	r26, r8
    21cc:	ed 91       	ld	r30, X+
    21ce:	fc 91       	ld	r31, X
    21d0:	04 80       	ldd	r0, Z+4	; 0x04
    21d2:	f5 81       	ldd	r31, Z+5	; 0x05
    21d4:	e0 2d       	mov	r30, r0
    21d6:	28 89       	ldd	r18, Y+16	; 0x10
    21d8:	3f 81       	ldd	r19, Y+7	; 0x07
    21da:	a1 01       	movw	r20, r2
    21dc:	b2 01       	movw	r22, r4
    21de:	c3 01       	movw	r24, r6
    21e0:	8e 01       	movw	r16, r28
    21e2:	0d 5f       	subi	r16, 0xFD	; 253
    21e4:	1f 4f       	sbci	r17, 0xFF	; 255
    21e6:	a4 e0       	ldi	r26, 0x04	; 4
    21e8:	ea 2e       	mov	r14, r26
    21ea:	f1 2c       	mov	r15, r1
    21ec:	09 95       	icall
    21ee:	b6 01       	movw	r22, r12
    21f0:	a5 01       	movw	r20, r10
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
    21f2:	a1 14       	cp	r10, r1
    21f4:	b1 04       	cpc	r11, r1
    21f6:	c1 04       	cpc	r12, r1
    21f8:	d1 04       	cpc	r13, r1
    21fa:	09 f0       	breq	.+2      	; 0x21fe <fat_free_clusters+0x200>
    21fc:	47 cf       	rjmp	.-370    	; 0x208c <fat_free_clusters+0x8e>
    21fe:	a1 c0       	rjmp	.+322    	; 0x2342 <fat_free_clusters+0x344>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2200:	44 0f       	add	r20, r20
    2202:	55 1f       	adc	r21, r21
    2204:	66 1f       	adc	r22, r22
    2206:	77 1f       	adc	r23, r23
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	a0 e0       	ldi	r26, 0x00	; 0
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	28 84       	ldd	r2, Y+8	; 0x08
    2212:	24 0e       	add	r2, r20
    2214:	31 e0       	ldi	r19, 0x01	; 1
    2216:	24 16       	cp	r2, r20
    2218:	08 f0       	brcs	.+2      	; 0x221c <fat_free_clusters+0x21e>
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	29 85       	ldd	r18, Y+9	; 0x09
    221e:	25 0f       	add	r18, r21
    2220:	e1 e0       	ldi	r30, 0x01	; 1
    2222:	25 17       	cp	r18, r21
    2224:	08 f0       	brcs	.+2      	; 0x2228 <fat_free_clusters+0x22a>
    2226:	e0 e0       	ldi	r30, 0x00	; 0
    2228:	33 2e       	mov	r3, r19
    222a:	32 0e       	add	r3, r18
    222c:	31 e0       	ldi	r19, 0x01	; 1
    222e:	32 16       	cp	r3, r18
    2230:	08 f0       	brcs	.+2      	; 0x2234 <fat_free_clusters+0x236>
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	e3 2b       	or	r30, r19
    2236:	2a 85       	ldd	r18, Y+10	; 0x0a
    2238:	26 0f       	add	r18, r22
    223a:	f1 e0       	ldi	r31, 0x01	; 1
    223c:	26 17       	cp	r18, r22
    223e:	08 f0       	brcs	.+2      	; 0x2242 <fat_free_clusters+0x244>
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	4e 2e       	mov	r4, r30
    2244:	42 0e       	add	r4, r18
    2246:	31 e0       	ldi	r19, 0x01	; 1
    2248:	42 16       	cp	r4, r18
    224a:	08 f0       	brcs	.+2      	; 0x224e <fat_free_clusters+0x250>
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	f3 2b       	or	r31, r19
    2250:	2b 85       	ldd	r18, Y+11	; 0x0b
    2252:	27 0f       	add	r18, r23
    2254:	31 e0       	ldi	r19, 0x01	; 1
    2256:	27 17       	cp	r18, r23
    2258:	08 f0       	brcs	.+2      	; 0x225c <fat_free_clusters+0x25e>
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	5f 2e       	mov	r5, r31
    225e:	52 0e       	add	r5, r18
    2260:	e1 e0       	ldi	r30, 0x01	; 1
    2262:	52 16       	cp	r5, r18
    2264:	08 f0       	brcs	.+2      	; 0x2268 <fat_free_clusters+0x26a>
    2266:	e0 e0       	ldi	r30, 0x00	; 0
    2268:	3e 2b       	or	r19, r30
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	ec 85       	ldd	r30, Y+12	; 0x0c
    226e:	e8 17       	cp	r30, r24
    2270:	08 f0       	brcs	.+2      	; 0x2274 <fat_free_clusters+0x276>
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	6c 84       	ldd	r6, Y+12	; 0x0c
    2276:	63 0e       	add	r6, r19
    2278:	31 e0       	ldi	r19, 0x01	; 1
    227a:	fc 85       	ldd	r31, Y+12	; 0x0c
    227c:	6f 16       	cp	r6, r31
    227e:	08 f0       	brcs	.+2      	; 0x2282 <fat_free_clusters+0x284>
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	23 2b       	or	r18, r19
    2284:	31 e0       	ldi	r19, 0x01	; 1
    2286:	ed 85       	ldd	r30, Y+13	; 0x0d
    2288:	e9 17       	cp	r30, r25
    228a:	08 f0       	brcs	.+2      	; 0x228e <fat_free_clusters+0x290>
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2290:	72 0e       	add	r7, r18
    2292:	21 e0       	ldi	r18, 0x01	; 1
    2294:	fd 85       	ldd	r31, Y+13	; 0x0d
    2296:	7f 16       	cp	r7, r31
    2298:	08 f0       	brcs	.+2      	; 0x229c <fat_free_clusters+0x29e>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	32 2b       	or	r19, r18
    229e:	21 e0       	ldi	r18, 0x01	; 1
    22a0:	ee 85       	ldd	r30, Y+14	; 0x0e
    22a2:	ea 17       	cp	r30, r26
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <fat_free_clusters+0x2aa>
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	ae 84       	ldd	r10, Y+14	; 0x0e
    22aa:	a3 0e       	add	r10, r19
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	fe 85       	ldd	r31, Y+14	; 0x0e
    22b0:	af 16       	cp	r10, r31
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <fat_free_clusters+0x2b8>
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	b2 2e       	mov	r11, r18
    22b8:	b9 2a       	or	r11, r25
    22ba:	2f 85       	ldd	r18, Y+15	; 0x0f
    22bc:	b2 0e       	add	r11, r18
    22be:	d4 01       	movw	r26, r8
    22c0:	ed 91       	ld	r30, X+
    22c2:	fc 91       	ld	r31, X
    22c4:	01 90       	ld	r0, Z+
    22c6:	f0 81       	ld	r31, Z
    22c8:	e0 2d       	mov	r30, r0
    22ca:	91 01       	movw	r18, r2
    22cc:	a2 01       	movw	r20, r4
    22ce:	b3 01       	movw	r22, r6
    22d0:	c5 01       	movw	r24, r10
    22d2:	8e 01       	movw	r16, r28
    22d4:	0f 5f       	subi	r16, 0xFF	; 255
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	b2 e0       	ldi	r27, 0x02	; 2
    22da:	eb 2e       	mov	r14, r27
    22dc:	f1 2c       	mov	r15, r1
    22de:	09 95       	icall
    22e0:	88 23       	and	r24, r24
    22e2:	69 f1       	breq	.+90     	; 0x233e <fat_free_clusters+0x340>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    22e4:	c9 80       	ldd	r12, Y+1	; 0x01
    22e6:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    22e8:	c1 14       	cp	r12, r1
    22ea:	d1 04       	cpc	r13, r1
    22ec:	51 f1       	breq	.+84     	; 0x2342 <fat_free_clusters+0x344>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    22ee:	c6 01       	movw	r24, r12
    22f0:	40 96       	adiw	r24, 0x10	; 16
    22f2:	08 97       	sbiw	r24, 0x08	; 8
    22f4:	20 f1       	brcs	.+72     	; 0x233e <fat_free_clusters+0x340>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    22f6:	b8 ef       	ldi	r27, 0xF8	; 248
    22f8:	cb 16       	cp	r12, r27
    22fa:	bf ef       	ldi	r27, 0xFF	; 255
    22fc:	db 06       	cpc	r13, r27
    22fe:	10 f0       	brcs	.+4      	; 0x2304 <fat_free_clusters+0x306>
    2300:	cc 24       	eor	r12, r12
    2302:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    2304:	1a 82       	std	Y+2, r1	; 0x02
    2306:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    2308:	d4 01       	movw	r26, r8
    230a:	ed 91       	ld	r30, X+
    230c:	fc 91       	ld	r31, X
    230e:	04 80       	ldd	r0, Z+4	; 0x04
    2310:	f5 81       	ldd	r31, Z+5	; 0x05
    2312:	e0 2d       	mov	r30, r0
    2314:	91 01       	movw	r18, r2
    2316:	a2 01       	movw	r20, r4
    2318:	b3 01       	movw	r22, r6
    231a:	c5 01       	movw	r24, r10
    231c:	8e 01       	movw	r16, r28
    231e:	0f 5f       	subi	r16, 0xFF	; 255
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	a2 e0       	ldi	r26, 0x02	; 2
    2324:	ea 2e       	mov	r14, r26
    2326:	f1 2c       	mov	r15, r1
    2328:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
    232a:	a6 01       	movw	r20, r12
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	70 e0       	ldi	r23, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    2330:	41 15       	cp	r20, r1
    2332:	51 05       	cpc	r21, r1
    2334:	61 05       	cpc	r22, r1
    2336:	71 05       	cpc	r23, r1
    2338:	09 f0       	breq	.+2      	; 0x233c <fat_free_clusters+0x33e>
    233a:	62 cf       	rjmp	.-316    	; 0x2200 <fat_free_clusters+0x202>
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <fat_free_clusters+0x344>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <fat_free_clusters+0x346>
    2342:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    2344:	60 96       	adiw	r28, 0x10	; 16
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	bf 90       	pop	r11
    2362:	af 90       	pop	r10
    2364:	9f 90       	pop	r9
    2366:	8f 90       	pop	r8
    2368:	7f 90       	pop	r7
    236a:	6f 90       	pop	r6
    236c:	5f 90       	pop	r5
    236e:	4f 90       	pop	r4
    2370:	3f 90       	pop	r3
    2372:	2f 90       	pop	r2
    2374:	08 95       	ret

00002376 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ad 97       	sbiw	r28, 0x2d	; 45
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	9d 8f       	std	Y+29, r25	; 0x1d
    23ac:	8c 8f       	std	Y+28, r24	; 0x1c
    23ae:	3a 01       	movw	r6, r20
    23b0:	4b 01       	movw	r8, r22
    23b2:	b9 01       	movw	r22, r18
    if(!fs)
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	09 f4       	brne	.+2      	; 0x23ba <fat_append_clusters+0x44>
    23b8:	ed c2       	rjmp	.+1498   	; 0x2994 <fat_append_clusters+0x61e>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    23ba:	dc 01       	movw	r26, r24
    23bc:	ed 91       	ld	r30, X+
    23be:	fc 91       	ld	r31, X
    23c0:	11 97       	sbiw	r26, 0x01	; 1
    23c2:	e0 80       	ld	r14, Z
    23c4:	f1 80       	ldd	r15, Z+1	; 0x01
    23c6:	fb 8e       	std	Y+27, r15	; 0x1b
    23c8:	ea 8e       	std	Y+26, r14	; 0x1a
    device_write_t device_write = fs->partition->device_write;
    23ca:	24 81       	ldd	r18, Z+4	; 0x04
    23cc:	35 81       	ldd	r19, Z+5	; 0x05
    23ce:	39 8f       	std	Y+25, r19	; 0x19
    23d0:	28 8f       	std	Y+24, r18	; 0x18
    offset_t fat_offset = fs->header.fat_offset;
    23d2:	1a 96       	adiw	r26, 0x0a	; 10
    23d4:	3c 91       	ld	r19, X
    23d6:	1a 97       	sbiw	r26, 0x0a	; 10
    23d8:	3c a3       	std	Y+36, r19	; 0x24
    23da:	1b 96       	adiw	r26, 0x0b	; 11
    23dc:	4c 91       	ld	r20, X
    23de:	1b 97       	sbiw	r26, 0x0b	; 11
    23e0:	4d a3       	std	Y+37, r20	; 0x25
    23e2:	1c 96       	adiw	r26, 0x0c	; 12
    23e4:	5c 91       	ld	r21, X
    23e6:	1c 97       	sbiw	r26, 0x0c	; 12
    23e8:	5e a3       	std	Y+38, r21	; 0x26
    23ea:	1d 96       	adiw	r26, 0x0d	; 13
    23ec:	8c 91       	ld	r24, X
    23ee:	1d 97       	sbiw	r26, 0x0d	; 13
    23f0:	8f a3       	std	Y+39, r24	; 0x27
    23f2:	1e 96       	adiw	r26, 0x0e	; 14
    23f4:	9c 91       	ld	r25, X
    23f6:	1e 97       	sbiw	r26, 0x0e	; 14
    23f8:	98 a7       	std	Y+40, r25	; 0x28
    23fa:	1f 96       	adiw	r26, 0x0f	; 15
    23fc:	ac 91       	ld	r26, X
    23fe:	a9 a7       	std	Y+41, r26	; 0x29
    2400:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2402:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2404:	50 96       	adiw	r26, 0x10	; 16
    2406:	bc 91       	ld	r27, X
    2408:	ba a7       	std	Y+42, r27	; 0x2a
    240a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    240c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    240e:	51 96       	adiw	r26, 0x11	; 17
    2410:	bc 91       	ld	r27, X
    2412:	bb a7       	std	Y+43, r27	; 0x2b
    cluster_t cluster_next = 0;
    cluster_t cluster_max;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    2414:	1f 86       	std	Y+15, r1	; 0x0f
    2416:	80 85       	ldd	r24, Z+8	; 0x08
    2418:	8b 30       	cpi	r24, 0x0B	; 11
    241a:	11 f4       	brne	.+4      	; 0x2420 <fat_append_clusters+0xaa>
    241c:	e1 e0       	ldi	r30, 0x01	; 1
    241e:	ef 87       	std	Y+15, r30	; 0x0f
    2420:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2422:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2424:	82 89       	ldd	r24, Z+18	; 0x12
    2426:	93 89       	ldd	r25, Z+19	; 0x13
    2428:	a4 89       	ldd	r26, Z+20	; 0x14
    242a:	b5 89       	ldd	r27, Z+21	; 0x15

    if(is_fat32)
    242c:	ff 85       	ldd	r31, Y+15	; 0x0f
    242e:	ff 23       	and	r31, r31
    2430:	51 f0       	breq	.+20     	; 0x2446 <fat_append_clusters+0xd0>
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    2432:	9c 01       	movw	r18, r24
    2434:	ad 01       	movw	r20, r26
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	56 95       	lsr	r21
    243a:	47 95       	ror	r20
    243c:	37 95       	ror	r19
    243e:	27 95       	ror	r18
    2440:	8a 95       	dec	r24
    2442:	d1 f7       	brne	.-12     	; 0x2438 <fat_append_clusters+0xc2>
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <fat_append_clusters+0xdc>
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    2446:	9c 01       	movw	r18, r24
    2448:	ad 01       	movw	r20, r26
    244a:	56 95       	lsr	r21
    244c:	47 95       	ror	r20
    244e:	37 95       	ror	r19
    2450:	27 95       	ror	r18
    2452:	28 8b       	std	Y+16, r18	; 0x10
    2454:	39 8b       	std	Y+17, r19	; 0x11
    2456:	4a 8b       	std	Y+18, r20	; 0x12
    2458:	5b 8b       	std	Y+19, r21	; 0x13
    245a:	c8 01       	movw	r24, r16
    245c:	db 01       	movw	r26, r22
    245e:	8c 8b       	std	Y+20, r24	; 0x14
    2460:	9d 8b       	std	Y+21, r25	; 0x15
    2462:	ae 8b       	std	Y+22, r26	; 0x16
    2464:	bf 8b       	std	Y+23, r27	; 0x17
    2466:	aa 24       	eor	r10, r10
    2468:	bb 24       	eor	r11, r11
    246a:	65 01       	movw	r12, r10
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a0 e0       	ldi	r26, 0x00	; 0
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	8b 87       	std	Y+11, r24	; 0x0b
    2476:	9c 87       	std	Y+12, r25	; 0x0c
    2478:	ad 87       	std	Y+13, r26	; 0x0d
    247a:	be 87       	std	Y+14, r27	; 0x0e
    247c:	a4 e0       	ldi	r26, 0x04	; 4
    247e:	ea 2e       	mov	r14, r26
    2480:	f1 2c       	mov	r15, r1
    2482:	01 2d       	mov	r16, r1
    2484:	11 2d       	mov	r17, r1
    2486:	ef 82       	std	Y+7, r14	; 0x07
    2488:	f8 86       	std	Y+8, r15	; 0x08
    248a:	09 87       	std	Y+9, r16	; 0x09
    248c:	1a 87       	std	Y+10, r17	; 0x0a
    248e:	78 c1       	rjmp	.+752    	; 0x2780 <fat_append_clusters+0x40a>

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    2490:	ff 84       	ldd	r15, Y+15	; 0x0f
    2492:	ff 20       	and	r15, r15
    2494:	09 f4       	brne	.+2      	; 0x2498 <fat_append_clusters+0x122>
    2496:	7b c0       	rjmp	.+246    	; 0x258e <fat_append_clusters+0x218>
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    2498:	8f 81       	ldd	r24, Y+7	; 0x07
    249a:	98 85       	ldd	r25, Y+8	; 0x08
    249c:	a9 85       	ldd	r26, Y+9	; 0x09
    249e:	ba 85       	ldd	r27, Y+10	; 0x0a
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	aa 1f       	adc	r26, r26
    24a6:	bb 1f       	adc	r27, r27
    24a8:	9c 01       	movw	r18, r24
    24aa:	ad 01       	movw	r20, r26
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0c a1       	ldd	r16, Y+36	; 0x24
    24b6:	02 0f       	add	r16, r18
    24b8:	0c a7       	std	Y+44, r16	; 0x2c
    24ba:	f1 e0       	ldi	r31, 0x01	; 1
    24bc:	02 17       	cp	r16, r18
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <fat_append_clusters+0x14c>
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	ed a1       	ldd	r30, Y+37	; 0x25
    24c4:	e3 0f       	add	r30, r19
    24c6:	a1 e0       	ldi	r26, 0x01	; 1
    24c8:	e3 17       	cp	r30, r19
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <fat_append_clusters+0x158>
    24cc:	a0 e0       	ldi	r26, 0x00	; 0
    24ce:	fe 0f       	add	r31, r30
    24d0:	fe 8f       	std	Y+30, r31	; 0x1e
    24d2:	f1 e0       	ldi	r31, 0x01	; 1
    24d4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    24d6:	1e 17       	cp	r17, r30
    24d8:	08 f0       	brcs	.+2      	; 0x24dc <fat_append_clusters+0x166>
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	af 2b       	or	r26, r31
    24de:	ee a1       	ldd	r30, Y+38	; 0x26
    24e0:	e4 0f       	add	r30, r20
    24e2:	b1 e0       	ldi	r27, 0x01	; 1
    24e4:	e4 17       	cp	r30, r20
    24e6:	08 f0       	brcs	.+2      	; 0x24ea <fat_append_clusters+0x174>
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	ae 0f       	add	r26, r30
    24ec:	af 8f       	std	Y+31, r26	; 0x1f
    24ee:	f1 e0       	ldi	r31, 0x01	; 1
    24f0:	ae 17       	cp	r26, r30
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <fat_append_clusters+0x180>
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	bf 2b       	or	r27, r31
    24f8:	ef a1       	ldd	r30, Y+39	; 0x27
    24fa:	e5 0f       	add	r30, r21
    24fc:	f1 e0       	ldi	r31, 0x01	; 1
    24fe:	e5 17       	cp	r30, r21
    2500:	08 f0       	brcs	.+2      	; 0x2504 <fat_append_clusters+0x18e>
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	be 0f       	add	r27, r30
    2506:	b8 a3       	std	Y+32, r27	; 0x20
    2508:	a1 e0       	ldi	r26, 0x01	; 1
    250a:	be 17       	cp	r27, r30
    250c:	08 f0       	brcs	.+2      	; 0x2510 <fat_append_clusters+0x19a>
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	fa 2b       	or	r31, r26
    2512:	e1 e0       	ldi	r30, 0x01	; 1
    2514:	a8 a5       	ldd	r26, Y+40	; 0x28
    2516:	a6 17       	cp	r26, r22
    2518:	08 f0       	brcs	.+2      	; 0x251c <fat_append_clusters+0x1a6>
    251a:	e0 e0       	ldi	r30, 0x00	; 0
    251c:	28 a4       	ldd	r2, Y+40	; 0x28
    251e:	2f 0e       	add	r2, r31
    2520:	f1 e0       	ldi	r31, 0x01	; 1
    2522:	b8 a5       	ldd	r27, Y+40	; 0x28
    2524:	2b 16       	cp	r2, r27
    2526:	08 f0       	brcs	.+2      	; 0x252a <fat_append_clusters+0x1b4>
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	ef 2b       	or	r30, r31
    252c:	f1 e0       	ldi	r31, 0x01	; 1
    252e:	e9 a4       	ldd	r14, Y+41	; 0x29
    2530:	e7 16       	cp	r14, r23
    2532:	08 f0       	brcs	.+2      	; 0x2536 <fat_append_clusters+0x1c0>
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	39 a4       	ldd	r3, Y+41	; 0x29
    2538:	3e 0e       	add	r3, r30
    253a:	e1 e0       	ldi	r30, 0x01	; 1
    253c:	f9 a4       	ldd	r15, Y+41	; 0x29
    253e:	3f 14       	cp	r3, r15
    2540:	08 f0       	brcs	.+2      	; 0x2544 <fat_append_clusters+0x1ce>
    2542:	e0 e0       	ldi	r30, 0x00	; 0
    2544:	fe 2b       	or	r31, r30
    2546:	e1 e0       	ldi	r30, 0x01	; 1
    2548:	0a a5       	ldd	r16, Y+42	; 0x2a
    254a:	08 17       	cp	r16, r24
    254c:	08 f0       	brcs	.+2      	; 0x2550 <fat_append_clusters+0x1da>
    254e:	e0 e0       	ldi	r30, 0x00	; 0
    2550:	4a a4       	ldd	r4, Y+42	; 0x2a
    2552:	4f 0e       	add	r4, r31
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	1a a5       	ldd	r17, Y+42	; 0x2a
    2558:	41 16       	cp	r4, r17
    255a:	08 f0       	brcs	.+2      	; 0x255e <fat_append_clusters+0x1e8>
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	5e 2e       	mov	r5, r30
    2560:	59 2a       	or	r5, r25
    2562:	2b a5       	ldd	r18, Y+43	; 0x2b
    2564:	52 0e       	add	r5, r18
    2566:	2c a5       	ldd	r18, Y+44	; 0x2c
    2568:	3e 8d       	ldd	r19, Y+30	; 0x1e
    256a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    256c:	58 a1       	ldd	r21, Y+32	; 0x20
    256e:	b1 01       	movw	r22, r2
    2570:	c2 01       	movw	r24, r4
    2572:	8e 01       	movw	r16, r28
    2574:	0d 5f       	subi	r16, 0xFD	; 253
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	e4 e0       	ldi	r30, 0x04	; 4
    257a:	ee 2e       	mov	r14, r30
    257c:	f1 2c       	mov	r15, r1
    257e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2580:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2582:	fd 01       	movw	r30, r26
    2584:	09 95       	icall
    2586:	88 23       	and	r24, r24
    2588:	09 f0       	breq	.+2      	; 0x258c <fat_append_clusters+0x216>
    258a:	7e c0       	rjmp	.+252    	; 0x2688 <fat_append_clusters+0x312>
    258c:	03 c2       	rjmp	.+1030   	; 0x2994 <fat_append_clusters+0x61e>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    258e:	ef 80       	ldd	r14, Y+7	; 0x07
    2590:	f8 84       	ldd	r15, Y+8	; 0x08
    2592:	09 85       	ldd	r16, Y+9	; 0x09
    2594:	1a 85       	ldd	r17, Y+10	; 0x0a
    2596:	a8 01       	movw	r20, r16
    2598:	97 01       	movw	r18, r14
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	fc a0       	ldd	r15, Y+36	; 0x24
    25a4:	f2 0e       	add	r15, r18
    25a6:	fd a6       	std	Y+45, r15	; 0x2d
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	f2 16       	cp	r15, r18
    25ac:	08 f0       	brcs	.+2      	; 0x25b0 <fat_append_clusters+0x23a>
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	ed a1       	ldd	r30, Y+37	; 0x25
    25b2:	e3 0f       	add	r30, r19
    25b4:	a1 e0       	ldi	r26, 0x01	; 1
    25b6:	e3 17       	cp	r30, r19
    25b8:	08 f0       	brcs	.+2      	; 0x25bc <fat_append_clusters+0x246>
    25ba:	a0 e0       	ldi	r26, 0x00	; 0
    25bc:	fe 0f       	add	r31, r30
    25be:	f9 a3       	std	Y+33, r31	; 0x21
    25c0:	f1 e0       	ldi	r31, 0x01	; 1
    25c2:	09 a1       	ldd	r16, Y+33	; 0x21
    25c4:	0e 17       	cp	r16, r30
    25c6:	08 f0       	brcs	.+2      	; 0x25ca <fat_append_clusters+0x254>
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	af 2b       	or	r26, r31
    25cc:	ee a1       	ldd	r30, Y+38	; 0x26
    25ce:	e4 0f       	add	r30, r20
    25d0:	b1 e0       	ldi	r27, 0x01	; 1
    25d2:	e4 17       	cp	r30, r20
    25d4:	08 f0       	brcs	.+2      	; 0x25d8 <fat_append_clusters+0x262>
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	ae 0f       	add	r26, r30
    25da:	aa a3       	std	Y+34, r26	; 0x22
    25dc:	f1 e0       	ldi	r31, 0x01	; 1
    25de:	ae 17       	cp	r26, r30
    25e0:	08 f0       	brcs	.+2      	; 0x25e4 <fat_append_clusters+0x26e>
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	bf 2b       	or	r27, r31
    25e6:	ef a1       	ldd	r30, Y+39	; 0x27
    25e8:	e5 0f       	add	r30, r21
    25ea:	a1 e0       	ldi	r26, 0x01	; 1
    25ec:	e5 17       	cp	r30, r21
    25ee:	08 f0       	brcs	.+2      	; 0x25f2 <fat_append_clusters+0x27c>
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	be 0f       	add	r27, r30
    25f4:	bb a3       	std	Y+35, r27	; 0x23
    25f6:	f1 e0       	ldi	r31, 0x01	; 1
    25f8:	be 17       	cp	r27, r30
    25fa:	08 f0       	brcs	.+2      	; 0x25fe <fat_append_clusters+0x288>
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	af 2b       	or	r26, r31
    2600:	e8 a5       	ldd	r30, Y+40	; 0x28
    2602:	e6 0f       	add	r30, r22
    2604:	b1 e0       	ldi	r27, 0x01	; 1
    2606:	e6 17       	cp	r30, r22
    2608:	08 f0       	brcs	.+2      	; 0x260c <fat_append_clusters+0x296>
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	2a 2e       	mov	r2, r26
    260e:	2e 0e       	add	r2, r30
    2610:	f1 e0       	ldi	r31, 0x01	; 1
    2612:	2e 16       	cp	r2, r30
    2614:	08 f0       	brcs	.+2      	; 0x2618 <fat_append_clusters+0x2a2>
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	bf 2b       	or	r27, r31
    261a:	e9 a5       	ldd	r30, Y+41	; 0x29
    261c:	e7 0f       	add	r30, r23
    261e:	a1 e0       	ldi	r26, 0x01	; 1
    2620:	e7 17       	cp	r30, r23
    2622:	08 f0       	brcs	.+2      	; 0x2626 <fat_append_clusters+0x2b0>
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	3b 2e       	mov	r3, r27
    2628:	3e 0e       	add	r3, r30
    262a:	f1 e0       	ldi	r31, 0x01	; 1
    262c:	3e 16       	cp	r3, r30
    262e:	08 f0       	brcs	.+2      	; 0x2632 <fat_append_clusters+0x2bc>
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	af 2b       	or	r26, r31
    2634:	ea a5       	ldd	r30, Y+42	; 0x2a
    2636:	e8 0f       	add	r30, r24
    2638:	b1 e0       	ldi	r27, 0x01	; 1
    263a:	e8 17       	cp	r30, r24
    263c:	08 f0       	brcs	.+2      	; 0x2640 <fat_append_clusters+0x2ca>
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	4a 2e       	mov	r4, r26
    2642:	4e 0e       	add	r4, r30
    2644:	f1 e0       	ldi	r31, 0x01	; 1
    2646:	4e 16       	cp	r4, r30
    2648:	08 f0       	brcs	.+2      	; 0x264c <fat_append_clusters+0x2d6>
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	5b 2e       	mov	r5, r27
    264e:	5f 2a       	or	r5, r31
    2650:	8b a5       	ldd	r24, Y+43	; 0x2b
    2652:	89 0f       	add	r24, r25
    2654:	58 0e       	add	r5, r24
    2656:	2d a5       	ldd	r18, Y+45	; 0x2d
    2658:	39 a1       	ldd	r19, Y+33	; 0x21
    265a:	4a a1       	ldd	r20, Y+34	; 0x22
    265c:	5b a1       	ldd	r21, Y+35	; 0x23
    265e:	b1 01       	movw	r22, r2
    2660:	c2 01       	movw	r24, r4
    2662:	8e 01       	movw	r16, r28
    2664:	0f 5f       	subi	r16, 0xFF	; 255
    2666:	1f 4f       	sbci	r17, 0xFF	; 255
    2668:	b2 e0       	ldi	r27, 0x02	; 2
    266a:	eb 2e       	mov	r14, r27
    266c:	f1 2c       	mov	r15, r1
    266e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2670:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2672:	fd 01       	movw	r30, r26
    2674:	09 95       	icall
    2676:	88 23       	and	r24, r24
    2678:	09 f4       	brne	.+2      	; 0x267c <fat_append_clusters+0x306>
    267a:	8c c1       	rjmp	.+792    	; 0x2994 <fat_append_clusters+0x61e>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	89 2b       	or	r24, r25
    2682:	09 f0       	breq	.+2      	; 0x2686 <fat_append_clusters+0x310>
    2684:	66 c0       	rjmp	.+204    	; 0x2752 <fat_append_clusters+0x3dc>
    2686:	2c c0       	rjmp	.+88     	; 0x26e0 <fat_append_clusters+0x36a>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	ad 81       	ldd	r26, Y+5	; 0x05
    268e:	be 81       	ldd	r27, Y+6	; 0x06
    2690:	00 97       	sbiw	r24, 0x00	; 0
    2692:	a1 05       	cpc	r26, r1
    2694:	b1 05       	cpc	r27, r1
    2696:	09 f0       	breq	.+2      	; 0x269a <fat_append_clusters+0x324>
    2698:	5c c0       	rjmp	.+184    	; 0x2752 <fat_append_clusters+0x3dc>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    269a:	a1 14       	cp	r10, r1
    269c:	b1 04       	cpc	r11, r1
    269e:	c1 04       	cpc	r12, r1
    26a0:	d1 04       	cpc	r13, r1
    26a2:	69 f4       	brne	.+26     	; 0x26be <fat_append_clusters+0x348>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
    26a4:	af ef       	ldi	r26, 0xFF	; 255
    26a6:	ea 2e       	mov	r14, r26
    26a8:	af ef       	ldi	r26, 0xFF	; 255
    26aa:	fa 2e       	mov	r15, r26
    26ac:	af ef       	ldi	r26, 0xFF	; 255
    26ae:	0a 2f       	mov	r16, r26
    26b0:	af e0       	ldi	r26, 0x0F	; 15
    26b2:	1a 2f       	mov	r17, r26
    26b4:	eb 82       	std	Y+3, r14	; 0x03
    26b6:	fc 82       	std	Y+4, r15	; 0x04
    26b8:	0d 83       	std	Y+5, r16	; 0x05
    26ba:	1e 83       	std	Y+6, r17	; 0x06
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <fat_append_clusters+0x350>
            else
                fat_entry32 = htol32(cluster_next);
    26be:	ab 82       	std	Y+3, r10	; 0x03
    26c0:	bc 82       	std	Y+4, r11	; 0x04
    26c2:	cd 82       	std	Y+5, r12	; 0x05
    26c4:	de 82       	std	Y+6, r13	; 0x06

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    26c6:	2c a5       	ldd	r18, Y+44	; 0x2c
    26c8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    26ca:	4f 8d       	ldd	r20, Y+31	; 0x1f
    26cc:	58 a1       	ldd	r21, Y+32	; 0x20
    26ce:	b1 01       	movw	r22, r2
    26d0:	c2 01       	movw	r24, r4
    26d2:	8e 01       	movw	r16, r28
    26d4:	0d 5f       	subi	r16, 0xFD	; 253
    26d6:	1f 4f       	sbci	r17, 0xFF	; 255
    26d8:	f4 e0       	ldi	r31, 0x04	; 4
    26da:	ef 2e       	mov	r14, r31
    26dc:	f1 2c       	mov	r15, r1
    26de:	18 c0       	rjmp	.+48     	; 0x2710 <fat_append_clusters+0x39a>
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    26e0:	a1 14       	cp	r10, r1
    26e2:	b1 04       	cpc	r11, r1
    26e4:	c1 04       	cpc	r12, r1
    26e6:	d1 04       	cpc	r13, r1
    26e8:	29 f4       	brne	.+10     	; 0x26f4 <fat_append_clusters+0x37e>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    26ea:	ef ef       	ldi	r30, 0xFF	; 255
    26ec:	ff ef       	ldi	r31, 0xFF	; 255
    26ee:	fa 83       	std	Y+2, r31	; 0x02
    26f0:	e9 83       	std	Y+1, r30	; 0x01
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <fat_append_clusters+0x382>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    26f4:	ba 82       	std	Y+2, r11	; 0x02
    26f6:	a9 82       	std	Y+1, r10	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    26f8:	2d a5       	ldd	r18, Y+45	; 0x2d
    26fa:	39 a1       	ldd	r19, Y+33	; 0x21
    26fc:	4a a1       	ldd	r20, Y+34	; 0x22
    26fe:	5b a1       	ldd	r21, Y+35	; 0x23
    2700:	b1 01       	movw	r22, r2
    2702:	c2 01       	movw	r24, r4
    2704:	8e 01       	movw	r16, r28
    2706:	0f 5f       	subi	r16, 0xFF	; 255
    2708:	1f 4f       	sbci	r17, 0xFF	; 255
    270a:	e2 e0       	ldi	r30, 0x02	; 2
    270c:	ee 2e       	mov	r14, r30
    270e:	f1 2c       	mov	r15, r1
    2710:	a8 8d       	ldd	r26, Y+24	; 0x18
    2712:	b9 8d       	ldd	r27, Y+25	; 0x19
    2714:	fd 01       	movw	r30, r26
    2716:	09 95       	icall
    2718:	88 23       	and	r24, r24
    271a:	09 f4       	brne	.+2      	; 0x271e <fat_append_clusters+0x3a8>
    271c:	3f c0       	rjmp	.+126    	; 0x279c <fat_append_clusters+0x426>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    271e:	0c 89       	ldd	r16, Y+20	; 0x14
    2720:	1d 89       	ldd	r17, Y+21	; 0x15
    2722:	2e 89       	ldd	r18, Y+22	; 0x16
    2724:	3f 89       	ldd	r19, Y+23	; 0x17
    2726:	01 50       	subi	r16, 0x01	; 1
    2728:	10 40       	sbci	r17, 0x00	; 0
    272a:	20 40       	sbci	r18, 0x00	; 0
    272c:	30 40       	sbci	r19, 0x00	; 0
    272e:	0c 8b       	std	Y+20, r16	; 0x14
    2730:	1d 8b       	std	Y+21, r17	; 0x15
    2732:	2e 8b       	std	Y+22, r18	; 0x16
    2734:	3f 8b       	std	Y+23, r19	; 0x17
    2736:	01 15       	cp	r16, r1
    2738:	11 05       	cpc	r17, r1
    273a:	21 05       	cpc	r18, r1
    273c:	31 05       	cpc	r19, r1
    273e:	29 f4       	brne	.+10     	; 0x274a <fat_append_clusters+0x3d4>
    2740:	ab 84       	ldd	r10, Y+11	; 0x0b
    2742:	bc 84       	ldd	r11, Y+12	; 0x0c
    2744:	cd 84       	ldd	r12, Y+13	; 0x0d
    2746:	de 84       	ldd	r13, Y+14	; 0x0e
    2748:	32 c0       	rjmp	.+100    	; 0x27ae <fat_append_clusters+0x438>
    274a:	ab 84       	ldd	r10, Y+11	; 0x0b
    274c:	bc 84       	ldd	r11, Y+12	; 0x0c
    274e:	cd 84       	ldd	r12, Y+13	; 0x0d
    2750:	de 84       	ldd	r13, Y+14	; 0x0e
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    2752:	2b 85       	ldd	r18, Y+11	; 0x0b
    2754:	3c 85       	ldd	r19, Y+12	; 0x0c
    2756:	4d 85       	ldd	r20, Y+13	; 0x0d
    2758:	5e 85       	ldd	r21, Y+14	; 0x0e
    275a:	2f 5f       	subi	r18, 0xFF	; 255
    275c:	3f 4f       	sbci	r19, 0xFF	; 255
    275e:	4f 4f       	sbci	r20, 0xFF	; 255
    2760:	5f 4f       	sbci	r21, 0xFF	; 255
    2762:	2b 87       	std	Y+11, r18	; 0x0b
    2764:	3c 87       	std	Y+12, r19	; 0x0c
    2766:	4d 87       	std	Y+13, r20	; 0x0d
    2768:	5e 87       	std	Y+14, r21	; 0x0e
    276a:	8f 81       	ldd	r24, Y+7	; 0x07
    276c:	98 85       	ldd	r25, Y+8	; 0x08
    276e:	a9 85       	ldd	r26, Y+9	; 0x09
    2770:	ba 85       	ldd	r27, Y+10	; 0x0a
    2772:	02 96       	adiw	r24, 0x02	; 2
    2774:	a1 1d       	adc	r26, r1
    2776:	b1 1d       	adc	r27, r1
    2778:	8f 83       	std	Y+7, r24	; 0x07
    277a:	98 87       	std	Y+8, r25	; 0x08
    277c:	a9 87       	std	Y+9, r26	; 0x09
    277e:	ba 87       	std	Y+10, r27	; 0x0a
    2780:	eb 84       	ldd	r14, Y+11	; 0x0b
    2782:	fc 84       	ldd	r15, Y+12	; 0x0c
    2784:	0d 85       	ldd	r16, Y+13	; 0x0d
    2786:	1e 85       	ldd	r17, Y+14	; 0x0e
    2788:	28 89       	ldd	r18, Y+16	; 0x10
    278a:	39 89       	ldd	r19, Y+17	; 0x11
    278c:	4a 89       	ldd	r20, Y+18	; 0x12
    278e:	5b 89       	ldd	r21, Y+19	; 0x13
    2790:	e2 16       	cp	r14, r18
    2792:	f3 06       	cpc	r15, r19
    2794:	04 07       	cpc	r16, r20
    2796:	15 07       	cpc	r17, r21
    2798:	08 f4       	brcc	.+2      	; 0x279c <fat_append_clusters+0x426>
    279a:	7a ce       	rjmp	.-780    	; 0x2490 <fat_append_clusters+0x11a>
            break;
    }

    do
    {
        if(count_left > 0)
    279c:	8c 89       	ldd	r24, Y+20	; 0x14
    279e:	9d 89       	ldd	r25, Y+21	; 0x15
    27a0:	ae 89       	ldd	r26, Y+22	; 0x16
    27a2:	bf 89       	ldd	r27, Y+23	; 0x17
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	a1 05       	cpc	r26, r1
    27a8:	b1 05       	cpc	r27, r1
    27aa:	09 f0       	breq	.+2      	; 0x27ae <fat_append_clusters+0x438>
    27ac:	ed c0       	rjmp	.+474    	; 0x2988 <fat_append_clusters+0x612>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    27ae:	92 e0       	ldi	r25, 0x02	; 2
    27b0:	69 16       	cp	r6, r25
    27b2:	71 04       	cpc	r7, r1
    27b4:	81 04       	cpc	r8, r1
    27b6:	91 04       	cpc	r9, r1
    27b8:	08 f4       	brcc	.+2      	; 0x27bc <fat_append_clusters+0x446>
    27ba:	ef c0       	rjmp	.+478    	; 0x299a <fat_append_clusters+0x624>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
    27bc:	af 85       	ldd	r26, Y+15	; 0x0f
    27be:	aa 23       	and	r26, r26
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <fat_append_clusters+0x44e>
    27c2:	71 c0       	rjmp	.+226    	; 0x28a6 <fat_append_clusters+0x530>
            {
                fat_entry32 = htol32(cluster_next);
    27c4:	ab 82       	std	Y+3, r10	; 0x03
    27c6:	bc 82       	std	Y+4, r11	; 0x04
    27c8:	cd 82       	std	Y+5, r12	; 0x05
    27ca:	de 82       	std	Y+6, r13	; 0x06

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    27cc:	b2 e0       	ldi	r27, 0x02	; 2
    27ce:	66 0c       	add	r6, r6
    27d0:	77 1c       	adc	r7, r7
    27d2:	88 1c       	adc	r8, r8
    27d4:	99 1c       	adc	r9, r9
    27d6:	ba 95       	dec	r27
    27d8:	d1 f7       	brne	.-12     	; 0x27ce <fat_append_clusters+0x458>
    27da:	b4 01       	movw	r22, r8
    27dc:	a3 01       	movw	r20, r6
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e0       	ldi	r26, 0x00	; 0
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	2c a1       	ldd	r18, Y+36	; 0x24
    27e8:	26 0d       	add	r18, r6
    27ea:	31 e0       	ldi	r19, 0x01	; 1
    27ec:	26 15       	cp	r18, r6
    27ee:	08 f0       	brcs	.+2      	; 0x27f2 <fat_append_clusters+0x47c>
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	ed a1       	ldd	r30, Y+37	; 0x25
    27f4:	e5 0f       	add	r30, r21
    27f6:	11 e0       	ldi	r17, 0x01	; 1
    27f8:	e5 17       	cp	r30, r21
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <fat_append_clusters+0x488>
    27fc:	10 e0       	ldi	r17, 0x00	; 0
    27fe:	3e 0f       	add	r19, r30
    2800:	f1 e0       	ldi	r31, 0x01	; 1
    2802:	3e 17       	cp	r19, r30
    2804:	08 f0       	brcs	.+2      	; 0x2808 <fat_append_clusters+0x492>
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	1f 2b       	or	r17, r31
    280a:	ee a1       	ldd	r30, Y+38	; 0x26
    280c:	e6 0f       	add	r30, r22
    280e:	01 e0       	ldi	r16, 0x01	; 1
    2810:	e6 17       	cp	r30, r22
    2812:	08 f0       	brcs	.+2      	; 0x2816 <fat_append_clusters+0x4a0>
    2814:	00 e0       	ldi	r16, 0x00	; 0
    2816:	91 2e       	mov	r9, r17
    2818:	9e 0e       	add	r9, r30
    281a:	f1 e0       	ldi	r31, 0x01	; 1
    281c:	9e 16       	cp	r9, r30
    281e:	08 f0       	brcs	.+2      	; 0x2822 <fat_append_clusters+0x4ac>
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	0f 2b       	or	r16, r31
    2824:	ef a1       	ldd	r30, Y+39	; 0x27
    2826:	e7 0f       	add	r30, r23
    2828:	f1 e0       	ldi	r31, 0x01	; 1
    282a:	e7 17       	cp	r30, r23
    282c:	08 f0       	brcs	.+2      	; 0x2830 <fat_append_clusters+0x4ba>
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	e0 2e       	mov	r14, r16
    2832:	ee 0e       	add	r14, r30
    2834:	11 e0       	ldi	r17, 0x01	; 1
    2836:	ee 16       	cp	r14, r30
    2838:	08 f0       	brcs	.+2      	; 0x283c <fat_append_clusters+0x4c6>
    283a:	10 e0       	ldi	r17, 0x00	; 0
    283c:	f1 2b       	or	r31, r17
    283e:	e1 e0       	ldi	r30, 0x01	; 1
    2840:	f8 a4       	ldd	r15, Y+40	; 0x28
    2842:	f8 16       	cp	r15, r24
    2844:	08 f0       	brcs	.+2      	; 0x2848 <fat_append_clusters+0x4d2>
    2846:	e0 e0       	ldi	r30, 0x00	; 0
    2848:	f8 a4       	ldd	r15, Y+40	; 0x28
    284a:	ff 0e       	add	r15, r31
    284c:	f1 e0       	ldi	r31, 0x01	; 1
    284e:	08 a5       	ldd	r16, Y+40	; 0x28
    2850:	f0 16       	cp	r15, r16
    2852:	08 f0       	brcs	.+2      	; 0x2856 <fat_append_clusters+0x4e0>
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	ef 2b       	or	r30, r31
    2858:	f1 e0       	ldi	r31, 0x01	; 1
    285a:	19 a5       	ldd	r17, Y+41	; 0x29
    285c:	19 17       	cp	r17, r25
    285e:	08 f0       	brcs	.+2      	; 0x2862 <fat_append_clusters+0x4ec>
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	09 a5       	ldd	r16, Y+41	; 0x29
    2864:	0e 0f       	add	r16, r30
    2866:	e1 e0       	ldi	r30, 0x01	; 1
    2868:	19 a5       	ldd	r17, Y+41	; 0x29
    286a:	01 17       	cp	r16, r17
    286c:	08 f0       	brcs	.+2      	; 0x2870 <fat_append_clusters+0x4fa>
    286e:	e0 e0       	ldi	r30, 0x00	; 0
    2870:	fe 2b       	or	r31, r30
    2872:	11 e0       	ldi	r17, 0x01	; 1
    2874:	ea a5       	ldd	r30, Y+42	; 0x2a
    2876:	ea 17       	cp	r30, r26
    2878:	08 f0       	brcs	.+2      	; 0x287c <fat_append_clusters+0x506>
    287a:	10 e0       	ldi	r17, 0x00	; 0
    287c:	8a a5       	ldd	r24, Y+42	; 0x2a
    287e:	8f 0f       	add	r24, r31
    2880:	e1 e0       	ldi	r30, 0x01	; 1
    2882:	fa a5       	ldd	r31, Y+42	; 0x2a
    2884:	8f 17       	cp	r24, r31
    2886:	08 f0       	brcs	.+2      	; 0x288a <fat_append_clusters+0x514>
    2888:	e0 e0       	ldi	r30, 0x00	; 0
    288a:	1e 2b       	or	r17, r30
    288c:	49 2d       	mov	r20, r9
    288e:	5e 2d       	mov	r21, r14
    2890:	6f 2d       	mov	r22, r15
    2892:	70 2f       	mov	r23, r16
    2894:	9b a5       	ldd	r25, Y+43	; 0x2b
    2896:	91 0f       	add	r25, r17
    2898:	8e 01       	movw	r16, r28
    289a:	0d 5f       	subi	r16, 0xFD	; 253
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	a4 e0       	ldi	r26, 0x04	; 4
    28a0:	ea 2e       	mov	r14, r26
    28a2:	f1 2c       	mov	r15, r1
    28a4:	6b c0       	rjmp	.+214    	; 0x297c <fat_append_clusters+0x606>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    28a6:	ba 82       	std	Y+2, r11	; 0x02
    28a8:	a9 82       	std	Y+1, r10	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    28aa:	66 0c       	add	r6, r6
    28ac:	77 1c       	adc	r7, r7
    28ae:	88 1c       	adc	r8, r8
    28b0:	99 1c       	adc	r9, r9
    28b2:	b4 01       	movw	r22, r8
    28b4:	a3 01       	movw	r20, r6
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a0 e0       	ldi	r26, 0x00	; 0
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	2c a1       	ldd	r18, Y+36	; 0x24
    28c0:	26 0d       	add	r18, r6
    28c2:	31 e0       	ldi	r19, 0x01	; 1
    28c4:	26 15       	cp	r18, r6
    28c6:	08 f0       	brcs	.+2      	; 0x28ca <fat_append_clusters+0x554>
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	ed a1       	ldd	r30, Y+37	; 0x25
    28cc:	e5 0f       	add	r30, r21
    28ce:	11 e0       	ldi	r17, 0x01	; 1
    28d0:	e5 17       	cp	r30, r21
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <fat_append_clusters+0x560>
    28d4:	10 e0       	ldi	r17, 0x00	; 0
    28d6:	3e 0f       	add	r19, r30
    28d8:	f1 e0       	ldi	r31, 0x01	; 1
    28da:	3e 17       	cp	r19, r30
    28dc:	08 f0       	brcs	.+2      	; 0x28e0 <fat_append_clusters+0x56a>
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	1f 2b       	or	r17, r31
    28e2:	ee a1       	ldd	r30, Y+38	; 0x26
    28e4:	e6 0f       	add	r30, r22
    28e6:	01 e0       	ldi	r16, 0x01	; 1
    28e8:	e6 17       	cp	r30, r22
    28ea:	08 f0       	brcs	.+2      	; 0x28ee <fat_append_clusters+0x578>
    28ec:	00 e0       	ldi	r16, 0x00	; 0
    28ee:	91 2e       	mov	r9, r17
    28f0:	9e 0e       	add	r9, r30
    28f2:	f1 e0       	ldi	r31, 0x01	; 1
    28f4:	9e 16       	cp	r9, r30
    28f6:	08 f0       	brcs	.+2      	; 0x28fa <fat_append_clusters+0x584>
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	0f 2b       	or	r16, r31
    28fc:	ef a1       	ldd	r30, Y+39	; 0x27
    28fe:	e7 0f       	add	r30, r23
    2900:	f1 e0       	ldi	r31, 0x01	; 1
    2902:	e7 17       	cp	r30, r23
    2904:	08 f0       	brcs	.+2      	; 0x2908 <fat_append_clusters+0x592>
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	e0 2e       	mov	r14, r16
    290a:	ee 0e       	add	r14, r30
    290c:	11 e0       	ldi	r17, 0x01	; 1
    290e:	ee 16       	cp	r14, r30
    2910:	08 f0       	brcs	.+2      	; 0x2914 <fat_append_clusters+0x59e>
    2912:	10 e0       	ldi	r17, 0x00	; 0
    2914:	f1 2b       	or	r31, r17
    2916:	e1 e0       	ldi	r30, 0x01	; 1
    2918:	f8 a4       	ldd	r15, Y+40	; 0x28
    291a:	f8 16       	cp	r15, r24
    291c:	08 f0       	brcs	.+2      	; 0x2920 <fat_append_clusters+0x5aa>
    291e:	e0 e0       	ldi	r30, 0x00	; 0
    2920:	f8 a4       	ldd	r15, Y+40	; 0x28
    2922:	ff 0e       	add	r15, r31
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	08 a5       	ldd	r16, Y+40	; 0x28
    2928:	f0 16       	cp	r15, r16
    292a:	08 f0       	brcs	.+2      	; 0x292e <fat_append_clusters+0x5b8>
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	ef 2b       	or	r30, r31
    2930:	f1 e0       	ldi	r31, 0x01	; 1
    2932:	19 a5       	ldd	r17, Y+41	; 0x29
    2934:	19 17       	cp	r17, r25
    2936:	08 f0       	brcs	.+2      	; 0x293a <fat_append_clusters+0x5c4>
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	09 a5       	ldd	r16, Y+41	; 0x29
    293c:	0e 0f       	add	r16, r30
    293e:	e1 e0       	ldi	r30, 0x01	; 1
    2940:	19 a5       	ldd	r17, Y+41	; 0x29
    2942:	01 17       	cp	r16, r17
    2944:	08 f0       	brcs	.+2      	; 0x2948 <fat_append_clusters+0x5d2>
    2946:	e0 e0       	ldi	r30, 0x00	; 0
    2948:	fe 2b       	or	r31, r30
    294a:	11 e0       	ldi	r17, 0x01	; 1
    294c:	ea a5       	ldd	r30, Y+42	; 0x2a
    294e:	ea 17       	cp	r30, r26
    2950:	08 f0       	brcs	.+2      	; 0x2954 <fat_append_clusters+0x5de>
    2952:	10 e0       	ldi	r17, 0x00	; 0
    2954:	8a a5       	ldd	r24, Y+42	; 0x2a
    2956:	8f 0f       	add	r24, r31
    2958:	e1 e0       	ldi	r30, 0x01	; 1
    295a:	fa a5       	ldd	r31, Y+42	; 0x2a
    295c:	8f 17       	cp	r24, r31
    295e:	08 f0       	brcs	.+2      	; 0x2962 <fat_append_clusters+0x5ec>
    2960:	e0 e0       	ldi	r30, 0x00	; 0
    2962:	1e 2b       	or	r17, r30
    2964:	49 2d       	mov	r20, r9
    2966:	5e 2d       	mov	r21, r14
    2968:	6f 2d       	mov	r22, r15
    296a:	70 2f       	mov	r23, r16
    296c:	9b a5       	ldd	r25, Y+43	; 0x2b
    296e:	91 0f       	add	r25, r17
    2970:	8e 01       	movw	r16, r28
    2972:	0f 5f       	subi	r16, 0xFF	; 255
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	e2 e0       	ldi	r30, 0x02	; 2
    2978:	ee 2e       	mov	r14, r30
    297a:	f1 2c       	mov	r15, r1
    297c:	a8 8d       	ldd	r26, Y+24	; 0x18
    297e:	b9 8d       	ldd	r27, Y+25	; 0x19
    2980:	fd 01       	movw	r30, r26
    2982:	09 95       	icall
    2984:	88 23       	and	r24, r24
    2986:	49 f4       	brne	.+18     	; 0x299a <fat_append_clusters+0x624>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    2988:	8c 8d       	ldd	r24, Y+28	; 0x1c
    298a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    298c:	b6 01       	movw	r22, r12
    298e:	a5 01       	movw	r20, r10
    2990:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_free_clusters>

    return 0;
    2994:	aa 24       	eor	r10, r10
    2996:	bb 24       	eor	r11, r11
    2998:	65 01       	movw	r12, r10
}
    299a:	b5 01       	movw	r22, r10
    299c:	c6 01       	movw	r24, r12
    299e:	ad 96       	adiw	r28, 0x2d	; 45
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	df 90       	pop	r13
    29b8:	cf 90       	pop	r12
    29ba:	bf 90       	pop	r11
    29bc:	af 90       	pop	r10
    29be:	9f 90       	pop	r9
    29c0:	8f 90       	pop	r8
    29c2:	7f 90       	pop	r7
    29c4:	6f 90       	pop	r6
    29c6:	5f 90       	pop	r5
    29c8:	4f 90       	pop	r4
    29ca:	3f 90       	pop	r3
    29cc:	2f 90       	pop	r2
    29ce:	08 95       	ret

000029d0 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    29d0:	80 e1       	ldi	r24, 0x10	; 16
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	08 95       	ret

000029d6 <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    29d6:	fc 01       	movw	r30, r24
    if(fd)
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	11 f0       	breq	.+4      	; 0x29e0 <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    29dc:	11 82       	std	Z+1, r1	; 0x01
    29de:	10 82       	st	Z, r1
    29e0:	08 95       	ret

000029e2 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    29e2:	2f 92       	push	r2
    29e4:	3f 92       	push	r3
    29e6:	4f 92       	push	r4
    29e8:	5f 92       	push	r5
    29ea:	6f 92       	push	r6
    29ec:	7f 92       	push	r7
    29ee:	8f 92       	push	r8
    29f0:	9f 92       	push	r9
    29f2:	af 92       	push	r10
    29f4:	bf 92       	push	r11
    29f6:	cf 92       	push	r12
    29f8:	df 92       	push	r13
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	68 97       	sbiw	r28, 0x18	; 24
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	98 8f       	std	Y+24, r25	; 0x18
    2a18:	8f 8b       	std	Y+23, r24	; 0x17
    2a1a:	7e 87       	std	Y+14, r23	; 0x0e
    2a1c:	6d 87       	std	Y+13, r22	; 0x0d
    2a1e:	58 8b       	std	Y+16, r21	; 0x10
    2a20:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <fat_read_file+0x46>
    2a26:	1e c3       	rjmp	.+1596   	; 0x3064 <fat_read_file+0x682>
    2a28:	67 2b       	or	r22, r23
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <fat_read_file+0x4c>
    2a2c:	1b c3       	rjmp	.+1590   	; 0x3064 <fat_read_file+0x682>
    2a2e:	41 15       	cp	r20, r1
    2a30:	51 05       	cpc	r21, r1
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <fat_read_file+0x54>
    2a34:	17 c3       	rjmp	.+1582   	; 0x3064 <fat_read_file+0x682>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    2a36:	dc 01       	movw	r26, r24
    2a38:	d3 96       	adiw	r26, 0x33	; 51
    2a3a:	ac 90       	ld	r10, X
    2a3c:	d3 97       	sbiw	r26, 0x33	; 51
    2a3e:	d4 96       	adiw	r26, 0x34	; 52
    2a40:	bc 90       	ld	r11, X
    2a42:	d4 97       	sbiw	r26, 0x34	; 52
    2a44:	d5 96       	adiw	r26, 0x35	; 53
    2a46:	cc 90       	ld	r12, X
    2a48:	d5 97       	sbiw	r26, 0x35	; 53
    2a4a:	d6 96       	adiw	r26, 0x36	; 54
    2a4c:	dc 90       	ld	r13, X
    2a4e:	d6 97       	sbiw	r26, 0x36	; 54
    2a50:	d7 96       	adiw	r26, 0x37	; 55
    2a52:	ec 90       	ld	r14, X
    2a54:	d7 97       	sbiw	r26, 0x37	; 55
    2a56:	d8 96       	adiw	r26, 0x38	; 56
    2a58:	fc 90       	ld	r15, X
    2a5a:	d8 97       	sbiw	r26, 0x38	; 56
    2a5c:	d9 96       	adiw	r26, 0x39	; 57
    2a5e:	0c 91       	ld	r16, X
    2a60:	d9 97       	sbiw	r26, 0x39	; 57
    2a62:	da 96       	adiw	r26, 0x3a	; 58
    2a64:	1c 91       	ld	r17, X
    2a66:	da 97       	sbiw	r26, 0x3a	; 58
    2a68:	97 96       	adiw	r26, 0x27	; 39
    2a6a:	2d 90       	ld	r2, X+
    2a6c:	3d 90       	ld	r3, X+
    2a6e:	4d 90       	ld	r4, X+
    2a70:	5c 90       	ld	r5, X
    2a72:	9a 97       	sbiw	r26, 0x2a	; 42
    2a74:	9a 01       	movw	r18, r20
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	b2 2f       	mov	r27, r18
    2a84:	ba 0d       	add	r27, r10
    2a86:	ba 8b       	std	Y+18, r27	; 0x12
    2a88:	f1 e0       	ldi	r31, 0x01	; 1
    2a8a:	b2 17       	cp	r27, r18
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <fat_read_file+0xae>
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	e3 2f       	mov	r30, r19
    2a92:	eb 0d       	add	r30, r11
    2a94:	99 24       	eor	r9, r9
    2a96:	93 94       	inc	r9
    2a98:	e3 17       	cp	r30, r19
    2a9a:	08 f0       	brcs	.+2      	; 0x2a9e <fat_read_file+0xbc>
    2a9c:	99 24       	eor	r9, r9
    2a9e:	fe 0f       	add	r31, r30
    2aa0:	f9 8b       	std	Y+17, r31	; 0x11
    2aa2:	f1 e0       	ldi	r31, 0x01	; 1
    2aa4:	a9 89       	ldd	r26, Y+17	; 0x11
    2aa6:	ae 17       	cp	r26, r30
    2aa8:	08 f0       	brcs	.+2      	; 0x2aac <fat_read_file+0xca>
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	9f 2a       	or	r9, r31
    2aae:	e4 2f       	mov	r30, r20
    2ab0:	ec 0d       	add	r30, r12
    2ab2:	b1 e0       	ldi	r27, 0x01	; 1
    2ab4:	e4 17       	cp	r30, r20
    2ab6:	08 f0       	brcs	.+2      	; 0x2aba <fat_read_file+0xd8>
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	69 2c       	mov	r6, r9
    2abc:	6e 0e       	add	r6, r30
    2abe:	f1 e0       	ldi	r31, 0x01	; 1
    2ac0:	6e 16       	cp	r6, r30
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <fat_read_file+0xe4>
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	bf 2b       	or	r27, r31
    2ac8:	e5 2f       	mov	r30, r21
    2aca:	ed 0d       	add	r30, r13
    2acc:	a1 e0       	ldi	r26, 0x01	; 1
    2ace:	e5 17       	cp	r30, r21
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <fat_read_file+0xf2>
    2ad2:	a0 e0       	ldi	r26, 0x00	; 0
    2ad4:	7b 2e       	mov	r7, r27
    2ad6:	7e 0e       	add	r7, r30
    2ad8:	f1 e0       	ldi	r31, 0x01	; 1
    2ada:	7e 16       	cp	r7, r30
    2adc:	08 f0       	brcs	.+2      	; 0x2ae0 <fat_read_file+0xfe>
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	af 2b       	or	r26, r31
    2ae2:	e6 2f       	mov	r30, r22
    2ae4:	ee 0d       	add	r30, r14
    2ae6:	b1 e0       	ldi	r27, 0x01	; 1
    2ae8:	e6 17       	cp	r30, r22
    2aea:	08 f0       	brcs	.+2      	; 0x2aee <fat_read_file+0x10c>
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	8a 2e       	mov	r8, r26
    2af0:	8e 0e       	add	r8, r30
    2af2:	f1 e0       	ldi	r31, 0x01	; 1
    2af4:	8e 16       	cp	r8, r30
    2af6:	08 f0       	brcs	.+2      	; 0x2afa <fat_read_file+0x118>
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	bf 2b       	or	r27, r31
    2afc:	e7 2f       	mov	r30, r23
    2afe:	ef 0d       	add	r30, r15
    2b00:	a1 e0       	ldi	r26, 0x01	; 1
    2b02:	e7 17       	cp	r30, r23
    2b04:	08 f0       	brcs	.+2      	; 0x2b08 <fat_read_file+0x126>
    2b06:	a0 e0       	ldi	r26, 0x00	; 0
    2b08:	9b 2e       	mov	r9, r27
    2b0a:	9e 0e       	add	r9, r30
    2b0c:	f1 e0       	ldi	r31, 0x01	; 1
    2b0e:	9e 16       	cp	r9, r30
    2b10:	08 f0       	brcs	.+2      	; 0x2b14 <fat_read_file+0x132>
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	af 2b       	or	r26, r31
    2b16:	e8 2f       	mov	r30, r24
    2b18:	e0 0f       	add	r30, r16
    2b1a:	b1 e0       	ldi	r27, 0x01	; 1
    2b1c:	e8 17       	cp	r30, r24
    2b1e:	08 f0       	brcs	.+2      	; 0x2b22 <fat_read_file+0x140>
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	ae 0f       	add	r26, r30
    2b24:	f1 e0       	ldi	r31, 0x01	; 1
    2b26:	ae 17       	cp	r26, r30
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <fat_read_file+0x14a>
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	eb 2f       	mov	r30, r27
    2b2e:	ef 2b       	or	r30, r31
    2b30:	89 2f       	mov	r24, r25
    2b32:	81 0f       	add	r24, r17
    2b34:	e8 0f       	add	r30, r24
    2b36:	a2 01       	movw	r20, r4
    2b38:	91 01       	movw	r18, r2
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9e 17       	cp	r25, r30
    2b44:	f0 f0       	brcs	.+60     	; 0x2b82 <fat_read_file+0x1a0>
    2b46:	e9 17       	cp	r30, r25
    2b48:	21 f5       	brne	.+72     	; 0x2b92 <fat_read_file+0x1b0>
    2b4a:	8a 17       	cp	r24, r26
    2b4c:	d0 f0       	brcs	.+52     	; 0x2b82 <fat_read_file+0x1a0>
    2b4e:	a8 17       	cp	r26, r24
    2b50:	01 f5       	brne	.+64     	; 0x2b92 <fat_read_file+0x1b0>
    2b52:	79 15       	cp	r23, r9
    2b54:	b0 f0       	brcs	.+44     	; 0x2b82 <fat_read_file+0x1a0>
    2b56:	97 16       	cp	r9, r23
    2b58:	e1 f4       	brne	.+56     	; 0x2b92 <fat_read_file+0x1b0>
    2b5a:	68 15       	cp	r22, r8
    2b5c:	90 f0       	brcs	.+36     	; 0x2b82 <fat_read_file+0x1a0>
    2b5e:	86 16       	cp	r8, r22
    2b60:	c1 f4       	brne	.+48     	; 0x2b92 <fat_read_file+0x1b0>
    2b62:	57 15       	cp	r21, r7
    2b64:	70 f0       	brcs	.+28     	; 0x2b82 <fat_read_file+0x1a0>
    2b66:	75 16       	cp	r7, r21
    2b68:	a1 f4       	brne	.+40     	; 0x2b92 <fat_read_file+0x1b0>
    2b6a:	46 15       	cp	r20, r6
    2b6c:	50 f0       	brcs	.+20     	; 0x2b82 <fat_read_file+0x1a0>
    2b6e:	64 16       	cp	r6, r20
    2b70:	81 f4       	brne	.+32     	; 0x2b92 <fat_read_file+0x1b0>
    2b72:	b9 89       	ldd	r27, Y+17	; 0x11
    2b74:	3b 17       	cp	r19, r27
    2b76:	28 f0       	brcs	.+10     	; 0x2b82 <fat_read_file+0x1a0>
    2b78:	b3 17       	cp	r27, r19
    2b7a:	59 f4       	brne	.+22     	; 0x2b92 <fat_read_file+0x1b0>
    2b7c:	ea 89       	ldd	r30, Y+18	; 0x12
    2b7e:	2e 16       	cp	r2, r30
    2b80:	40 f4       	brcc	.+16     	; 0x2b92 <fat_read_file+0x1b0>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    2b82:	91 01       	movw	r18, r2
    2b84:	2a 19       	sub	r18, r10
    2b86:	3b 09       	sbc	r19, r11
    2b88:	38 8b       	std	Y+16, r19	; 0x10
    2b8a:	2f 87       	std	Y+15, r18	; 0x0f
    if(buffer_len == 0)
    2b8c:	23 2b       	or	r18, r19
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <fat_read_file+0x1b0>
    2b90:	6c c2       	rjmp	.+1240   	; 0x306a <fat_read_file+0x688>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    2b92:	af 89       	ldd	r26, Y+23	; 0x17
    2b94:	b8 8d       	ldd	r27, Y+24	; 0x18
    2b96:	ed 91       	ld	r30, X+
    2b98:	fc 91       	ld	r31, X
    2b9a:	11 97       	sbiw	r26, 0x01	; 1
    2b9c:	20 8d       	ldd	r18, Z+24	; 0x18
    2b9e:	31 8d       	ldd	r19, Z+25	; 0x19
    2ba0:	3c 87       	std	Y+12, r19	; 0x0c
    2ba2:	2b 87       	std	Y+11, r18	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    2ba4:	db 96       	adiw	r26, 0x3b	; 59
    2ba6:	8d 91       	ld	r24, X+
    2ba8:	9d 91       	ld	r25, X+
    2baa:	0d 90       	ld	r0, X+
    2bac:	bc 91       	ld	r27, X
    2bae:	a0 2d       	mov	r26, r0
    2bb0:	8f 83       	std	Y+7, r24	; 0x07
    2bb2:	98 87       	std	Y+8, r25	; 0x08
    2bb4:	a9 87       	std	Y+9, r26	; 0x09
    2bb6:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	a1 05       	cpc	r26, r1
    2bbc:	b1 05       	cpc	r27, r1
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <fat_read_file+0x1e0>
    2bc0:	59 c0       	rjmp	.+178    	; 0x2c74 <fat_read_file+0x292>
    {
        cluster_num = fd->dir_entry.cluster;
    2bc2:	af 89       	ldd	r26, Y+23	; 0x17
    2bc4:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bc6:	93 96       	adiw	r26, 0x23	; 35
    2bc8:	2d 91       	ld	r18, X+
    2bca:	3d 91       	ld	r19, X+
    2bcc:	4d 91       	ld	r20, X+
    2bce:	5c 91       	ld	r21, X
    2bd0:	96 97       	sbiw	r26, 0x26	; 38
    2bd2:	2f 83       	std	Y+7, r18	; 0x07
    2bd4:	38 87       	std	Y+8, r19	; 0x08
    2bd6:	49 87       	std	Y+9, r20	; 0x09
    2bd8:	5a 87       	std	Y+10, r21	; 0x0a
        
        if(!cluster_num)
    2bda:	21 15       	cp	r18, r1
    2bdc:	31 05       	cpc	r19, r1
    2bde:	41 05       	cpc	r20, r1
    2be0:	51 05       	cpc	r21, r1
    2be2:	59 f4       	brne	.+22     	; 0x2bfa <fat_read_file+0x218>
        {
            if(!fd->pos)
    2be4:	8a 2d       	mov	r24, r10
    2be6:	8b 29       	or	r24, r11
    2be8:	8c 29       	or	r24, r12
    2bea:	8d 29       	or	r24, r13
    2bec:	8e 29       	or	r24, r14
    2bee:	8f 29       	or	r24, r15
    2bf0:	80 2b       	or	r24, r16
    2bf2:	81 2b       	or	r24, r17
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <fat_read_file+0x216>
    2bf6:	39 c2       	rjmp	.+1138   	; 0x306a <fat_read_file+0x688>
    2bf8:	35 c2       	rjmp	.+1130   	; 0x3064 <fat_read_file+0x682>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    2bfa:	8a 2d       	mov	r24, r10
    2bfc:	8b 29       	or	r24, r11
    2bfe:	8c 29       	or	r24, r12
    2c00:	8d 29       	or	r24, r13
    2c02:	8e 29       	or	r24, r14
    2c04:	8f 29       	or	r24, r15
    2c06:	80 2b       	or	r24, r16
    2c08:	81 2b       	or	r24, r17
    2c0a:	a1 f1       	breq	.+104    	; 0x2c74 <fat_read_file+0x292>
        {
            uint32_t pos = fd->pos;
    2c0c:	35 01       	movw	r6, r10
    2c0e:	46 01       	movw	r8, r12
            while(pos >= cluster_size)
    2c10:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c12:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c14:	1f 01       	movw	r2, r30
    2c16:	44 24       	eor	r4, r4
    2c18:	55 24       	eor	r5, r5
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    2c1a:	22 27       	eor	r18, r18
    2c1c:	33 27       	eor	r19, r19
    2c1e:	a9 01       	movw	r20, r18
    2c20:	22 19       	sub	r18, r2
    2c22:	33 09       	sbc	r19, r3
    2c24:	44 09       	sbc	r20, r4
    2c26:	55 09       	sbc	r21, r5
    2c28:	2b 8b       	std	Y+19, r18	; 0x13
    2c2a:	3c 8b       	std	Y+20, r19	; 0x14
    2c2c:	4d 8b       	std	Y+21, r20	; 0x15
    2c2e:	5e 8b       	std	Y+22, r21	; 0x16
    2c30:	1c c0       	rjmp	.+56     	; 0x2c6a <fat_read_file+0x288>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    2c32:	af 89       	ldd	r26, Y+23	; 0x17
    2c34:	b8 8d       	ldd	r27, Y+24	; 0x18
    2c36:	8d 91       	ld	r24, X+
    2c38:	9c 91       	ld	r25, X
    2c3a:	4f 81       	ldd	r20, Y+7	; 0x07
    2c3c:	58 85       	ldd	r21, Y+8	; 0x08
    2c3e:	69 85       	ldd	r22, Y+9	; 0x09
    2c40:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c42:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
    2c46:	6f 83       	std	Y+7, r22	; 0x07
    2c48:	78 87       	std	Y+8, r23	; 0x08
    2c4a:	89 87       	std	Y+9, r24	; 0x09
    2c4c:	9a 87       	std	Y+10, r25	; 0x0a
                if(!cluster_num)
    2c4e:	61 15       	cp	r22, r1
    2c50:	71 05       	cpc	r23, r1
    2c52:	81 05       	cpc	r24, r1
    2c54:	91 05       	cpc	r25, r1
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <fat_read_file+0x278>
    2c58:	05 c2       	rjmp	.+1034   	; 0x3064 <fat_read_file+0x682>
    2c5a:	2b 89       	ldd	r18, Y+19	; 0x13
    2c5c:	3c 89       	ldd	r19, Y+20	; 0x14
    2c5e:	4d 89       	ldd	r20, Y+21	; 0x15
    2c60:	5e 89       	ldd	r21, Y+22	; 0x16
    2c62:	62 0e       	add	r6, r18
    2c64:	73 1e       	adc	r7, r19
    2c66:	84 1e       	adc	r8, r20
    2c68:	95 1e       	adc	r9, r21
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    2c6a:	62 14       	cp	r6, r2
    2c6c:	73 04       	cpc	r7, r3
    2c6e:	84 04       	cpc	r8, r4
    2c70:	95 04       	cpc	r9, r5
    2c72:	f8 f6       	brcc	.-66     	; 0x2c32 <fat_read_file+0x250>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    2c74:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c76:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c78:	41 50       	subi	r20, 0x01	; 1
    2c7a:	50 40       	sbci	r21, 0x00	; 0
    2c7c:	5c 87       	std	Y+12, r21	; 0x0c
    2c7e:	4b 87       	std	Y+11, r20	; 0x0b
    2c80:	4a 21       	and	r20, r10
    2c82:	5b 21       	and	r21, r11
    2c84:	5c 83       	std	Y+4, r21	; 0x04
    2c86:	4b 83       	std	Y+3, r20	; 0x03
    2c88:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	9c 87       	std	Y+12, r25	; 0x0c
    2c90:	8b 87       	std	Y+11, r24	; 0x0b
    2c92:	af 85       	ldd	r26, Y+15	; 0x0f
    2c94:	b8 89       	ldd	r27, Y+16	; 0x10
    2c96:	be 83       	std	Y+6, r27	; 0x06
    2c98:	ad 83       	std	Y+5, r26	; 0x05
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2c9a:	ef 89       	ldd	r30, Y+23	; 0x17
    2c9c:	f8 8d       	ldd	r31, Y+24	; 0x18
    2c9e:	01 90       	ld	r0, Z+
    2ca0:	f0 81       	ld	r31, Z
    2ca2:	e0 2d       	mov	r30, r0
    2ca4:	fa 83       	std	Y+2, r31	; 0x02
    2ca6:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2ca8:	30 97       	sbiw	r30, 0x00	; 0
    2caa:	09 f4       	brne	.+2      	; 0x2cae <fat_read_file+0x2cc>
    2cac:	8e c0       	rjmp	.+284    	; 0x2dca <fat_read_file+0x3e8>
    2cae:	2f 81       	ldd	r18, Y+7	; 0x07
    2cb0:	38 85       	ldd	r19, Y+8	; 0x08
    2cb2:	49 85       	ldd	r20, Y+9	; 0x09
    2cb4:	5a 85       	ldd	r21, Y+10	; 0x0a
    2cb6:	22 30       	cpi	r18, 0x02	; 2
    2cb8:	31 05       	cpc	r19, r1
    2cba:	41 05       	cpc	r20, r1
    2cbc:	51 05       	cpc	r21, r1
    2cbe:	08 f4       	brcc	.+2      	; 0x2cc2 <fat_read_file+0x2e0>
    2cc0:	84 c0       	rjmp	.+264    	; 0x2dca <fat_read_file+0x3e8>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2cc2:	22 50       	subi	r18, 0x02	; 2
    2cc4:	30 40       	sbci	r19, 0x00	; 0
    2cc6:	40 40       	sbci	r20, 0x00	; 0
    2cc8:	50 40       	sbci	r21, 0x00	; 0
    2cca:	59 01       	movw	r10, r18
    2ccc:	6a 01       	movw	r12, r20
    2cce:	2e 5f       	subi	r18, 0xFE	; 254
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    2cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2cd6:	2f 83       	std	Y+7, r18	; 0x07
    2cd8:	38 87       	std	Y+8, r19	; 0x08
    2cda:	49 87       	std	Y+9, r20	; 0x09
    2cdc:	5a 87       	std	Y+10, r21	; 0x0a
    2cde:	20 8c       	ldd	r2, Z+24	; 0x18
    2ce0:	31 8c       	ldd	r3, Z+25	; 0x19
    2ce2:	95 01       	movw	r18, r10
    2ce4:	a6 01       	movw	r20, r12
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	51 01       	movw	r10, r2
    2cf0:	cc 24       	eor	r12, r12
    2cf2:	dd 24       	eor	r13, r13
    2cf4:	ee 24       	eor	r14, r14
    2cf6:	ff 24       	eor	r15, r15
    2cf8:	00 e0       	ldi	r16, 0x00	; 0
    2cfa:	10 e0       	ldi	r17, 0x00	; 0
    2cfc:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    2d00:	e9 81       	ldd	r30, Y+1	; 0x01
    2d02:	fa 81       	ldd	r31, Y+2	; 0x02
    2d04:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d06:	f3 8c       	ldd	r15, Z+27	; 0x1b
    2d08:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2d0a:	05 8d       	ldd	r16, Z+29	; 0x1d
    2d0c:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2d0e:	d7 8c       	ldd	r13, Z+31	; 0x1f
    2d10:	c0 a0       	ldd	r12, Z+32	; 0x20
    2d12:	11 a1       	ldd	r17, Z+33	; 0x21
    2d14:	a2 0f       	add	r26, r18
    2d16:	f1 e0       	ldi	r31, 0x01	; 1
    2d18:	a2 17       	cp	r26, r18
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <fat_read_file+0x33c>
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	23 2f       	mov	r18, r19
    2d20:	2f 0d       	add	r18, r15
    2d22:	e1 e0       	ldi	r30, 0x01	; 1
    2d24:	23 17       	cp	r18, r19
    2d26:	08 f0       	brcs	.+2      	; 0x2d2a <fat_read_file+0x348>
    2d28:	e0 e0       	ldi	r30, 0x00	; 0
    2d2a:	ff 2e       	mov	r15, r31
    2d2c:	f2 0e       	add	r15, r18
    2d2e:	31 e0       	ldi	r19, 0x01	; 1
    2d30:	f2 16       	cp	r15, r18
    2d32:	08 f0       	brcs	.+2      	; 0x2d36 <fat_read_file+0x354>
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	e3 2b       	or	r30, r19
    2d38:	24 2f       	mov	r18, r20
    2d3a:	2b 0f       	add	r18, r27
    2d3c:	f1 e0       	ldi	r31, 0x01	; 1
    2d3e:	24 17       	cp	r18, r20
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <fat_read_file+0x362>
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	be 2f       	mov	r27, r30
    2d46:	b2 0f       	add	r27, r18
    2d48:	31 e0       	ldi	r19, 0x01	; 1
    2d4a:	b2 17       	cp	r27, r18
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <fat_read_file+0x36e>
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	f3 2b       	or	r31, r19
    2d52:	25 2f       	mov	r18, r21
    2d54:	20 0f       	add	r18, r16
    2d56:	41 e0       	ldi	r20, 0x01	; 1
    2d58:	25 17       	cp	r18, r21
    2d5a:	08 f0       	brcs	.+2      	; 0x2d5e <fat_read_file+0x37c>
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	f2 0f       	add	r31, r18
    2d60:	31 e0       	ldi	r19, 0x01	; 1
    2d62:	f2 17       	cp	r31, r18
    2d64:	08 f0       	brcs	.+2      	; 0x2d68 <fat_read_file+0x386>
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	43 2b       	or	r20, r19
    2d6a:	26 2f       	mov	r18, r22
    2d6c:	2e 0d       	add	r18, r14
    2d6e:	51 e0       	ldi	r21, 0x01	; 1
    2d70:	26 17       	cp	r18, r22
    2d72:	08 f0       	brcs	.+2      	; 0x2d76 <fat_read_file+0x394>
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	e4 2f       	mov	r30, r20
    2d78:	e2 0f       	add	r30, r18
    2d7a:	31 e0       	ldi	r19, 0x01	; 1
    2d7c:	e2 17       	cp	r30, r18
    2d7e:	08 f0       	brcs	.+2      	; 0x2d82 <fat_read_file+0x3a0>
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	53 2b       	or	r21, r19
    2d84:	27 2f       	mov	r18, r23
    2d86:	2d 0d       	add	r18, r13
    2d88:	41 e0       	ldi	r20, 0x01	; 1
    2d8a:	27 17       	cp	r18, r23
    2d8c:	08 f0       	brcs	.+2      	; 0x2d90 <fat_read_file+0x3ae>
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	52 0f       	add	r21, r18
    2d92:	31 e0       	ldi	r19, 0x01	; 1
    2d94:	52 17       	cp	r21, r18
    2d96:	08 f0       	brcs	.+2      	; 0x2d9a <fat_read_file+0x3b8>
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	43 2b       	or	r20, r19
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	2c 0d       	add	r18, r12
    2da0:	31 e0       	ldi	r19, 0x01	; 1
    2da2:	28 17       	cp	r18, r24
    2da4:	08 f0       	brcs	.+2      	; 0x2da8 <fat_read_file+0x3c6>
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	42 0f       	add	r20, r18
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	42 17       	cp	r20, r18
    2dae:	08 f0       	brcs	.+2      	; 0x2db2 <fat_read_file+0x3d0>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	73 2e       	mov	r7, r19
    2db4:	78 2a       	or	r7, r24
    2db6:	19 0f       	add	r17, r25
    2db8:	2a 2f       	mov	r18, r26
    2dba:	9f 2d       	mov	r25, r15
    2dbc:	6b 2f       	mov	r22, r27
    2dbe:	7f 2f       	mov	r23, r31
    2dc0:	ae 2f       	mov	r26, r30
    2dc2:	b5 2f       	mov	r27, r21
    2dc4:	34 2e       	mov	r3, r20
    2dc6:	71 0e       	add	r7, r17
    2dc8:	08 c0       	rjmp	.+16     	; 0x2dda <fat_read_file+0x3f8>
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	a0 e0       	ldi	r26, 0x00	; 0
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	33 24       	eor	r3, r3
    2dd8:	77 24       	eor	r7, r7
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    2dda:	8b 84       	ldd	r8, Y+11	; 0x0b
    2ddc:	9c 84       	ldd	r9, Y+12	; 0x0c
    2dde:	4b 81       	ldd	r20, Y+3	; 0x03
    2de0:	5c 81       	ldd	r21, Y+4	; 0x04
    2de2:	84 1a       	sub	r8, r20
    2de4:	95 0a       	sbc	r9, r21
    2de6:	ed 81       	ldd	r30, Y+5	; 0x05
    2de8:	fe 81       	ldd	r31, Y+6	; 0x06
    2dea:	e8 15       	cp	r30, r8
    2dec:	f9 05       	cpc	r31, r9
    2dee:	08 f4       	brcc	.+2      	; 0x2df2 <fat_read_file+0x410>
    2df0:	4f 01       	movw	r8, r30
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    2df2:	e9 81       	ldd	r30, Y+1	; 0x01
    2df4:	fa 81       	ldd	r31, Y+2	; 0x02
    2df6:	40 80       	ld	r4, Z
    2df8:	51 80       	ldd	r5, Z+1	; 0x01
    2dfa:	4b 81       	ldd	r20, Y+3	; 0x03
    2dfc:	5c 81       	ldd	r21, Y+4	; 0x04
    2dfe:	5a 01       	movw	r10, r20
    2e00:	cc 24       	eor	r12, r12
    2e02:	dd 24       	eor	r13, r13
    2e04:	ee 24       	eor	r14, r14
    2e06:	ff 24       	eor	r15, r15
    2e08:	87 01       	movw	r16, r14
    2e0a:	62 2e       	mov	r6, r18
    2e0c:	64 0e       	add	r6, r20
    2e0e:	31 e0       	ldi	r19, 0x01	; 1
    2e10:	62 16       	cp	r6, r18
    2e12:	08 f0       	brcs	.+2      	; 0x2e16 <fat_read_file+0x434>
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	89 2f       	mov	r24, r25
    2e18:	8b 0d       	add	r24, r11
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	89 17       	cp	r24, r25
    2e1e:	08 f0       	brcs	.+2      	; 0x2e22 <fat_read_file+0x440>
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	38 0f       	add	r19, r24
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	38 17       	cp	r19, r24
    2e28:	08 f0       	brcs	.+2      	; 0x2e2c <fat_read_file+0x44a>
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	49 2b       	or	r20, r25
    2e2e:	86 2f       	mov	r24, r22
    2e30:	8c 0d       	add	r24, r12
    2e32:	51 e0       	ldi	r21, 0x01	; 1
    2e34:	86 17       	cp	r24, r22
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <fat_read_file+0x458>
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	48 0f       	add	r20, r24
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	48 17       	cp	r20, r24
    2e40:	08 f0       	brcs	.+2      	; 0x2e44 <fat_read_file+0x462>
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	59 2b       	or	r21, r25
    2e46:	87 2f       	mov	r24, r23
    2e48:	8d 0d       	add	r24, r13
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
    2e4c:	87 17       	cp	r24, r23
    2e4e:	08 f0       	brcs	.+2      	; 0x2e52 <fat_read_file+0x470>
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	58 0f       	add	r21, r24
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	58 17       	cp	r21, r24
    2e58:	08 f0       	brcs	.+2      	; 0x2e5c <fat_read_file+0x47a>
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	69 2b       	or	r22, r25
    2e5e:	8a 2f       	mov	r24, r26
    2e60:	8e 0d       	add	r24, r14
    2e62:	71 e0       	ldi	r23, 0x01	; 1
    2e64:	8a 17       	cp	r24, r26
    2e66:	08 f0       	brcs	.+2      	; 0x2e6a <fat_read_file+0x488>
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	68 0f       	add	r22, r24
    2e6c:	91 e0       	ldi	r25, 0x01	; 1
    2e6e:	68 17       	cp	r22, r24
    2e70:	08 f0       	brcs	.+2      	; 0x2e74 <fat_read_file+0x492>
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	79 2b       	or	r23, r25
    2e76:	9b 2f       	mov	r25, r27
    2e78:	9f 0d       	add	r25, r15
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	9b 17       	cp	r25, r27
    2e7e:	08 f0       	brcs	.+2      	; 0x2e82 <fat_read_file+0x4a0>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	79 0f       	add	r23, r25
    2e84:	a1 e0       	ldi	r26, 0x01	; 1
    2e86:	79 17       	cp	r23, r25
    2e88:	08 f0       	brcs	.+2      	; 0x2e8c <fat_read_file+0x4aa>
    2e8a:	a0 e0       	ldi	r26, 0x00	; 0
    2e8c:	8a 2b       	or	r24, r26
    2e8e:	a3 2d       	mov	r26, r3
    2e90:	a0 0f       	add	r26, r16
    2e92:	91 e0       	ldi	r25, 0x01	; 1
    2e94:	a3 15       	cp	r26, r3
    2e96:	08 f0       	brcs	.+2      	; 0x2e9a <fat_read_file+0x4b8>
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	8a 0f       	add	r24, r26
    2e9c:	b1 e0       	ldi	r27, 0x01	; 1
    2e9e:	8a 17       	cp	r24, r26
    2ea0:	08 f0       	brcs	.+2      	; 0x2ea4 <fat_read_file+0x4c2>
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	9b 2b       	or	r25, r27
    2ea6:	71 0e       	add	r7, r17
    2ea8:	d2 01       	movw	r26, r4
    2eaa:	ed 91       	ld	r30, X+
    2eac:	fc 91       	ld	r31, X
    2eae:	26 2d       	mov	r18, r6
    2eb0:	97 0d       	add	r25, r7
    2eb2:	0d 85       	ldd	r16, Y+13	; 0x0d
    2eb4:	1e 85       	ldd	r17, Y+14	; 0x0e
    2eb6:	74 01       	movw	r14, r8
    2eb8:	09 95       	icall
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <fat_read_file+0x4de>
    2ebe:	af c0       	rjmp	.+350    	; 0x301e <fat_read_file+0x63c>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    2ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec4:	28 19       	sub	r18, r8
    2ec6:	39 09       	sbc	r19, r9
    2ec8:	3e 83       	std	Y+6, r19	; 0x06
    2eca:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += copy_length;
    2ecc:	94 01       	movw	r18, r8
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	70 e0       	ldi	r23, 0x00	; 0
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	af 89       	ldd	r26, Y+23	; 0x17
    2edc:	b8 8d       	ldd	r27, Y+24	; 0x18
    2ede:	d3 96       	adiw	r26, 0x33	; 51
    2ee0:	1c 91       	ld	r17, X
    2ee2:	d3 97       	sbiw	r26, 0x33	; 51
    2ee4:	d4 96       	adiw	r26, 0x34	; 52
    2ee6:	dc 90       	ld	r13, X
    2ee8:	d4 97       	sbiw	r26, 0x34	; 52
    2eea:	d5 96       	adiw	r26, 0x35	; 53
    2eec:	bc 91       	ld	r27, X
    2eee:	ef 89       	ldd	r30, Y+23	; 0x17
    2ef0:	f8 8d       	ldd	r31, Y+24	; 0x18
    2ef2:	06 a9       	ldd	r16, Z+54	; 0x36
    2ef4:	e7 a8       	ldd	r14, Z+55	; 0x37
    2ef6:	a0 ac       	ldd	r10, Z+56	; 0x38
    2ef8:	71 ac       	ldd	r7, Z+57	; 0x39
    2efa:	f2 ac       	ldd	r15, Z+58	; 0x3a
    2efc:	18 0d       	add	r17, r8
    2efe:	f1 e0       	ldi	r31, 0x01	; 1
    2f00:	18 15       	cp	r17, r8
    2f02:	08 f0       	brcs	.+2      	; 0x2f06 <fat_read_file+0x524>
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	ed 2d       	mov	r30, r13
    2f08:	e3 0f       	add	r30, r19
    2f0a:	a1 e0       	ldi	r26, 0x01	; 1
    2f0c:	e3 17       	cp	r30, r19
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <fat_read_file+0x530>
    2f10:	a0 e0       	ldi	r26, 0x00	; 0
    2f12:	bf 2e       	mov	r11, r31
    2f14:	be 0e       	add	r11, r30
    2f16:	f1 e0       	ldi	r31, 0x01	; 1
    2f18:	be 16       	cp	r11, r30
    2f1a:	08 f0       	brcs	.+2      	; 0x2f1e <fat_read_file+0x53c>
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	af 2b       	or	r26, r31
    2f20:	e4 2f       	mov	r30, r20
    2f22:	eb 0f       	add	r30, r27
    2f24:	b1 e0       	ldi	r27, 0x01	; 1
    2f26:	e4 17       	cp	r30, r20
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <fat_read_file+0x54a>
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	ca 2e       	mov	r12, r26
    2f2e:	ce 0e       	add	r12, r30
    2f30:	f1 e0       	ldi	r31, 0x01	; 1
    2f32:	ce 16       	cp	r12, r30
    2f34:	08 f0       	brcs	.+2      	; 0x2f38 <fat_read_file+0x556>
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	bf 2b       	or	r27, r31
    2f3a:	e5 2f       	mov	r30, r21
    2f3c:	e0 0f       	add	r30, r16
    2f3e:	a1 e0       	ldi	r26, 0x01	; 1
    2f40:	e5 17       	cp	r30, r21
    2f42:	08 f0       	brcs	.+2      	; 0x2f46 <fat_read_file+0x564>
    2f44:	a0 e0       	ldi	r26, 0x00	; 0
    2f46:	db 2e       	mov	r13, r27
    2f48:	de 0e       	add	r13, r30
    2f4a:	f1 e0       	ldi	r31, 0x01	; 1
    2f4c:	de 16       	cp	r13, r30
    2f4e:	08 f0       	brcs	.+2      	; 0x2f52 <fat_read_file+0x570>
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	af 2b       	or	r26, r31
    2f54:	e6 2f       	mov	r30, r22
    2f56:	ee 0d       	add	r30, r14
    2f58:	b1 e0       	ldi	r27, 0x01	; 1
    2f5a:	e6 17       	cp	r30, r22
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <fat_read_file+0x57e>
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	ea 2e       	mov	r14, r26
    2f62:	ee 0e       	add	r14, r30
    2f64:	f1 e0       	ldi	r31, 0x01	; 1
    2f66:	ee 16       	cp	r14, r30
    2f68:	08 f0       	brcs	.+2      	; 0x2f6c <fat_read_file+0x58a>
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	bf 2b       	or	r27, r31
    2f6e:	e7 2f       	mov	r30, r23
    2f70:	ea 0d       	add	r30, r10
    2f72:	a1 e0       	ldi	r26, 0x01	; 1
    2f74:	e7 17       	cp	r30, r23
    2f76:	08 f0       	brcs	.+2      	; 0x2f7a <fat_read_file+0x598>
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
    2f7a:	0b 2f       	mov	r16, r27
    2f7c:	0e 0f       	add	r16, r30
    2f7e:	f1 e0       	ldi	r31, 0x01	; 1
    2f80:	0e 17       	cp	r16, r30
    2f82:	08 f0       	brcs	.+2      	; 0x2f86 <fat_read_file+0x5a4>
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	af 2b       	or	r26, r31
    2f88:	e8 2f       	mov	r30, r24
    2f8a:	e7 0d       	add	r30, r7
    2f8c:	f1 e0       	ldi	r31, 0x01	; 1
    2f8e:	e8 17       	cp	r30, r24
    2f90:	08 f0       	brcs	.+2      	; 0x2f94 <fat_read_file+0x5b2>
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	aa 2e       	mov	r10, r26
    2f96:	ae 0e       	add	r10, r30
    2f98:	a1 e0       	ldi	r26, 0x01	; 1
    2f9a:	ae 16       	cp	r10, r30
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <fat_read_file+0x5be>
    2f9e:	a0 e0       	ldi	r26, 0x00	; 0
    2fa0:	fa 2b       	or	r31, r26
    2fa2:	f9 0e       	add	r15, r25
    2fa4:	ff 0d       	add	r31, r15
    2fa6:	af 89       	ldd	r26, Y+23	; 0x17
    2fa8:	b8 8d       	ldd	r27, Y+24	; 0x18
    2faa:	d3 96       	adiw	r26, 0x33	; 51
    2fac:	1c 93       	st	X, r17
    2fae:	d3 97       	sbiw	r26, 0x33	; 51
    2fb0:	d4 96       	adiw	r26, 0x34	; 52
    2fb2:	bc 92       	st	X, r11
    2fb4:	d4 97       	sbiw	r26, 0x34	; 52
    2fb6:	d5 96       	adiw	r26, 0x35	; 53
    2fb8:	cc 92       	st	X, r12
    2fba:	d5 97       	sbiw	r26, 0x35	; 53
    2fbc:	d6 96       	adiw	r26, 0x36	; 54
    2fbe:	dc 92       	st	X, r13
    2fc0:	d6 97       	sbiw	r26, 0x36	; 54
    2fc2:	d7 96       	adiw	r26, 0x37	; 55
    2fc4:	ec 92       	st	X, r14
    2fc6:	d7 97       	sbiw	r26, 0x37	; 55
    2fc8:	d8 96       	adiw	r26, 0x38	; 56
    2fca:	0c 93       	st	X, r16
    2fcc:	d8 97       	sbiw	r26, 0x38	; 56
    2fce:	d9 96       	adiw	r26, 0x39	; 57
    2fd0:	ac 92       	st	X, r10
    2fd2:	d9 97       	sbiw	r26, 0x39	; 57
    2fd4:	da 96       	adiw	r26, 0x3a	; 58
    2fd6:	fc 93       	st	X, r31
    2fd8:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + copy_length >= cluster_size)
    2fda:	8b 81       	ldd	r24, Y+3	; 0x03
    2fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fde:	88 0d       	add	r24, r8
    2fe0:	99 1d       	adc	r25, r9
    2fe2:	eb 85       	ldd	r30, Y+11	; 0x0b
    2fe4:	fc 85       	ldd	r31, Y+12	; 0x0c
    2fe6:	8e 17       	cp	r24, r30
    2fe8:	9f 07       	cpc	r25, r31
    2fea:	10 f1       	brcs	.+68     	; 0x3030 <fat_read_file+0x64e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    2fec:	8d 91       	ld	r24, X+
    2fee:	9c 91       	ld	r25, X
    2ff0:	4f 81       	ldd	r20, Y+7	; 0x07
    2ff2:	58 85       	ldd	r21, Y+8	; 0x08
    2ff4:	69 85       	ldd	r22, Y+9	; 0x09
    2ff6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ff8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
    2ffc:	6f 83       	std	Y+7, r22	; 0x07
    2ffe:	78 87       	std	Y+8, r23	; 0x08
    3000:	89 87       	std	Y+9, r24	; 0x09
    3002:	9a 87       	std	Y+10, r25	; 0x0a
    3004:	61 15       	cp	r22, r1
    3006:	71 05       	cpc	r23, r1
    3008:	81 05       	cpc	r24, r1
    300a:	91 05       	cpc	r25, r1
    300c:	79 f4       	brne	.+30     	; 0x302c <fat_read_file+0x64a>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    300e:	af 89       	ldd	r26, Y+23	; 0x17
    3010:	b8 8d       	ldd	r27, Y+24	; 0x18
    3012:	db 96       	adiw	r26, 0x3b	; 59
    3014:	1d 92       	st	X+, r1
    3016:	1d 92       	st	X+, r1
    3018:	1d 92       	st	X+, r1
    301a:	1c 92       	st	X, r1
    301c:	de 97       	sbiw	r26, 0x3e	; 62
                return buffer_len - buffer_left;
    301e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3020:	58 89       	ldd	r21, Y+16	; 0x10
    3022:	ed 81       	ldd	r30, Y+5	; 0x05
    3024:	fe 81       	ldd	r31, Y+6	; 0x06
    3026:	4e 1b       	sub	r20, r30
    3028:	5f 0b       	sbc	r21, r31
    302a:	21 c0       	rjmp	.+66     	; 0x306e <fat_read_file+0x68c>
    302c:	1c 82       	std	Y+4, r1	; 0x04
    302e:	1b 82       	std	Y+3, r1	; 0x03
            }
        }

        fd->pos_cluster = cluster_num;
    3030:	2f 81       	ldd	r18, Y+7	; 0x07
    3032:	38 85       	ldd	r19, Y+8	; 0x08
    3034:	49 85       	ldd	r20, Y+9	; 0x09
    3036:	5a 85       	ldd	r21, Y+10	; 0x0a
    3038:	af 89       	ldd	r26, Y+23	; 0x17
    303a:	b8 8d       	ldd	r27, Y+24	; 0x18
    303c:	db 96       	adiw	r26, 0x3b	; 59
    303e:	2d 93       	st	X+, r18
    3040:	3d 93       	st	X+, r19
    3042:	4d 93       	st	X+, r20
    3044:	5c 93       	st	X, r21
    3046:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    3048:	ed 81       	ldd	r30, Y+5	; 0x05
    304a:	fe 81       	ldd	r31, Y+6	; 0x06
    304c:	ef 2b       	or	r30, r31
    304e:	39 f0       	breq	.+14     	; 0x305e <fat_read_file+0x67c>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    3050:	2d 85       	ldd	r18, Y+13	; 0x0d
    3052:	3e 85       	ldd	r19, Y+14	; 0x0e
    3054:	28 0d       	add	r18, r8
    3056:	39 1d       	adc	r19, r9
    3058:	3e 87       	std	Y+14, r19	; 0x0e
    305a:	2d 87       	std	Y+13, r18	; 0x0d
    305c:	1e ce       	rjmp	.-964    	; 0x2c9a <fat_read_file+0x2b8>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    305e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3060:	58 89       	ldd	r21, Y+16	; 0x10
    3062:	05 c0       	rjmp	.+10     	; 0x306e <fat_read_file+0x68c>
    3064:	4f ef       	ldi	r20, 0xFF	; 255
    3066:	5f ef       	ldi	r21, 0xFF	; 255
    3068:	02 c0       	rjmp	.+4      	; 0x306e <fat_read_file+0x68c>
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	50 e0       	ldi	r21, 0x00	; 0
}
    306e:	ca 01       	movw	r24, r20
    3070:	68 96       	adiw	r28, 0x18	; 24
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	1f 91       	pop	r17
    3082:	0f 91       	pop	r16
    3084:	ff 90       	pop	r15
    3086:	ef 90       	pop	r14
    3088:	df 90       	pop	r13
    308a:	cf 90       	pop	r12
    308c:	bf 90       	pop	r11
    308e:	af 90       	pop	r10
    3090:	9f 90       	pop	r9
    3092:	8f 90       	pop	r8
    3094:	7f 90       	pop	r7
    3096:	6f 90       	pop	r6
    3098:	5f 90       	pop	r5
    309a:	4f 90       	pop	r4
    309c:	3f 90       	pop	r3
    309e:	2f 90       	pop	r2
    30a0:	08 95       	ret

000030a2 <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    30a2:	fc 01       	movw	r30, r24
    if(dd)
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	11 f0       	breq	.+4      	; 0x30ac <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    30a8:	11 82       	std	Z+1, r1	; 0x01
    30aa:	10 82       	st	Z, r1
    30ac:	08 95       	ret

000030ae <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    30ae:	fc 01       	movw	r30, r24
    if(!dd)
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	11 f4       	brne	.+4      	; 0x30b8 <fat_reset_dir+0xa>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    30b8:	83 a1       	ldd	r24, Z+35	; 0x23
    30ba:	94 a1       	ldd	r25, Z+36	; 0x24
    30bc:	a5 a1       	ldd	r26, Z+37	; 0x25
    30be:	b6 a1       	ldd	r27, Z+38	; 0x26
    30c0:	83 ab       	std	Z+51, r24	; 0x33
    30c2:	94 ab       	std	Z+52, r25	; 0x34
    30c4:	a5 ab       	std	Z+53, r26	; 0x35
    30c6:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    30c8:	10 ae       	std	Z+56, r1	; 0x38
    30ca:	17 aa       	std	Z+55, r1	; 0x37
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    30ce:	08 95       	ret

000030d0 <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    30d0:	cf 92       	push	r12
    30d2:	df 92       	push	r13
    30d4:	ef 92       	push	r14
    30d6:	ff 92       	push	r15
    30d8:	0f 93       	push	r16
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	6c 01       	movw	r12, r24
    30e2:	fb 01       	movw	r30, r22
    struct fat_read_dir_callback_arg* arg = p;
    30e4:	b7 01       	movw	r22, r14
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    30e6:	d7 01       	movw	r26, r14
    30e8:	cd 91       	ld	r28, X+
    30ea:	dc 91       	ld	r29, X
    30ec:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    30ee:	12 96       	adiw	r26, 0x02	; 2
    30f0:	8d 91       	ld	r24, X+
    30f2:	9c 91       	ld	r25, X
    30f4:	13 97       	sbiw	r26, 0x03	; 3
    30f6:	80 96       	adiw	r24, 0x20	; 32
    30f8:	13 96       	adiw	r26, 0x03	; 3
    30fa:	9c 93       	st	X, r25
    30fc:	8e 93       	st	-X, r24
    30fe:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    3100:	d6 01       	movw	r26, r12
    3102:	8c 91       	ld	r24, X
    3104:	85 3e       	cpi	r24, 0xE5	; 229
    3106:	09 f4       	brne	.+2      	; 0x310a <fat_dir_entry_read_callback+0x3a>
    3108:	c3 c0       	rjmp	.+390    	; 0x3290 <fat_dir_entry_read_callback+0x1c0>
    310a:	88 23       	and	r24, r24
    310c:	09 f4       	brne	.+2      	; 0x3110 <fat_dir_entry_read_callback+0x40>
    310e:	c0 c0       	rjmp	.+384    	; 0x3290 <fat_dir_entry_read_callback+0x1c0>
        return 1;

    if(!dir_entry->entry_offset)
    3110:	89 a5       	ldd	r24, Y+41	; 0x29
    3112:	9a a5       	ldd	r25, Y+42	; 0x2a
    3114:	89 2b       	or	r24, r25
    3116:	9b a5       	ldd	r25, Y+43	; 0x2b
    3118:	89 2b       	or	r24, r25
    311a:	9c a5       	ldd	r25, Y+44	; 0x2c
    311c:	89 2b       	or	r24, r25
    311e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3120:	89 2b       	or	r24, r25
    3122:	9e a5       	ldd	r25, Y+46	; 0x2e
    3124:	89 2b       	or	r24, r25
    3126:	9f a5       	ldd	r25, Y+47	; 0x2f
    3128:	89 2b       	or	r24, r25
    312a:	98 a9       	ldd	r25, Y+48	; 0x30
    312c:	89 2b       	or	r24, r25
    312e:	41 f4       	brne	.+16     	; 0x3140 <fat_dir_entry_read_callback+0x70>
        dir_entry->entry_offset = offset;
    3130:	09 a7       	std	Y+41, r16	; 0x29
    3132:	1a a7       	std	Y+42, r17	; 0x2a
    3134:	2b a7       	std	Y+43, r18	; 0x2b
    3136:	3c a7       	std	Y+44, r19	; 0x2c
    3138:	4d a7       	std	Y+45, r20	; 0x2d
    313a:	5e a7       	std	Y+46, r21	; 0x2e
    313c:	ef a7       	std	Y+47, r30	; 0x2f
    313e:	f8 ab       	std	Y+48, r31	; 0x30
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    3140:	20 97       	sbiw	r28, 0x00	; 0
    3142:	09 f4       	brne	.+2      	; 0x3146 <fat_dir_entry_read_callback+0x76>
    3144:	a7 c0       	rjmp	.+334    	; 0x3294 <fat_dir_entry_read_callback+0x1c4>
    3146:	c1 14       	cp	r12, r1
    3148:	d1 04       	cpc	r13, r1
    314a:	09 f4       	brne	.+2      	; 0x314e <fat_dir_entry_read_callback+0x7e>
    314c:	a3 c0       	rjmp	.+326    	; 0x3294 <fat_dir_entry_read_callback+0x1c4>
    314e:	f6 01       	movw	r30, r12
    3150:	90 81       	ld	r25, Z
    3152:	99 23       	and	r25, r25
    3154:	09 f4       	brne	.+2      	; 0x3158 <fat_dir_entry_read_callback+0x88>
    3156:	9e c0       	rjmp	.+316    	; 0x3294 <fat_dir_entry_read_callback+0x1c4>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    3158:	83 85       	ldd	r24, Z+11	; 0x0b
    315a:	8f 30       	cpi	r24, 0x0F	; 15
    315c:	29 f5       	brne	.+74     	; 0x31a8 <fat_dir_entry_read_callback+0xd8>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    315e:	89 2f       	mov	r24, r25
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	8f 73       	andi	r24, 0x3F	; 63
    3164:	90 70       	andi	r25, 0x00	; 0
    3166:	2d e0       	ldi	r18, 0x0D	; 13
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	82 9f       	mul	r24, r18
    316c:	a0 01       	movw	r20, r0
    316e:	83 9f       	mul	r24, r19
    3170:	50 0d       	add	r21, r0
    3172:	92 9f       	mul	r25, r18
    3174:	50 0d       	add	r21, r0
    3176:	11 24       	eor	r1, r1
    3178:	4d 50       	subi	r20, 0x0D	; 13
    317a:	50 40       	sbci	r21, 0x00	; 0
    317c:	ad e9       	ldi	r26, 0x9D	; 157
    317e:	b1 e0       	ldi	r27, 0x01	; 1
    3180:	c4 0f       	add	r28, r20
    3182:	d5 1f       	adc	r29, r21
    3184:	0d c0       	rjmp	.+26     	; 0x31a0 <fat_dir_entry_read_callback+0xd0>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    3186:	8d 91       	ld	r24, X+
    3188:	f6 01       	movw	r30, r12
    318a:	e8 0f       	add	r30, r24
    318c:	f1 1d       	adc	r31, r1
    318e:	80 81       	ld	r24, Z
    3190:	89 93       	st	Y+, r24
    3192:	4f 5f       	subi	r20, 0xFF	; 255
    3194:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    3196:	f1 e0       	ldi	r31, 0x01	; 1
    3198:	aa 3a       	cpi	r26, 0xAA	; 170
    319a:	bf 07       	cpc	r27, r31
    319c:	09 f4       	brne	.+2      	; 0x31a0 <fat_dir_entry_read_callback+0xd0>
    319e:	78 c0       	rjmp	.+240    	; 0x3290 <fat_dir_entry_read_callback+0x1c0>
    31a0:	4f 31       	cpi	r20, 0x1F	; 31
    31a2:	51 05       	cpc	r21, r1
    31a4:	80 f3       	brcs	.-32     	; 0x3186 <fat_dir_entry_read_callback+0xb6>
    31a6:	74 c0       	rjmp	.+232    	; 0x3290 <fat_dir_entry_read_callback+0x1c0>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    31a8:	88 81       	ld	r24, Y
    31aa:	88 23       	and	r24, r24
    31ac:	09 f0       	breq	.+2      	; 0x31b0 <fat_dir_entry_read_callback+0xe0>
    31ae:	4d c0       	rjmp	.+154    	; 0x324a <fat_dir_entry_read_callback+0x17a>
    31b0:	a6 01       	movw	r20, r12
    31b2:	de 01       	movw	r26, r28
    31b4:	86 01       	movw	r16, r12
    31b6:	20 e0       	ldi	r18, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    31b8:	f8 01       	movw	r30, r16
    31ba:	90 81       	ld	r25, Z
    31bc:	90 32       	cpi	r25, 0x20	; 32
    31be:	99 f0       	breq	.+38     	; 0x31e6 <fat_dir_entry_read_callback+0x116>
                    break;
                long_name[i] = raw_entry[i];
    31c0:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    31c2:	f6 01       	movw	r30, r12
    31c4:	84 85       	ldd	r24, Z+12	; 0x0c
    31c6:	83 ff       	sbrs	r24, 3
    31c8:	08 c0       	rjmp	.+16     	; 0x31da <fat_dir_entry_read_callback+0x10a>
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 81       	ld	r24, Z
    31ce:	81 34       	cpi	r24, 0x41	; 65
    31d0:	20 f0       	brcs	.+8      	; 0x31da <fat_dir_entry_read_callback+0x10a>
    31d2:	8b 35       	cpi	r24, 0x5B	; 91
    31d4:	10 f4       	brcc	.+4      	; 0x31da <fat_dir_entry_read_callback+0x10a>
                    long_name[i] += 'a' - 'A';
    31d6:	90 5e       	subi	r25, 0xE0	; 224
    31d8:	9c 93       	st	X, r25
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    31da:	2f 5f       	subi	r18, 0xFF	; 255
    31dc:	0f 5f       	subi	r16, 0xFF	; 255
    31de:	1f 4f       	sbci	r17, 0xFF	; 255
    31e0:	11 96       	adiw	r26, 0x01	; 1
    31e2:	28 30       	cpi	r18, 0x08	; 8
    31e4:	49 f7       	brne	.-46     	; 0x31b8 <fat_dir_entry_read_callback+0xe8>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    31e6:	88 81       	ld	r24, Y
    31e8:	85 30       	cpi	r24, 0x05	; 5
    31ea:	11 f4       	brne	.+4      	; 0x31f0 <fat_dir_entry_read_callback+0x120>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    31ec:	85 ee       	ldi	r24, 0xE5	; 229
    31ee:	88 83       	st	Y, r24

            if(raw_entry[8] != ' ')
    31f0:	d6 01       	movw	r26, r12
    31f2:	18 96       	adiw	r26, 0x08	; 8
    31f4:	8c 91       	ld	r24, X
    31f6:	80 32       	cpi	r24, 0x20	; 32
    31f8:	21 f1       	breq	.+72     	; 0x3242 <fat_dir_entry_read_callback+0x172>
            {
                long_name[i++] = '.';
    31fa:	fe 01       	movw	r30, r28
    31fc:	e2 0f       	add	r30, r18
    31fe:	f1 1d       	adc	r31, r1
    3200:	8e e2       	ldi	r24, 0x2E	; 46
    3202:	80 83       	st	Z, r24
    3204:	32 2f       	mov	r19, r18
    3206:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    3208:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(raw_entry[j] == ' ')
    320a:	fa 01       	movw	r30, r20
    320c:	90 85       	ldd	r25, Z+8	; 0x08
    320e:	90 32       	cpi	r25, 0x20	; 32
    3210:	b9 f0       	breq	.+46     	; 0x3240 <fat_dir_entry_read_callback+0x170>
                        break;
                    long_name[i] = raw_entry[j];
    3212:	fe 01       	movw	r30, r28
    3214:	e3 0f       	add	r30, r19
    3216:	f1 1d       	adc	r31, r1
    3218:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    321a:	d6 01       	movw	r26, r12
    321c:	1c 96       	adiw	r26, 0x0c	; 12
    321e:	8c 91       	ld	r24, X
    3220:	84 ff       	sbrs	r24, 4
    3222:	09 c0       	rjmp	.+18     	; 0x3236 <fat_dir_entry_read_callback+0x166>
    3224:	da 01       	movw	r26, r20
    3226:	18 96       	adiw	r26, 0x08	; 8
    3228:	8c 91       	ld	r24, X
    322a:	81 34       	cpi	r24, 0x41	; 65
    322c:	20 f0       	brcs	.+8      	; 0x3236 <fat_dir_entry_read_callback+0x166>
    322e:	8b 35       	cpi	r24, 0x5B	; 91
    3230:	10 f4       	brcc	.+4      	; 0x3236 <fat_dir_entry_read_callback+0x166>
                        long_name[i] += 'a' - 'A';
    3232:	90 5e       	subi	r25, 0xE0	; 224
    3234:	90 83       	st	Z, r25

                    ++i;
    3236:	3f 5f       	subi	r19, 0xFF	; 255
    3238:	4f 5f       	subi	r20, 0xFF	; 255
    323a:	5f 4f       	sbci	r21, 0xFF	; 255
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    323c:	32 17       	cp	r19, r18
    323e:	29 f7       	brne	.-54     	; 0x320a <fat_dir_entry_read_callback+0x13a>
    3240:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    3242:	fe 01       	movw	r30, r28
    3244:	e2 0f       	add	r30, r18
    3246:	f1 1d       	adc	r31, r1
    3248:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    324a:	f6 01       	movw	r30, r12
    324c:	83 85       	ldd	r24, Z+11	; 0x0b
    324e:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    3250:	22 8d       	ldd	r18, Z+26	; 0x1a
    3252:	33 8d       	ldd	r19, Z+27	; 0x1b
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    3258:	84 89       	ldd	r24, Z+20	; 0x14
    325a:	95 89       	ldd	r25, Z+21	; 0x15
    325c:	a0 e0       	ldi	r26, 0x00	; 0
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	dc 01       	movw	r26, r24
    3262:	99 27       	eor	r25, r25
    3264:	88 27       	eor	r24, r24
    3266:	82 2b       	or	r24, r18
    3268:	93 2b       	or	r25, r19
    326a:	a4 2b       	or	r26, r20
    326c:	b5 2b       	or	r27, r21
    326e:	89 a3       	std	Y+33, r24	; 0x21
    3270:	9a a3       	std	Y+34, r25	; 0x22
    3272:	ab a3       	std	Y+35, r26	; 0x23
    3274:	bc a3       	std	Y+36, r27	; 0x24
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    3276:	84 8d       	ldd	r24, Z+28	; 0x1c
    3278:	95 8d       	ldd	r25, Z+29	; 0x1d
    327a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    327c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    327e:	8d a3       	std	Y+37, r24	; 0x25
    3280:	9e a3       	std	Y+38, r25	; 0x26
    3282:	af a3       	std	Y+39, r26	; 0x27
    3284:	b8 a7       	std	Y+40, r27	; 0x28
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	db 01       	movw	r26, r22
    328a:	14 96       	adiw	r26, 0x04	; 4
    328c:	8c 93       	st	X, r24
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <fat_dir_entry_read_callback+0x1c4>
            return 0;
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <fat_dir_entry_read_callback+0x1c6>
    3294:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return 0;
}
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	df 90       	pop	r13
    32a4:	cf 90       	pop	r12
    32a6:	08 95       	ret

000032a8 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    32a8:	2f 92       	push	r2
    32aa:	3f 92       	push	r3
    32ac:	4f 92       	push	r4
    32ae:	5f 92       	push	r5
    32b0:	6f 92       	push	r6
    32b2:	7f 92       	push	r7
    32b4:	8f 92       	push	r8
    32b6:	9f 92       	push	r9
    32b8:	af 92       	push	r10
    32ba:	bf 92       	push	r11
    32bc:	cf 92       	push	r12
    32be:	df 92       	push	r13
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	2c 97       	sbiw	r28, 0x0c	; 12
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	3c 01       	movw	r6, r24
    32de:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <fat_delete_file+0x3e>
    32e4:	9c c0       	rjmp	.+312    	; 0x341e <fat_delete_file+0x176>
    32e6:	61 15       	cp	r22, r1
    32e8:	71 05       	cpc	r23, r1
    32ea:	09 f4       	brne	.+2      	; 0x32ee <fat_delete_file+0x46>
    32ec:	98 c0       	rjmp	.+304    	; 0x341e <fat_delete_file+0x176>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    32ee:	db 01       	movw	r26, r22
    32f0:	99 96       	adiw	r26, 0x29	; 41
    32f2:	bc 90       	ld	r11, X
    32f4:	99 97       	sbiw	r26, 0x29	; 41
    32f6:	9a 96       	adiw	r26, 0x2a	; 42
    32f8:	ac 90       	ld	r10, X
    32fa:	9a 97       	sbiw	r26, 0x2a	; 42
    32fc:	9b 96       	adiw	r26, 0x2b	; 43
    32fe:	9c 90       	ld	r9, X
    3300:	9b 97       	sbiw	r26, 0x2b	; 43
    3302:	9c 96       	adiw	r26, 0x2c	; 44
    3304:	8c 90       	ld	r8, X
    3306:	9c 97       	sbiw	r26, 0x2c	; 44
    3308:	9d 96       	adiw	r26, 0x2d	; 45
    330a:	5c 90       	ld	r5, X
    330c:	9d 97       	sbiw	r26, 0x2d	; 45
    330e:	9e 96       	adiw	r26, 0x2e	; 46
    3310:	4c 90       	ld	r4, X
    3312:	9e 97       	sbiw	r26, 0x2e	; 46
    3314:	9f 96       	adiw	r26, 0x2f	; 47
    3316:	3c 90       	ld	r3, X
    3318:	9f 97       	sbiw	r26, 0x2f	; 47
    331a:	d0 96       	adiw	r26, 0x30	; 48
    331c:	2c 90       	ld	r2, X
    if(!dir_entry_offset)
    331e:	8b 2d       	mov	r24, r11
    3320:	8a 29       	or	r24, r10
    3322:	89 29       	or	r24, r9
    3324:	88 29       	or	r24, r8
    3326:	85 29       	or	r24, r5
    3328:	84 29       	or	r24, r4
    332a:	83 29       	or	r24, r3
    332c:	82 29       	or	r24, r2
    332e:	09 f4       	brne	.+2      	; 0x3332 <fat_delete_file+0x8a>
    3330:	76 c0       	rjmp	.+236    	; 0x341e <fat_delete_file+0x176>

    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    3332:	d3 01       	movw	r26, r6
    3334:	ed 91       	ld	r30, X+
    3336:	fc 91       	ld	r31, X
    3338:	01 90       	ld	r0, Z+
    333a:	f0 81       	ld	r31, Z
    333c:	e0 2d       	mov	r30, r0
    333e:	2b 2d       	mov	r18, r11
    3340:	3a 2d       	mov	r19, r10
    3342:	49 2d       	mov	r20, r9
    3344:	58 2d       	mov	r21, r8
    3346:	65 2d       	mov	r22, r5
    3348:	74 2d       	mov	r23, r4
    334a:	83 2d       	mov	r24, r3
    334c:	92 2d       	mov	r25, r2
    334e:	8e 01       	movw	r16, r28
    3350:	0f 5f       	subi	r16, 0xFF	; 255
    3352:	1f 4f       	sbci	r17, 0xFF	; 255
    3354:	ac e0       	ldi	r26, 0x0C	; 12
    3356:	ea 2e       	mov	r14, r26
    3358:	f1 2c       	mov	r15, r1
    335a:	09 95       	icall
    335c:	88 23       	and	r24, r24
    335e:	09 f4       	brne	.+2      	; 0x3362 <fat_delete_file+0xba>
    3360:	5e c0       	rjmp	.+188    	; 0x341e <fat_delete_file+0x176>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    3362:	b5 ee       	ldi	r27, 0xE5	; 229
    3364:	b9 83       	std	Y+1, r27	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    3366:	d3 01       	movw	r26, r6
    3368:	ed 91       	ld	r30, X+
    336a:	fc 91       	ld	r31, X
    336c:	04 80       	ldd	r0, Z+4	; 0x04
    336e:	f5 81       	ldd	r31, Z+5	; 0x05
    3370:	e0 2d       	mov	r30, r0
    3372:	2b 2d       	mov	r18, r11
    3374:	3a 2d       	mov	r19, r10
    3376:	49 2d       	mov	r20, r9
    3378:	58 2d       	mov	r21, r8
    337a:	65 2d       	mov	r22, r5
    337c:	74 2d       	mov	r23, r4
    337e:	83 2d       	mov	r24, r3
    3380:	92 2d       	mov	r25, r2
    3382:	8e 01       	movw	r16, r28
    3384:	0f 5f       	subi	r16, 0xFF	; 255
    3386:	1f 4f       	sbci	r17, 0xFF	; 255
    3388:	09 95       	icall
    338a:	88 23       	and	r24, r24
    338c:	09 f4       	brne	.+2      	; 0x3390 <fat_delete_file+0xe8>
    338e:	47 c0       	rjmp	.+142    	; 0x341e <fat_delete_file+0x176>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    3390:	8c 85       	ldd	r24, Y+12	; 0x0c
    3392:	8f 30       	cpi	r24, 0x0F	; 15
    3394:	79 f5       	brne	.+94     	; 0x33f4 <fat_delete_file+0x14c>
            break;

        dir_entry_offset += 32;
    3396:	7b 2d       	mov	r23, r11
    3398:	70 5e       	subi	r23, 0xE0	; 224
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	7b 15       	cp	r23, r11
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <fat_delete_file+0xfa>
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	68 2f       	mov	r22, r24
    33a4:	6a 0d       	add	r22, r10
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	6a 15       	cp	r22, r10
    33aa:	08 f0       	brcs	.+2      	; 0x33ae <fat_delete_file+0x106>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	58 2f       	mov	r21, r24
    33b0:	59 0d       	add	r21, r9
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	59 15       	cp	r21, r9
    33b6:	08 f0       	brcs	.+2      	; 0x33ba <fat_delete_file+0x112>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	48 2f       	mov	r20, r24
    33bc:	48 0d       	add	r20, r8
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	48 15       	cp	r20, r8
    33c2:	08 f0       	brcs	.+2      	; 0x33c6 <fat_delete_file+0x11e>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	38 2f       	mov	r19, r24
    33c8:	35 0d       	add	r19, r5
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	35 15       	cp	r19, r5
    33ce:	08 f0       	brcs	.+2      	; 0x33d2 <fat_delete_file+0x12a>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	28 2f       	mov	r18, r24
    33d4:	24 0d       	add	r18, r4
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	24 15       	cp	r18, r4
    33da:	08 f0       	brcs	.+2      	; 0x33de <fat_delete_file+0x136>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	83 0d       	add	r24, r3
    33e0:	91 e0       	ldi	r25, 0x01	; 1
    33e2:	83 15       	cp	r24, r3
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <fat_delete_file+0x140>
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	5b 01       	movw	r10, r22
    33ea:	4a 01       	movw	r8, r20
    33ec:	29 01       	movw	r4, r18
    33ee:	38 2e       	mov	r3, r24
    33f0:	29 0e       	add	r2, r25
    33f2:	9f cf       	rjmp	.-194    	; 0x3332 <fat_delete_file+0x8a>
    }

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    33f4:	f6 01       	movw	r30, r12
    33f6:	41 a1       	ldd	r20, Z+33	; 0x21
    33f8:	52 a1       	ldd	r21, Z+34	; 0x22
    33fa:	63 a1       	ldd	r22, Z+35	; 0x23
    33fc:	74 a1       	ldd	r23, Z+36	; 0x24
    33fe:	41 15       	cp	r20, r1
    3400:	51 05       	cpc	r21, r1
    3402:	61 05       	cpc	r22, r1
    3404:	71 05       	cpc	r23, r1
    3406:	39 f0       	breq	.+14     	; 0x3416 <fat_delete_file+0x16e>
    3408:	c3 01       	movw	r24, r6
    340a:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_free_clusters>
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	88 23       	and	r24, r24
    3414:	11 f0       	breq	.+4      	; 0x341a <fat_delete_file+0x172>
    3416:	21 e0       	ldi	r18, 0x01	; 1
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	82 2f       	mov	r24, r18
    341c:	01 c0       	rjmp	.+2      	; 0x3420 <fat_delete_file+0x178>
    341e:	80 e0       	ldi	r24, 0x00	; 0
}
    3420:	2c 96       	adiw	r28, 0x0c	; 12
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	ff 90       	pop	r15
    3436:	ef 90       	pop	r14
    3438:	df 90       	pop	r13
    343a:	cf 90       	pop	r12
    343c:	bf 90       	pop	r11
    343e:	af 90       	pop	r10
    3440:	9f 90       	pop	r9
    3442:	8f 90       	pop	r8
    3444:	7f 90       	pop	r7
    3446:	6f 90       	pop	r6
    3448:	5f 90       	pop	r5
    344a:	4f 90       	pop	r4
    344c:	3f 90       	pop	r3
    344e:	2f 90       	pop	r2
    3450:	08 95       	ret

00003452 <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    3452:	2f 92       	push	r2
    3454:	3f 92       	push	r3
    3456:	4f 92       	push	r4
    3458:	5f 92       	push	r5
    345a:	6f 92       	push	r6
    345c:	7f 92       	push	r7
    345e:	8f 92       	push	r8
    3460:	9f 92       	push	r9
    3462:	af 92       	push	r10
    3464:	bf 92       	push	r11
    3466:	cf 92       	push	r12
    3468:	df 92       	push	r13
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	dc 01       	movw	r26, r24
    if(!fs)
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	49 f4       	brne	.+18     	; 0x348a <fat_get_fs_size+0x38>
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	60 e0       	ldi	r22, 0x00	; 0
    3482:	70 e0       	ldi	r23, 0x00	; 0
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	30 c0       	rjmp	.+96     	; 0x34ea <fat_get_fs_size+0x98>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    348a:	ed 91       	ld	r30, X+
    348c:	fc 91       	ld	r31, X
    348e:	11 97       	sbiw	r26, 0x01	; 1
    3490:	80 85       	ldd	r24, Z+8	; 0x08
    3492:	52 96       	adiw	r26, 0x12	; 18
    3494:	2d 91       	ld	r18, X+
    3496:	3d 91       	ld	r19, X+
    3498:	4d 91       	ld	r20, X+
    349a:	5c 91       	ld	r21, X
    349c:	55 97       	sbiw	r26, 0x15	; 21
    349e:	58 96       	adiw	r26, 0x18	; 24
    34a0:	ed 91       	ld	r30, X+
    34a2:	fc 91       	ld	r31, X
    34a4:	59 97       	sbiw	r26, 0x19	; 25
    34a6:	8b 30       	cpi	r24, 0x0B	; 11
    34a8:	41 f4       	brne	.+16     	; 0x34ba <fat_get_fs_size+0x68>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    34aa:	12 e0       	ldi	r17, 0x02	; 2
    34ac:	56 95       	lsr	r21
    34ae:	47 95       	ror	r20
    34b0:	37 95       	ror	r19
    34b2:	27 95       	ror	r18
    34b4:	1a 95       	dec	r17
    34b6:	d1 f7       	brne	.-12     	; 0x34ac <fat_get_fs_size+0x5a>
    34b8:	04 c0       	rjmp	.+8      	; 0x34c2 <fat_get_fs_size+0x70>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    34ba:	56 95       	lsr	r21
    34bc:	47 95       	ror	r20
    34be:	37 95       	ror	r19
    34c0:	27 95       	ror	r18
    34c2:	22 50       	subi	r18, 0x02	; 2
    34c4:	30 40       	sbci	r19, 0x00	; 0
    34c6:	40 40       	sbci	r20, 0x00	; 0
    34c8:	50 40       	sbci	r21, 0x00	; 0
    34ca:	59 01       	movw	r10, r18
    34cc:	6a 01       	movw	r12, r20
    34ce:	a6 01       	movw	r20, r12
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	5f 01       	movw	r10, r30
    34da:	cc 24       	eor	r12, r12
    34dc:	dd 24       	eor	r13, r13
    34de:	ee 24       	eor	r14, r14
    34e0:	ff 24       	eor	r15, r15
    34e2:	00 e0       	ldi	r16, 0x00	; 0
    34e4:	10 e0       	ldi	r17, 0x00	; 0
    34e6:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
}
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	bf 90       	pop	r11
    34f8:	af 90       	pop	r10
    34fa:	9f 90       	pop	r9
    34fc:	8f 90       	pop	r8
    34fe:	7f 90       	pop	r7
    3500:	6f 90       	pop	r6
    3502:	5f 90       	pop	r5
    3504:	4f 90       	pop	r4
    3506:	3f 90       	pop	r3
    3508:	2f 90       	pop	r2
    350a:	08 95       	ret

0000350c <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    350c:	2f 92       	push	r2
    350e:	3f 92       	push	r3
    3510:	4f 92       	push	r4
    3512:	5f 92       	push	r5
    3514:	6f 92       	push	r6
    3516:	7f 92       	push	r7
    3518:	8f 92       	push	r8
    351a:	9f 92       	push	r9
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	e0 97       	sbiw	r28, 0x30	; 48
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	3c 01       	movw	r6, r24
    if(!fs)
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	09 f4       	brne	.+2      	; 0x3548 <fat_get_fs_free+0x3c>
    3546:	f8 c0       	rjmp	.+496    	; 0x3738 <fat_get_fs_free+0x22c>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	1a 82       	std	Y+2, r1	; 0x02
    354c:	1b 82       	std	Y+3, r1	; 0x03
    354e:	1c 82       	std	Y+4, r1	; 0x04
    count_arg.buffer_size = sizeof(fat);
    3550:	80 e2       	ldi	r24, 0x20	; 32
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9e 83       	std	Y+6, r25	; 0x06
    3556:	8d 83       	std	Y+5, r24	; 0x05

    offset_t fat_offset = fs->header.fat_offset;
    3558:	d3 01       	movw	r26, r6
    355a:	1a 96       	adiw	r26, 0x0a	; 10
    355c:	bc 91       	ld	r27, X
    355e:	b9 a7       	std	Y+41, r27	; 0x29
    3560:	f3 01       	movw	r30, r6
    3562:	f3 85       	ldd	r31, Z+11	; 0x0b
    3564:	fa a7       	std	Y+42, r31	; 0x2a
    3566:	d3 01       	movw	r26, r6
    3568:	1c 96       	adiw	r26, 0x0c	; 12
    356a:	bc 91       	ld	r27, X
    356c:	bb a7       	std	Y+43, r27	; 0x2b
    356e:	f3 01       	movw	r30, r6
    3570:	f5 85       	ldd	r31, Z+13	; 0x0d
    3572:	fc a7       	std	Y+44, r31	; 0x2c
    3574:	d3 01       	movw	r26, r6
    3576:	1e 96       	adiw	r26, 0x0e	; 14
    3578:	bc 91       	ld	r27, X
    357a:	bd a7       	std	Y+45, r27	; 0x2d
    357c:	f3 01       	movw	r30, r6
    357e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3580:	fe a7       	std	Y+46, r31	; 0x2e
    3582:	d3 01       	movw	r26, r6
    3584:	50 96       	adiw	r26, 0x10	; 16
    3586:	bc 91       	ld	r27, X
    3588:	bf a7       	std	Y+47, r27	; 0x2f
    358a:	f3 01       	movw	r30, r6
    358c:	f1 89       	ldd	r31, Z+17	; 0x11
    358e:	f8 ab       	std	Y+48, r31	; 0x30
    uint32_t fat_size = fs->header.fat_size;
    3590:	d3 01       	movw	r26, r6
    3592:	52 96       	adiw	r26, 0x12	; 18
    3594:	2d 90       	ld	r2, X+
    3596:	3d 90       	ld	r3, X+
    3598:	4d 90       	ld	r4, X+
    359a:	5c 90       	ld	r5, X
    359c:	55 97       	sbiw	r26, 0x15	; 21
    359e:	ad c0       	rjmp	.+346    	; 0x36fa <fat_get_fs_free+0x1ee>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    35a0:	be ef       	ldi	r27, 0xFE	; 254
    35a2:	2b 16       	cp	r2, r27
    35a4:	bf ef       	ldi	r27, 0xFF	; 255
    35a6:	3b 06       	cpc	r3, r27
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	4b 06       	cpc	r4, r27
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	5b 06       	cpc	r5, r27
    35b0:	28 f0       	brcs	.+10     	; 0x35bc <fat_get_fs_free+0xb0>
    35b2:	ee ef       	ldi	r30, 0xFE	; 254
    35b4:	ff ef       	ldi	r31, 0xFF	; 255
    35b6:	f8 a7       	std	Y+40, r31	; 0x28
    35b8:	ef a3       	std	Y+39, r30	; 0x27
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <fat_get_fs_free+0xb4>
            length = fat_size;
    35bc:	38 a6       	std	Y+40, r3	; 0x28
    35be:	2f a2       	std	Y+39, r2	; 0x27

        if(!fs->partition->device_read_interval(fat_offset,
    35c0:	d3 01       	movw	r26, r6
    35c2:	ed 91       	ld	r30, X+
    35c4:	fc 91       	ld	r31, X
    35c6:	a2 81       	ldd	r26, Z+2	; 0x02
    35c8:	b3 81       	ldd	r27, Z+3	; 0x03
    35ca:	80 85       	ldd	r24, Z+8	; 0x08
    35cc:	86 30       	cpi	r24, 0x06	; 6
    35ce:	19 f0       	breq	.+6      	; 0x35d6 <fat_get_fs_free+0xca>
    35d0:	e3 ee       	ldi	r30, 0xE3	; 227
    35d2:	fb e1       	ldi	r31, 0x1B	; 27
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <fat_get_fs_free+0xce>
    35d6:	ed eb       	ldi	r30, 0xBD	; 189
    35d8:	fb e1       	ldi	r31, 0x1B	; 27
    35da:	29 a5       	ldd	r18, Y+41	; 0x29
    35dc:	3a a5       	ldd	r19, Y+42	; 0x2a
    35de:	4b a5       	ldd	r20, Y+43	; 0x2b
    35e0:	5c a5       	ldd	r21, Y+44	; 0x2c
    35e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    35e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    35e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35e8:	98 a9       	ldd	r25, Y+48	; 0x30
    35ea:	8e 01       	movw	r16, r28
    35ec:	09 5f       	subi	r16, 0xF9	; 249
    35ee:	1f 4f       	sbci	r17, 0xFF	; 255
    35f0:	ee 24       	eor	r14, r14
    35f2:	ff 24       	eor	r15, r15
    35f4:	68 94       	set
    35f6:	e5 f8       	bld	r14, 5
    35f8:	cf a0       	ldd	r12, Y+39	; 0x27
    35fa:	d8 a4       	ldd	r13, Y+40	; 0x28
    35fc:	5f 01       	movw	r10, r30
    35fe:	4e 01       	movw	r8, r28
    3600:	08 94       	sec
    3602:	81 1c       	adc	r8, r1
    3604:	91 1c       	adc	r9, r1
    3606:	fd 01       	movw	r30, r26
    3608:	09 95       	icall
    360a:	88 23       	and	r24, r24
    360c:	09 f4       	brne	.+2      	; 0x3610 <fat_get_fs_free+0x104>
    360e:	94 c0       	rjmp	.+296    	; 0x3738 <fat_get_fs_free+0x22c>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    3610:	cf a0       	ldd	r12, Y+39	; 0x27
    3612:	d8 a4       	ldd	r13, Y+40	; 0x28
    3614:	56 01       	movw	r10, r12
    3616:	cc 24       	eor	r12, r12
    3618:	dd 24       	eor	r13, r13
    361a:	ee 24       	eor	r14, r14
    361c:	ff 24       	eor	r15, r15
    361e:	87 01       	movw	r16, r14
    3620:	f9 a5       	ldd	r31, Y+41	; 0x29
    3622:	fa 0d       	add	r31, r10
    3624:	91 e0       	ldi	r25, 0x01	; 1
    3626:	b9 a5       	ldd	r27, Y+41	; 0x29
    3628:	fb 17       	cp	r31, r27
    362a:	08 f0       	brcs	.+2      	; 0x362e <fat_get_fs_free+0x122>
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3630:	8b 0d       	add	r24, r11
    3632:	21 e0       	ldi	r18, 0x01	; 1
    3634:	ea a5       	ldd	r30, Y+42	; 0x2a
    3636:	8e 17       	cp	r24, r30
    3638:	08 f0       	brcs	.+2      	; 0x363c <fat_get_fs_free+0x130>
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	39 2f       	mov	r19, r25
    363e:	38 0f       	add	r19, r24
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	38 17       	cp	r19, r24
    3644:	08 f0       	brcs	.+2      	; 0x3648 <fat_get_fs_free+0x13c>
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	29 2b       	or	r18, r25
    364a:	8b a5       	ldd	r24, Y+43	; 0x2b
    364c:	8c 0d       	add	r24, r12
    364e:	51 e0       	ldi	r21, 0x01	; 1
    3650:	9b a5       	ldd	r25, Y+43	; 0x2b
    3652:	89 17       	cp	r24, r25
    3654:	08 f0       	brcs	.+2      	; 0x3658 <fat_get_fs_free+0x14c>
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	42 2f       	mov	r20, r18
    365a:	48 0f       	add	r20, r24
    365c:	91 e0       	ldi	r25, 0x01	; 1
    365e:	48 17       	cp	r20, r24
    3660:	08 f0       	brcs	.+2      	; 0x3664 <fat_get_fs_free+0x158>
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	59 2b       	or	r21, r25
    3666:	8c a5       	ldd	r24, Y+44	; 0x2c
    3668:	8d 0d       	add	r24, r13
    366a:	21 e0       	ldi	r18, 0x01	; 1
    366c:	ac a5       	ldd	r26, Y+44	; 0x2c
    366e:	8a 17       	cp	r24, r26
    3670:	08 f0       	brcs	.+2      	; 0x3674 <fat_get_fs_free+0x168>
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	58 0f       	add	r21, r24
    3676:	91 e0       	ldi	r25, 0x01	; 1
    3678:	58 17       	cp	r21, r24
    367a:	08 f0       	brcs	.+2      	; 0x367e <fat_get_fs_free+0x172>
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	29 2b       	or	r18, r25
    3680:	8d a5       	ldd	r24, Y+45	; 0x2d
    3682:	8e 0d       	add	r24, r14
    3684:	71 e0       	ldi	r23, 0x01	; 1
    3686:	bd a5       	ldd	r27, Y+45	; 0x2d
    3688:	8b 17       	cp	r24, r27
    368a:	08 f0       	brcs	.+2      	; 0x368e <fat_get_fs_free+0x182>
    368c:	70 e0       	ldi	r23, 0x00	; 0
    368e:	62 2f       	mov	r22, r18
    3690:	68 0f       	add	r22, r24
    3692:	91 e0       	ldi	r25, 0x01	; 1
    3694:	68 17       	cp	r22, r24
    3696:	08 f0       	brcs	.+2      	; 0x369a <fat_get_fs_free+0x18e>
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	79 2b       	or	r23, r25
    369c:	8e a5       	ldd	r24, Y+46	; 0x2e
    369e:	8f 0d       	add	r24, r15
    36a0:	21 e0       	ldi	r18, 0x01	; 1
    36a2:	ee a5       	ldd	r30, Y+46	; 0x2e
    36a4:	8e 17       	cp	r24, r30
    36a6:	08 f0       	brcs	.+2      	; 0x36aa <fat_get_fs_free+0x19e>
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	78 0f       	add	r23, r24
    36ac:	91 e0       	ldi	r25, 0x01	; 1
    36ae:	78 17       	cp	r23, r24
    36b0:	08 f0       	brcs	.+2      	; 0x36b4 <fat_get_fs_free+0x1a8>
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	29 2b       	or	r18, r25
    36b6:	9f a5       	ldd	r25, Y+47	; 0x2f
    36b8:	90 0f       	add	r25, r16
    36ba:	e1 e0       	ldi	r30, 0x01	; 1
    36bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    36be:	98 17       	cp	r25, r24
    36c0:	08 f0       	brcs	.+2      	; 0x36c4 <fat_get_fs_free+0x1b8>
    36c2:	e0 e0       	ldi	r30, 0x00	; 0
    36c4:	82 2f       	mov	r24, r18
    36c6:	89 0f       	add	r24, r25
    36c8:	21 e0       	ldi	r18, 0x01	; 1
    36ca:	89 17       	cp	r24, r25
    36cc:	08 f0       	brcs	.+2      	; 0x36d0 <fat_get_fs_free+0x1c4>
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	e2 2b       	or	r30, r18
    36d2:	98 a9       	ldd	r25, Y+48	; 0x30
    36d4:	91 0f       	add	r25, r17
    36d6:	f9 a7       	std	Y+41, r31	; 0x29
    36d8:	3a a7       	std	Y+42, r19	; 0x2a
    36da:	4b a7       	std	Y+43, r20	; 0x2b
    36dc:	5c a7       	std	Y+44, r21	; 0x2c
    36de:	6d a7       	std	Y+45, r22	; 0x2d
    36e0:	7e a7       	std	Y+46, r23	; 0x2e
    36e2:	8f a7       	std	Y+47, r24	; 0x2f
    36e4:	9e 0f       	add	r25, r30
    36e6:	98 ab       	std	Y+48, r25	; 0x30
        fat_size -= length;
    36e8:	ef a1       	ldd	r30, Y+39	; 0x27
    36ea:	f8 a5       	ldd	r31, Y+40	; 0x28
    36ec:	cf 01       	movw	r24, r30
    36ee:	a0 e0       	ldi	r26, 0x00	; 0
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	28 1a       	sub	r2, r24
    36f4:	39 0a       	sbc	r3, r25
    36f6:	4a 0a       	sbc	r4, r26
    36f8:	5b 0a       	sbc	r5, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    36fa:	21 14       	cp	r2, r1
    36fc:	31 04       	cpc	r3, r1
    36fe:	41 04       	cpc	r4, r1
    3700:	51 04       	cpc	r5, r1
    3702:	09 f0       	breq	.+2      	; 0x3706 <fat_get_fs_free+0x1fa>
    3704:	4d cf       	rjmp	.-358    	; 0x35a0 <fat_get_fs_free+0x94>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    3706:	d3 01       	movw	r26, r6
    3708:	58 96       	adiw	r26, 0x18	; 24
    370a:	4d 91       	ld	r20, X+
    370c:	5c 91       	ld	r21, X
    370e:	59 97       	sbiw	r26, 0x19	; 25
    3710:	29 80       	ldd	r2, Y+1	; 0x01
    3712:	3a 80       	ldd	r3, Y+2	; 0x02
    3714:	4b 80       	ldd	r4, Y+3	; 0x03
    3716:	5c 80       	ldd	r5, Y+4	; 0x04
    3718:	9a 01       	movw	r18, r20
    371a:	40 e0       	ldi	r20, 0x00	; 0
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	60 e0       	ldi	r22, 0x00	; 0
    3720:	70 e0       	ldi	r23, 0x00	; 0
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	51 01       	movw	r10, r2
    3728:	62 01       	movw	r12, r4
    372a:	ee 24       	eor	r14, r14
    372c:	ff 24       	eor	r15, r15
    372e:	00 e0       	ldi	r16, 0x00	; 0
    3730:	10 e0       	ldi	r17, 0x00	; 0
    3732:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    3736:	08 c0       	rjmp	.+16     	; 0x3748 <fat_get_fs_free+0x23c>
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	50 e0       	ldi	r21, 0x00	; 0
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	70 e0       	ldi	r23, 0x00	; 0
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
}
    3748:	e0 96       	adiw	r28, 0x30	; 48
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	df 90       	pop	r13
    3762:	cf 90       	pop	r12
    3764:	bf 90       	pop	r11
    3766:	af 90       	pop	r10
    3768:	9f 90       	pop	r9
    376a:	8f 90       	pop	r8
    376c:	7f 90       	pop	r7
    376e:	6f 90       	pop	r6
    3770:	5f 90       	pop	r5
    3772:	4f 90       	pop	r4
    3774:	3f 90       	pop	r3
    3776:	2f 90       	pop	r2
    3778:	08 95       	ret

0000377a <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    377a:	ef 92       	push	r14
    377c:	ff 92       	push	r15
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    3784:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    3786:	44 81       	ldd	r20, Z+4	; 0x04
    3788:	55 81       	ldd	r21, Z+5	; 0x05
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	12 c0       	rjmp	.+36     	; 0x37b4 <fat_get_fs_free_16_callback+0x3a>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = *((uint16_t*) &buffer[0]);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    3790:	88 81       	ld	r24, Y
    3792:	99 81       	ldd	r25, Y+1	; 0x01
    3794:	89 2b       	or	r24, r25
    3796:	59 f4       	brne	.+22     	; 0x37ae <fat_get_fs_free_16_callback+0x34>
            ++(count_arg->cluster_count);
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	a2 81       	ldd	r26, Z+2	; 0x02
    379e:	b3 81       	ldd	r27, Z+3	; 0x03
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	a1 1d       	adc	r26, r1
    37a4:	b1 1d       	adc	r27, r1
    37a6:	80 83       	st	Z, r24
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	a2 83       	std	Z+2, r26	; 0x02
    37ac:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    37ae:	2e 5f       	subi	r18, 0xFE	; 254
    37b0:	3f 4f       	sbci	r19, 0xFF	; 255
    37b2:	22 96       	adiw	r28, 0x02	; 2
    37b4:	24 17       	cp	r18, r20
    37b6:	35 07       	cpc	r19, r21
    37b8:	58 f3       	brcs	.-42     	; 0x3790 <fat_get_fs_free_16_callback+0x16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	df 91       	pop	r29
    37be:	cf 91       	pop	r28
    37c0:	ff 90       	pop	r15
    37c2:	ef 90       	pop	r14
    37c4:	08 95       	ret

000037c6 <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    37d0:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    37d2:	44 81       	ldd	r20, Z+4	; 0x04
    37d4:	55 81       	ldd	r21, Z+5	; 0x05
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	16 c0       	rjmp	.+44     	; 0x3808 <fat_get_fs_free_32_callback+0x42>

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    {
        uint32_t cluster = *((uint32_t*) &buffer[0]);
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    37dc:	88 81       	ld	r24, Y
    37de:	99 81       	ldd	r25, Y+1	; 0x01
    37e0:	aa 81       	ldd	r26, Y+2	; 0x02
    37e2:	bb 81       	ldd	r27, Y+3	; 0x03
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	a1 05       	cpc	r26, r1
    37e8:	b1 05       	cpc	r27, r1
    37ea:	59 f4       	brne	.+22     	; 0x3802 <fat_get_fs_free_32_callback+0x3c>
            ++(count_arg->cluster_count);
    37ec:	80 81       	ld	r24, Z
    37ee:	91 81       	ldd	r25, Z+1	; 0x01
    37f0:	a2 81       	ldd	r26, Z+2	; 0x02
    37f2:	b3 81       	ldd	r27, Z+3	; 0x03
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	a1 1d       	adc	r26, r1
    37f8:	b1 1d       	adc	r27, r1
    37fa:	80 83       	st	Z, r24
    37fc:	91 83       	std	Z+1, r25	; 0x01
    37fe:	a2 83       	std	Z+2, r26	; 0x02
    3800:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    3802:	2c 5f       	subi	r18, 0xFC	; 252
    3804:	3f 4f       	sbci	r19, 0xFF	; 255
    3806:	24 96       	adiw	r28, 0x04	; 4
    3808:	24 17       	cp	r18, r20
    380a:	35 07       	cpc	r19, r21
    380c:	38 f3       	brcs	.-50     	; 0x37dc <fat_get_fs_free_32_callback+0x16>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	ff 90       	pop	r15
    3816:	ef 90       	pop	r14
    3818:	08 95       	ret

0000381a <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    381a:	2f 92       	push	r2
    381c:	3f 92       	push	r3
    381e:	4f 92       	push	r4
    3820:	5f 92       	push	r5
    3822:	6f 92       	push	r6
    3824:	7f 92       	push	r7
    3826:	8f 92       	push	r8
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	df 93       	push	r29
    383c:	cf 93       	push	r28
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	62 97       	sbiw	r28, 0x12	; 18
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	9a 8b       	std	Y+18, r25	; 0x12
    3850:	89 8b       	std	Y+17, r24	; 0x11
    if(cluster_num < 2)
    3852:	42 30       	cpi	r20, 0x02	; 2
    3854:	51 05       	cpc	r21, r1
    3856:	61 05       	cpc	r22, r1
    3858:	71 05       	cpc	r23, r1
    385a:	10 f4       	brcc	.+4      	; 0x3860 <fat_clear_cluster+0x46>
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	a2 c0       	rjmp	.+324    	; 0x39a4 <fat_clear_cluster+0x18a>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    3860:	89 89       	ldd	r24, Y+17	; 0x11
    3862:	9a 89       	ldd	r25, Y+18	; 0x12
    3864:	89 2b       	or	r24, r25
    3866:	49 f4       	brne	.+18     	; 0x387a <fat_clear_cluster+0x60>
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e0       	ldi	r20, 0x00	; 0
    386e:	50 e0       	ldi	r21, 0x00	; 0
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	10 e0       	ldi	r17, 0x00	; 0
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	7b c0       	rjmp	.+246    	; 0x3970 <fat_clear_cluster+0x156>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    387a:	42 50       	subi	r20, 0x02	; 2
    387c:	50 40       	sbci	r21, 0x00	; 0
    387e:	60 40       	sbci	r22, 0x00	; 0
    3880:	70 40       	sbci	r23, 0x00	; 0
    3882:	5a 01       	movw	r10, r20
    3884:	6b 01       	movw	r12, r22
    3886:	e9 89       	ldd	r30, Y+17	; 0x11
    3888:	fa 89       	ldd	r31, Y+18	; 0x12
    388a:	20 8c       	ldd	r2, Z+24	; 0x18
    388c:	31 8c       	ldd	r3, Z+25	; 0x19
    388e:	9a 01       	movw	r18, r20
    3890:	a6 01       	movw	r20, r12
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	51 01       	movw	r10, r2
    389c:	cc 24       	eor	r12, r12
    389e:	dd 24       	eor	r13, r13
    38a0:	ee 24       	eor	r14, r14
    38a2:	ff 24       	eor	r15, r15
    38a4:	00 e0       	ldi	r16, 0x00	; 0
    38a6:	10 e0       	ldi	r17, 0x00	; 0
    38a8:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    38ac:	c9 2e       	mov	r12, r25
    38ae:	e9 89       	ldd	r30, Y+17	; 0x11
    38b0:	fa 89       	ldd	r31, Y+18	; 0x12
    38b2:	b2 8d       	ldd	r27, Z+26	; 0x1a
    38b4:	b3 8c       	ldd	r11, Z+27	; 0x1b
    38b6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    38b8:	15 8d       	ldd	r17, Z+29	; 0x1d
    38ba:	f6 8c       	ldd	r15, Z+30	; 0x1e
    38bc:	e7 8c       	ldd	r14, Z+31	; 0x1f
    38be:	d0 a0       	ldd	r13, Z+32	; 0x20
    38c0:	01 a1       	ldd	r16, Z+33	; 0x21
    38c2:	b2 0f       	add	r27, r18
    38c4:	e1 e0       	ldi	r30, 0x01	; 1
    38c6:	b2 17       	cp	r27, r18
    38c8:	08 f0       	brcs	.+2      	; 0x38cc <fat_clear_cluster+0xb2>
    38ca:	e0 e0       	ldi	r30, 0x00	; 0
    38cc:	23 2f       	mov	r18, r19
    38ce:	2b 0d       	add	r18, r11
    38d0:	f1 e0       	ldi	r31, 0x01	; 1
    38d2:	23 17       	cp	r18, r19
    38d4:	08 f0       	brcs	.+2      	; 0x38d8 <fat_clear_cluster+0xbe>
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	3e 2f       	mov	r19, r30
    38da:	32 0f       	add	r19, r18
    38dc:	e1 e0       	ldi	r30, 0x01	; 1
    38de:	32 17       	cp	r19, r18
    38e0:	08 f0       	brcs	.+2      	; 0x38e4 <fat_clear_cluster+0xca>
    38e2:	e0 e0       	ldi	r30, 0x00	; 0
    38e4:	fe 2b       	or	r31, r30
    38e6:	24 2f       	mov	r18, r20
    38e8:	2a 0f       	add	r18, r26
    38ea:	a1 e0       	ldi	r26, 0x01	; 1
    38ec:	24 17       	cp	r18, r20
    38ee:	08 f0       	brcs	.+2      	; 0x38f2 <fat_clear_cluster+0xd8>
    38f0:	a0 e0       	ldi	r26, 0x00	; 0
    38f2:	4f 2f       	mov	r20, r31
    38f4:	42 0f       	add	r20, r18
    38f6:	e1 e0       	ldi	r30, 0x01	; 1
    38f8:	42 17       	cp	r20, r18
    38fa:	08 f0       	brcs	.+2      	; 0x38fe <fat_clear_cluster+0xe4>
    38fc:	e0 e0       	ldi	r30, 0x00	; 0
    38fe:	ae 2b       	or	r26, r30
    3900:	25 2f       	mov	r18, r21
    3902:	21 0f       	add	r18, r17
    3904:	f1 e0       	ldi	r31, 0x01	; 1
    3906:	25 17       	cp	r18, r21
    3908:	08 f0       	brcs	.+2      	; 0x390c <fat_clear_cluster+0xf2>
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	5a 2f       	mov	r21, r26
    390e:	52 0f       	add	r21, r18
    3910:	e1 e0       	ldi	r30, 0x01	; 1
    3912:	52 17       	cp	r21, r18
    3914:	08 f0       	brcs	.+2      	; 0x3918 <fat_clear_cluster+0xfe>
    3916:	e0 e0       	ldi	r30, 0x00	; 0
    3918:	fe 2b       	or	r31, r30
    391a:	26 2f       	mov	r18, r22
    391c:	2f 0d       	add	r18, r15
    391e:	a1 e0       	ldi	r26, 0x01	; 1
    3920:	26 17       	cp	r18, r22
    3922:	08 f0       	brcs	.+2      	; 0x3926 <fat_clear_cluster+0x10c>
    3924:	a0 e0       	ldi	r26, 0x00	; 0
    3926:	6f 2f       	mov	r22, r31
    3928:	62 0f       	add	r22, r18
    392a:	e1 e0       	ldi	r30, 0x01	; 1
    392c:	62 17       	cp	r22, r18
    392e:	08 f0       	brcs	.+2      	; 0x3932 <fat_clear_cluster+0x118>
    3930:	e0 e0       	ldi	r30, 0x00	; 0
    3932:	ae 2b       	or	r26, r30
    3934:	27 2f       	mov	r18, r23
    3936:	2e 0d       	add	r18, r14
    3938:	f1 e0       	ldi	r31, 0x01	; 1
    393a:	27 17       	cp	r18, r23
    393c:	08 f0       	brcs	.+2      	; 0x3940 <fat_clear_cluster+0x126>
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	7a 2f       	mov	r23, r26
    3942:	72 0f       	add	r23, r18
    3944:	e1 e0       	ldi	r30, 0x01	; 1
    3946:	72 17       	cp	r23, r18
    3948:	08 f0       	brcs	.+2      	; 0x394c <fat_clear_cluster+0x132>
    394a:	e0 e0       	ldi	r30, 0x00	; 0
    394c:	fe 2b       	or	r31, r30
    394e:	28 2f       	mov	r18, r24
    3950:	2d 0d       	add	r18, r13
    3952:	e1 e0       	ldi	r30, 0x01	; 1
    3954:	28 17       	cp	r18, r24
    3956:	08 f0       	brcs	.+2      	; 0x395a <fat_clear_cluster+0x140>
    3958:	e0 e0       	ldi	r30, 0x00	; 0
    395a:	8f 2f       	mov	r24, r31
    395c:	82 0f       	add	r24, r18
    395e:	91 e0       	ldi	r25, 0x01	; 1
    3960:	82 17       	cp	r24, r18
    3962:	08 f0       	brcs	.+2      	; 0x3966 <fat_clear_cluster+0x14c>
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9e 2b       	or	r25, r30
    3968:	0c 0d       	add	r16, r12
    396a:	2b 2f       	mov	r18, r27
    396c:	18 2f       	mov	r17, r24
    396e:	90 0f       	add	r25, r16
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    3970:	de 01       	movw	r26, r28
    3972:	11 96       	adiw	r26, 0x01	; 1
    3974:	80 e1       	ldi	r24, 0x10	; 16
    3976:	fd 01       	movw	r30, r26
    3978:	11 92       	st	Z+, r1
    397a:	8a 95       	dec	r24
    397c:	e9 f7       	brne	.-6      	; 0x3978 <fat_clear_cluster+0x15e>
    return fs->partition->device_write_interval(cluster_offset,
    397e:	e9 89       	ldd	r30, Y+17	; 0x11
    3980:	fa 89       	ldd	r31, Y+18	; 0x12
    3982:	c0 80       	ld	r12, Z
    3984:	d1 80       	ldd	r13, Z+1	; 0x01
    3986:	e0 8c       	ldd	r14, Z+24	; 0x18
    3988:	f1 8c       	ldd	r15, Z+25	; 0x19
    398a:	f6 01       	movw	r30, r12
    398c:	86 80       	ldd	r8, Z+6	; 0x06
    398e:	97 80       	ldd	r9, Z+7	; 0x07
    3990:	81 2f       	mov	r24, r17
    3992:	8d 01       	movw	r16, r26
    3994:	e8 ee       	ldi	r30, 0xE8	; 232
    3996:	ce 2e       	mov	r12, r30
    3998:	e4 e1       	ldi	r30, 0x14	; 20
    399a:	de 2e       	mov	r13, r30
    399c:	aa 24       	eor	r10, r10
    399e:	bb 24       	eor	r11, r11
    39a0:	f4 01       	movw	r30, r8
    39a2:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    39a4:	62 96       	adiw	r28, 0x12	; 18
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	ff 90       	pop	r15
    39ba:	ef 90       	pop	r14
    39bc:	df 90       	pop	r13
    39be:	cf 90       	pop	r12
    39c0:	bf 90       	pop	r11
    39c2:	af 90       	pop	r10
    39c4:	9f 90       	pop	r9
    39c6:	8f 90       	pop	r8
    39c8:	7f 90       	pop	r7
    39ca:	6f 90       	pop	r6
    39cc:	5f 90       	pop	r5
    39ce:	4f 90       	pop	r4
    39d0:	3f 90       	pop	r3
    39d2:	2f 90       	pop	r2
    39d4:	08 95       	ret

000039d6 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    39d6:	2f 92       	push	r2
    39d8:	3f 92       	push	r3
    39da:	4f 92       	push	r4
    39dc:	5f 92       	push	r5
    39de:	6f 92       	push	r6
    39e0:	7f 92       	push	r7
    39e2:	8f 92       	push	r8
    39e4:	9f 92       	push	r9
    39e6:	af 92       	push	r10
    39e8:	bf 92       	push	r11
    39ea:	cf 92       	push	r12
    39ec:	df 92       	push	r13
    39ee:	ef 92       	push	r14
    39f0:	ff 92       	push	r15
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	e7 97       	sbiw	r28, 0x37	; 55
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	9d ab       	std	Y+53, r25	; 0x35
    3a0c:	8c ab       	std	Y+52, r24	; 0x34
    3a0e:	7f ab       	std	Y+55, r23	; 0x37
    3a10:	6e ab       	std	Y+54, r22	; 0x36
    if(!dd || !dir_entry)
    3a12:	00 97       	sbiw	r24, 0x00	; 0
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <fat_read_dir+0x42>
    3a16:	5e c1       	rjmp	.+700    	; 0x3cd4 <fat_read_dir+0x2fe>
    3a18:	61 15       	cp	r22, r1
    3a1a:	71 05       	cpc	r23, r1
    3a1c:	09 f4       	brne	.+2      	; 0x3a20 <fat_read_dir+0x4a>
    3a1e:	5a c1       	rjmp	.+692    	; 0x3cd4 <fat_read_dir+0x2fe>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    3a20:	dc 01       	movw	r26, r24
    3a22:	0d 90       	ld	r0, X+
    3a24:	bc 91       	ld	r27, X
    3a26:	a0 2d       	mov	r26, r0
    3a28:	bb ab       	std	Y+51, r27	; 0x33
    3a2a:	aa ab       	std	Y+50, r26	; 0x32
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    3a2c:	58 96       	adiw	r26, 0x18	; 24
    3a2e:	ed 91       	ld	r30, X+
    3a30:	fc 91       	ld	r31, X
    3a32:	59 97       	sbiw	r26, 0x19	; 25
    3a34:	f9 ab       	std	Y+49, r31	; 0x31
    3a36:	e8 ab       	std	Y+48, r30	; 0x30
    cluster_t cluster_num = dd->entry_cluster;
    3a38:	dc 01       	movw	r26, r24
    3a3a:	d3 96       	adiw	r26, 0x33	; 51
    3a3c:	2d 91       	ld	r18, X+
    3a3e:	3d 91       	ld	r19, X+
    3a40:	4d 91       	ld	r20, X+
    3a42:	5c 91       	ld	r21, X
    3a44:	d6 97       	sbiw	r26, 0x36	; 54
    3a46:	2c a7       	std	Y+44, r18	; 0x2c
    3a48:	3d a7       	std	Y+45, r19	; 0x2d
    3a4a:	4e a7       	std	Y+46, r20	; 0x2e
    3a4c:	5f a7       	std	Y+47, r21	; 0x2f
    uint16_t cluster_offset = dd->entry_offset;
    3a4e:	d7 96       	adiw	r26, 0x37	; 55
    3a50:	ed 91       	ld	r30, X+
    3a52:	fc 91       	ld	r31, X
    3a54:	d8 97       	sbiw	r26, 0x38	; 56
    3a56:	fb a7       	std	Y+43, r31	; 0x2b
    3a58:	ea a7       	std	Y+42, r30	; 0x2a
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    3a5a:	81 e3       	ldi	r24, 0x31	; 49
    3a5c:	db 01       	movw	r26, r22
    3a5e:	1d 92       	st	X+, r1
    3a60:	8a 95       	dec	r24
    3a62:	e9 f7       	brne	.-6      	; 0x3a5e <fat_read_dir+0x88>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    3a64:	fe 01       	movw	r30, r28
    3a66:	31 96       	adiw	r30, 0x01	; 1
    3a68:	85 e0       	ldi	r24, 0x05	; 5
    3a6a:	df 01       	movw	r26, r30
    3a6c:	1d 92       	st	X+, r1
    3a6e:	8a 95       	dec	r24
    3a70:	e9 f7       	brne	.-6      	; 0x3a6c <fat_read_dir+0x96>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    3a72:	21 15       	cp	r18, r1
    3a74:	31 05       	cpc	r19, r1
    3a76:	41 05       	cpc	r20, r1
    3a78:	51 05       	cpc	r21, r1
    3a7a:	09 f0       	breq	.+2      	; 0x3a7e <fat_read_dir+0xa8>
    3a7c:	0a c1       	rjmp	.+532    	; 0x3c92 <fat_read_dir+0x2bc>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    3a7e:	aa a9       	ldd	r26, Y+50	; 0x32
    3a80:	bb a9       	ldd	r27, Y+51	; 0x33
    3a82:	ed 91       	ld	r30, X+
    3a84:	fc 91       	ld	r31, X
    3a86:	11 97       	sbiw	r26, 0x01	; 1
    3a88:	80 85       	ldd	r24, Z+8	; 0x08
    3a8a:	8b 30       	cpi	r24, 0x0B	; 11
    3a8c:	59 f4       	brne	.+22     	; 0x3aa4 <fat_read_dir+0xce>
            cluster_num = header->root_dir_cluster;
    3a8e:	9a 96       	adiw	r26, 0x2a	; 42
    3a90:	2d 91       	ld	r18, X+
    3a92:	3d 91       	ld	r19, X+
    3a94:	4d 91       	ld	r20, X+
    3a96:	5c 91       	ld	r21, X
    3a98:	9d 97       	sbiw	r26, 0x2d	; 45
    3a9a:	2c a7       	std	Y+44, r18	; 0x2c
    3a9c:	3d a7       	std	Y+45, r19	; 0x2d
    3a9e:	4e a7       	std	Y+46, r20	; 0x2e
    3aa0:	5f a7       	std	Y+47, r21	; 0x2f
    3aa2:	f7 c0       	rjmp	.+494    	; 0x3c92 <fat_read_dir+0x2bc>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    3aa4:	ea a9       	ldd	r30, Y+50	; 0x32
    3aa6:	fb a9       	ldd	r31, Y+51	; 0x33
    3aa8:	02 8c       	ldd	r0, Z+26	; 0x1a
    3aaa:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3aac:	e0 2d       	mov	r30, r0
    3aae:	aa a9       	ldd	r26, Y+50	; 0x32
    3ab0:	bb a9       	ldd	r27, Y+51	; 0x33
    3ab2:	92 96       	adiw	r26, 0x22	; 34
    3ab4:	8d 91       	ld	r24, X+
    3ab6:	9c 91       	ld	r25, X
    3ab8:	93 97       	sbiw	r26, 0x23	; 35
    3aba:	e8 1b       	sub	r30, r24
    3abc:	f9 0b       	sbc	r31, r25
    3abe:	f9 ab       	std	Y+49, r31	; 0x31
    3ac0:	e8 ab       	std	Y+48, r30	; 0x30
    3ac2:	e7 c0       	rjmp	.+462    	; 0x3c92 <fat_read_dir+0x2bc>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
    3ac4:	4a a5       	ldd	r20, Y+42	; 0x2a
    3ac6:	5b a5       	ldd	r21, Y+43	; 0x2b
    3ac8:	9a 01       	movw	r18, r20
    3aca:	40 e0       	ldi	r20, 0x00	; 0
    3acc:	50 e0       	ldi	r21, 0x00	; 0
    3ace:	2e a3       	std	Y+38, r18	; 0x26
    3ad0:	3f a3       	std	Y+39, r19	; 0x27
    3ad2:	48 a7       	std	Y+40, r20	; 0x28
    3ad4:	59 a7       	std	Y+41, r21	; 0x29
        if(cluster_num == 0)
    3ad6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ad8:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ada:	ae a5       	ldd	r26, Y+46	; 0x2e
    3adc:	bf a5       	ldd	r27, Y+47	; 0x2f
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	a1 05       	cpc	r26, r1
    3ae2:	b1 05       	cpc	r27, r1
    3ae4:	39 f4       	brne	.+14     	; 0x3af4 <fat_read_dir+0x11e>
            pos += header->root_dir_offset;
    3ae6:	ea a9       	ldd	r30, Y+50	; 0x32
    3ae8:	fb a9       	ldd	r31, Y+51	; 0x33
    3aea:	82 a1       	ldd	r24, Z+34	; 0x22
    3aec:	93 a1       	ldd	r25, Z+35	; 0x23
    3aee:	a4 a1       	ldd	r26, Z+36	; 0x24
    3af0:	b5 a1       	ldd	r27, Z+37	; 0x25
    3af2:	73 c0       	rjmp	.+230    	; 0x3bda <fat_read_dir+0x204>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    3af4:	2a a9       	ldd	r18, Y+50	; 0x32
    3af6:	3b a9       	ldd	r19, Y+51	; 0x33
    3af8:	21 15       	cp	r18, r1
    3afa:	31 05       	cpc	r19, r1
    3afc:	09 f4       	brne	.+2      	; 0x3b00 <fat_read_dir+0x12a>
    3afe:	65 c0       	rjmp	.+202    	; 0x3bca <fat_read_dir+0x1f4>
    3b00:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b02:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b04:	ae a5       	ldd	r26, Y+46	; 0x2e
    3b06:	bf a5       	ldd	r27, Y+47	; 0x2f
    3b08:	82 30       	cpi	r24, 0x02	; 2
    3b0a:	91 05       	cpc	r25, r1
    3b0c:	a1 05       	cpc	r26, r1
    3b0e:	b1 05       	cpc	r27, r1
    3b10:	08 f4       	brcc	.+2      	; 0x3b14 <fat_read_dir+0x13e>
    3b12:	5b c0       	rjmp	.+182    	; 0x3bca <fat_read_dir+0x1f4>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    3b14:	02 97       	sbiw	r24, 0x02	; 2
    3b16:	a1 09       	sbc	r26, r1
    3b18:	b1 09       	sbc	r27, r1
    3b1a:	5c 01       	movw	r10, r24
    3b1c:	6d 01       	movw	r12, r26
    3b1e:	02 96       	adiw	r24, 0x02	; 2
    3b20:	a1 1d       	adc	r26, r1
    3b22:	b1 1d       	adc	r27, r1
    3b24:	8c a7       	std	Y+44, r24	; 0x2c
    3b26:	9d a7       	std	Y+45, r25	; 0x2d
    3b28:	ae a7       	std	Y+46, r26	; 0x2e
    3b2a:	bf a7       	std	Y+47, r27	; 0x2f
    3b2c:	d9 01       	movw	r26, r18
    3b2e:	58 96       	adiw	r26, 0x18	; 24
    3b30:	2d 90       	ld	r2, X+
    3b32:	3c 90       	ld	r3, X
    3b34:	59 97       	sbiw	r26, 0x19	; 25
    3b36:	95 01       	movw	r18, r10
    3b38:	a6 01       	movw	r20, r12
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	51 01       	movw	r10, r2
    3b44:	cc 24       	eor	r12, r12
    3b46:	dd 24       	eor	r13, r13
    3b48:	ee 24       	eor	r14, r14
    3b4a:	ff 24       	eor	r15, r15
    3b4c:	00 e0       	ldi	r16, 0x00	; 0
    3b4e:	10 e0       	ldi	r17, 0x00	; 0
    3b50:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    3b54:	ea a9       	ldd	r30, Y+50	; 0x32
    3b56:	fb a9       	ldd	r31, Y+51	; 0x33
    3b58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3b5a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    3b5c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3b5e:	05 8d       	ldd	r16, Z+29	; 0x1d
    3b60:	d6 8c       	ldd	r13, Z+30	; 0x1e
    3b62:	a2 0f       	add	r26, r18
    3b64:	f1 e0       	ldi	r31, 0x01	; 1
    3b66:	a2 17       	cp	r26, r18
    3b68:	08 f0       	brcs	.+2      	; 0x3b6c <fat_read_dir+0x196>
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	23 2f       	mov	r18, r19
    3b6e:	2f 0d       	add	r18, r15
    3b70:	e1 e0       	ldi	r30, 0x01	; 1
    3b72:	23 17       	cp	r18, r19
    3b74:	08 f0       	brcs	.+2      	; 0x3b78 <fat_read_dir+0x1a2>
    3b76:	e0 e0       	ldi	r30, 0x00	; 0
    3b78:	cf 2e       	mov	r12, r31
    3b7a:	c2 0e       	add	r12, r18
    3b7c:	31 e0       	ldi	r19, 0x01	; 1
    3b7e:	c2 16       	cp	r12, r18
    3b80:	08 f0       	brcs	.+2      	; 0x3b84 <fat_read_dir+0x1ae>
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	e3 2b       	or	r30, r19
    3b86:	24 2f       	mov	r18, r20
    3b88:	2b 0f       	add	r18, r27
    3b8a:	f1 e0       	ldi	r31, 0x01	; 1
    3b8c:	24 17       	cp	r18, r20
    3b8e:	08 f0       	brcs	.+2      	; 0x3b92 <fat_read_dir+0x1bc>
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	ee 2e       	mov	r14, r30
    3b94:	e2 0e       	add	r14, r18
    3b96:	31 e0       	ldi	r19, 0x01	; 1
    3b98:	e2 16       	cp	r14, r18
    3b9a:	08 f0       	brcs	.+2      	; 0x3b9e <fat_read_dir+0x1c8>
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	f3 2b       	or	r31, r19
    3ba0:	25 2f       	mov	r18, r21
    3ba2:	20 0f       	add	r18, r16
    3ba4:	41 e0       	ldi	r20, 0x01	; 1
    3ba6:	25 17       	cp	r18, r21
    3ba8:	08 f0       	brcs	.+2      	; 0x3bac <fat_read_dir+0x1d6>
    3baa:	40 e0       	ldi	r20, 0x00	; 0
    3bac:	ff 2e       	mov	r15, r31
    3bae:	f2 0e       	add	r15, r18
    3bb0:	31 e0       	ldi	r19, 0x01	; 1
    3bb2:	f2 16       	cp	r15, r18
    3bb4:	08 f0       	brcs	.+2      	; 0x3bb8 <fat_read_dir+0x1e2>
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	43 2b       	or	r20, r19
    3bba:	26 2f       	mov	r18, r22
    3bbc:	2d 0d       	add	r18, r13
    3bbe:	04 2f       	mov	r16, r20
    3bc0:	02 0f       	add	r16, r18
    3bc2:	2a 2f       	mov	r18, r26
    3bc4:	3c 2d       	mov	r19, r12
    3bc6:	a7 01       	movw	r20, r14
    3bc8:	04 c0       	rjmp	.+8      	; 0x3bd2 <fat_read_dir+0x1fc>
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e0       	ldi	r20, 0x00	; 0
    3bd0:	50 e0       	ldi	r21, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        uint32_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    3bd2:	8e a1       	ldd	r24, Y+38	; 0x26
    3bd4:	9f a1       	ldd	r25, Y+39	; 0x27
    3bd6:	a8 a5       	ldd	r26, Y+40	; 0x28
    3bd8:	b9 a5       	ldd	r27, Y+41	; 0x29
    3bda:	82 0f       	add	r24, r18
    3bdc:	93 1f       	adc	r25, r19
    3bde:	a4 1f       	adc	r26, r20
    3be0:	b5 1f       	adc	r27, r21

        arg.bytes_read = 0;
    3be2:	1c 82       	std	Y+4, r1	; 0x04
    3be4:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    3be6:	ea a9       	ldd	r30, Y+50	; 0x32
    3be8:	fb a9       	ldd	r31, Y+51	; 0x33
    3bea:	20 81       	ld	r18, Z
    3bec:	31 81       	ldd	r19, Z+1	; 0x01
    3bee:	2c 01       	movw	r4, r24
    3bf0:	3d 01       	movw	r6, r26
    3bf2:	c8 a8       	ldd	r12, Y+48	; 0x30
    3bf4:	d9 a8       	ldd	r13, Y+49	; 0x31
    3bf6:	4a a5       	ldd	r20, Y+42	; 0x2a
    3bf8:	5b a5       	ldd	r21, Y+43	; 0x2b
    3bfa:	c4 1a       	sub	r12, r20
    3bfc:	d5 0a       	sbc	r13, r21
    3bfe:	d9 01       	movw	r26, r18
    3c00:	12 96       	adiw	r26, 0x02	; 2
    3c02:	ed 91       	ld	r30, X+
    3c04:	fc 91       	ld	r31, X
    3c06:	13 97       	sbiw	r26, 0x03	; 3
    3c08:	92 01       	movw	r18, r4
    3c0a:	a3 01       	movw	r20, r6
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	70 e0       	ldi	r23, 0x00	; 0
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	8e 01       	movw	r16, r28
    3c16:	0a 5f       	subi	r16, 0xFA	; 250
    3c18:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1a:	b0 e2       	ldi	r27, 0x20	; 32
    3c1c:	eb 2e       	mov	r14, r27
    3c1e:	f1 2c       	mov	r15, r1
    3c20:	a8 e6       	ldi	r26, 0x68	; 104
    3c22:	aa 2e       	mov	r10, r26
    3c24:	a8 e1       	ldi	r26, 0x18	; 24
    3c26:	ba 2e       	mov	r11, r26
    3c28:	4e 01       	movw	r8, r28
    3c2a:	08 94       	sec
    3c2c:	81 1c       	adc	r8, r1
    3c2e:	91 1c       	adc	r9, r1
    3c30:	09 95       	icall
    3c32:	88 23       	and	r24, r24
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <fat_read_dir+0x262>
    3c36:	4e c0       	rjmp	.+156    	; 0x3cd4 <fat_read_dir+0x2fe>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	ea a5       	ldd	r30, Y+42	; 0x2a
    3c3e:	fb a5       	ldd	r31, Y+43	; 0x2b
    3c40:	e8 0f       	add	r30, r24
    3c42:	f9 1f       	adc	r31, r25
    3c44:	fb a7       	std	Y+43, r31	; 0x2b
    3c46:	ea a7       	std	Y+42, r30	; 0x2a

        if(cluster_offset >= cluster_size)
    3c48:	28 a9       	ldd	r18, Y+48	; 0x30
    3c4a:	39 a9       	ldd	r19, Y+49	; 0x31
    3c4c:	e2 17       	cp	r30, r18
    3c4e:	f3 07       	cpc	r31, r19
    3c50:	20 f1       	brcs	.+72     	; 0x3c9a <fat_read_dir+0x2c4>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    3c52:	8a a9       	ldd	r24, Y+50	; 0x32
    3c54:	9b a9       	ldd	r25, Y+51	; 0x33
    3c56:	4c a5       	ldd	r20, Y+44	; 0x2c
    3c58:	5d a5       	ldd	r21, Y+45	; 0x2d
    3c5a:	6e a5       	ldd	r22, Y+46	; 0x2e
    3c5c:	7f a5       	ldd	r23, Y+47	; 0x2f
    3c5e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
    3c62:	6c a7       	std	Y+44, r22	; 0x2c
    3c64:	7d a7       	std	Y+45, r23	; 0x2d
    3c66:	8e a7       	std	Y+46, r24	; 0x2e
    3c68:	9f a7       	std	Y+47, r25	; 0x2f
    3c6a:	1b a6       	std	Y+43, r1	; 0x2b
    3c6c:	1a a6       	std	Y+42, r1	; 0x2a
    3c6e:	61 15       	cp	r22, r1
    3c70:	71 05       	cpc	r23, r1
    3c72:	81 05       	cpc	r24, r1
    3c74:	91 05       	cpc	r25, r1
    3c76:	89 f4       	brne	.+34     	; 0x3c9a <fat_read_dir+0x2c4>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    3c78:	ac a9       	ldd	r26, Y+52	; 0x34
    3c7a:	bd a9       	ldd	r27, Y+53	; 0x35
    3c7c:	93 96       	adiw	r26, 0x23	; 35
    3c7e:	8d 91       	ld	r24, X+
    3c80:	9d 91       	ld	r25, X+
    3c82:	0d 90       	ld	r0, X+
    3c84:	bc 91       	ld	r27, X
    3c86:	a0 2d       	mov	r26, r0
    3c88:	8c a7       	std	Y+44, r24	; 0x2c
    3c8a:	9d a7       	std	Y+45, r25	; 0x2d
    3c8c:	ae a7       	std	Y+46, r26	; 0x2e
    3c8e:	bf a7       	std	Y+47, r27	; 0x2f
    3c90:	08 c0       	rjmp	.+16     	; 0x3ca2 <fat_read_dir+0x2cc>
    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    arg.dir_entry = dir_entry;
    3c92:	ee a9       	ldd	r30, Y+54	; 0x36
    3c94:	ff a9       	ldd	r31, Y+55	; 0x37
    3c96:	fa 83       	std	Y+2, r31	; 0x02
    3c98:	e9 83       	std	Y+1, r30	; 0x01
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    3c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9c:	88 23       	and	r24, r24
    3c9e:	09 f4       	brne	.+2      	; 0x3ca2 <fat_read_dir+0x2cc>
    3ca0:	11 cf       	rjmp	.-478    	; 0x3ac4 <fat_read_dir+0xee>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    3ca2:	2c a5       	ldd	r18, Y+44	; 0x2c
    3ca4:	3d a5       	ldd	r19, Y+45	; 0x2d
    3ca6:	4e a5       	ldd	r20, Y+46	; 0x2e
    3ca8:	5f a5       	ldd	r21, Y+47	; 0x2f
    3caa:	ac a9       	ldd	r26, Y+52	; 0x34
    3cac:	bd a9       	ldd	r27, Y+53	; 0x35
    3cae:	d3 96       	adiw	r26, 0x33	; 51
    3cb0:	2d 93       	st	X+, r18
    3cb2:	3d 93       	st	X+, r19
    3cb4:	4d 93       	st	X+, r20
    3cb6:	5c 93       	st	X, r21
    3cb8:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    3cba:	ea a5       	ldd	r30, Y+42	; 0x2a
    3cbc:	fb a5       	ldd	r31, Y+43	; 0x2b
    3cbe:	d8 96       	adiw	r26, 0x38	; 56
    3cc0:	fc 93       	st	X, r31
    3cc2:	ee 93       	st	-X, r30
    3cc4:	d7 97       	sbiw	r26, 0x37	; 55

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    3cc6:	ae a9       	ldd	r26, Y+54	; 0x36
    3cc8:	bf a9       	ldd	r27, Y+55	; 0x37
    3cca:	8c 91       	ld	r24, X
    3ccc:	88 23       	and	r24, r24
    3cce:	19 f0       	breq	.+6      	; 0x3cd6 <fat_read_dir+0x300>
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	01 c0       	rjmp	.+2      	; 0x3cd6 <fat_read_dir+0x300>
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
}
    3cd6:	e7 96       	adiw	r28, 0x37	; 55
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	df 90       	pop	r13
    3cf0:	cf 90       	pop	r12
    3cf2:	bf 90       	pop	r11
    3cf4:	af 90       	pop	r10
    3cf6:	9f 90       	pop	r9
    3cf8:	8f 90       	pop	r8
    3cfa:	7f 90       	pop	r7
    3cfc:	6f 90       	pop	r6
    3cfe:	5f 90       	pop	r5
    3d00:	4f 90       	pop	r4
    3d02:	3f 90       	pop	r3
    3d04:	2f 90       	pop	r2
    3d06:	08 95       	ret

00003d08 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    3d08:	2f 92       	push	r2
    3d0a:	3f 92       	push	r3
    3d0c:	4f 92       	push	r4
    3d0e:	5f 92       	push	r5
    3d10:	6f 92       	push	r6
    3d12:	7f 92       	push	r7
    3d14:	8f 92       	push	r8
    3d16:	9f 92       	push	r9
    3d18:	af 92       	push	r10
    3d1a:	bf 92       	push	r11
    3d1c:	cf 92       	push	r12
    3d1e:	df 92       	push	r13
    3d20:	ef 92       	push	r14
    3d22:	ff 92       	push	r15
    3d24:	0f 93       	push	r16
    3d26:	1f 93       	push	r17
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	cd 54       	subi	r28, 0x4D	; 77
    3d32:	d0 40       	sbci	r29, 0x00	; 0
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	2c 01       	movw	r4, r24
    if(!partition ||
    3d40:	00 97       	sbiw	r24, 0x00	; 0
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <fat_open+0x3e>
    3d44:	d9 c3       	rjmp	.+1970   	; 0x44f8 <fat_open+0x7f0>
    3d46:	dc 01       	movw	r26, r24
    3d48:	14 96       	adiw	r26, 0x04	; 4
    3d4a:	8d 91       	ld	r24, X+
    3d4c:	9c 91       	ld	r25, X
    3d4e:	15 97       	sbiw	r26, 0x05	; 5
    3d50:	89 2b       	or	r24, r25
    3d52:	09 f4       	brne	.+2      	; 0x3d56 <fat_open+0x4e>
    3d54:	d1 c3       	rjmp	.+1954   	; 0x44f8 <fat_open+0x7f0>
    3d56:	16 96       	adiw	r26, 0x06	; 6
    3d58:	8d 91       	ld	r24, X+
    3d5a:	9c 91       	ld	r25, X
    3d5c:	17 97       	sbiw	r26, 0x07	; 7
    3d5e:	89 2b       	or	r24, r25
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <fat_open+0x5c>
    3d62:	ca c3       	rjmp	.+1940   	; 0x44f8 <fat_open+0x7f0>
    3d64:	e6 c3       	rjmp	.+1996   	; 0x4532 <fat_open+0x82a>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    3d66:	ed ec       	ldi	r30, 0xCD	; 205
    3d68:	f3 e0       	ldi	r31, 0x03	; 3
    3d6a:	8e e2       	ldi	r24, 0x2E	; 46
    3d6c:	df 01       	movw	r26, r30
    3d6e:	1d 92       	st	X+, r1
    3d70:	8a 95       	dec	r24
    3d72:	e9 f7       	brne	.-6      	; 0x3d6e <fat_open+0x66>

    fs->partition = partition;
    3d74:	50 92 ce 03 	sts	0x03CE, r5
    3d78:	40 92 cd 03 	sts	0x03CD, r4
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    3d7c:	f2 01       	movw	r30, r4
    3d7e:	a1 84       	ldd	r10, Z+9	; 0x09
    3d80:	b2 84       	ldd	r11, Z+10	; 0x0a
    3d82:	c3 84       	ldd	r12, Z+11	; 0x0b
    3d84:	d4 84       	ldd	r13, Z+12	; 0x0c
    3d86:	95 01       	movw	r18, r10
    3d88:	a6 01       	movw	r20, r12
    3d8a:	60 e0       	ldi	r22, 0x00	; 0
    3d8c:	70 e0       	ldi	r23, 0x00	; 0
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	09 e0       	ldi	r16, 0x09	; 9
    3d94:	0e 94 16 34 	call	0x682c	; 0x682c <__ashldi3>
    3d98:	2e af       	std	Y+62, r18	; 0x3e
    3d9a:	3f af       	std	Y+63, r19	; 0x3f
    3d9c:	21 96       	adiw	r28, 0x01	; 1
    3d9e:	4f af       	std	Y+63, r20	; 0x3f
    3da0:	21 97       	sbiw	r28, 0x01	; 1
    3da2:	22 96       	adiw	r28, 0x02	; 2
    3da4:	5f af       	std	Y+63, r21	; 0x3f
    3da6:	22 97       	sbiw	r28, 0x02	; 2
    3da8:	23 96       	adiw	r28, 0x03	; 3
    3daa:	6f af       	std	Y+63, r22	; 0x3f
    3dac:	23 97       	sbiw	r28, 0x03	; 3
    3dae:	24 96       	adiw	r28, 0x04	; 4
    3db0:	7f af       	std	Y+63, r23	; 0x3f
    3db2:	24 97       	sbiw	r28, 0x04	; 4
    3db4:	25 96       	adiw	r28, 0x05	; 5
    3db6:	8f af       	std	Y+63, r24	; 0x3f
    3db8:	25 97       	sbiw	r28, 0x05	; 5
    3dba:	26 96       	adiw	r28, 0x06	; 6
    3dbc:	9f af       	std	Y+63, r25	; 0x3f
    3dbe:	26 97       	sbiw	r28, 0x06	; 6
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    3dc0:	25 5f       	subi	r18, 0xF5	; 245
    3dc2:	31 e0       	ldi	r19, 0x01	; 1
    3dc4:	fe ad       	ldd	r31, Y+62	; 0x3e
    3dc6:	2f 17       	cp	r18, r31
    3dc8:	08 f0       	brcs	.+2      	; 0x3dcc <fat_open+0xc4>
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	ef ac       	ldd	r14, Y+63	; 0x3f
    3dce:	3e 0d       	add	r19, r14
    3dd0:	41 e0       	ldi	r20, 0x01	; 1
    3dd2:	3e 15       	cp	r19, r14
    3dd4:	08 f0       	brcs	.+2      	; 0x3dd8 <fat_open+0xd0>
    3dd6:	40 e0       	ldi	r20, 0x00	; 0
    3dd8:	21 96       	adiw	r28, 0x01	; 1
    3dda:	ff ac       	ldd	r15, Y+63	; 0x3f
    3ddc:	21 97       	sbiw	r28, 0x01	; 1
    3dde:	4f 0d       	add	r20, r15
    3de0:	51 e0       	ldi	r21, 0x01	; 1
    3de2:	4f 15       	cp	r20, r15
    3de4:	08 f0       	brcs	.+2      	; 0x3de8 <fat_open+0xe0>
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	22 96       	adiw	r28, 0x02	; 2
    3dea:	0f ad       	ldd	r16, Y+63	; 0x3f
    3dec:	22 97       	sbiw	r28, 0x02	; 2
    3dee:	50 0f       	add	r21, r16
    3df0:	61 e0       	ldi	r22, 0x01	; 1
    3df2:	50 17       	cp	r21, r16
    3df4:	08 f0       	brcs	.+2      	; 0x3df8 <fat_open+0xf0>
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	23 96       	adiw	r28, 0x03	; 3
    3dfa:	1f ad       	ldd	r17, Y+63	; 0x3f
    3dfc:	23 97       	sbiw	r28, 0x03	; 3
    3dfe:	61 0f       	add	r22, r17
    3e00:	71 e0       	ldi	r23, 0x01	; 1
    3e02:	61 17       	cp	r22, r17
    3e04:	08 f0       	brcs	.+2      	; 0x3e08 <fat_open+0x100>
    3e06:	70 e0       	ldi	r23, 0x00	; 0
    3e08:	24 96       	adiw	r28, 0x04	; 4
    3e0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e0c:	24 97       	sbiw	r28, 0x04	; 4
    3e0e:	78 0f       	add	r23, r24
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	24 96       	adiw	r28, 0x04	; 4
    3e14:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e16:	24 97       	sbiw	r28, 0x04	; 4
    3e18:	79 17       	cp	r23, r25
    3e1a:	08 f0       	brcs	.+2      	; 0x3e1e <fat_open+0x116>
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	25 96       	adiw	r28, 0x05	; 5
    3e20:	af ad       	ldd	r26, Y+63	; 0x3f
    3e22:	25 97       	sbiw	r28, 0x05	; 5
    3e24:	8a 0f       	add	r24, r26
    3e26:	91 e0       	ldi	r25, 0x01	; 1
    3e28:	8a 17       	cp	r24, r26
    3e2a:	08 f0       	brcs	.+2      	; 0x3e2e <fat_open+0x126>
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	d2 01       	movw	r26, r4
    3e30:	ed 91       	ld	r30, X+
    3e32:	fc 91       	ld	r31, X
    3e34:	26 96       	adiw	r28, 0x06	; 6
    3e36:	bf ad       	ldd	r27, Y+63	; 0x3f
    3e38:	26 97       	sbiw	r28, 0x06	; 6
    3e3a:	9b 0f       	add	r25, r27
    3e3c:	8e 01       	movw	r16, r28
    3e3e:	0f 5f       	subi	r16, 0xFF	; 255
    3e40:	1f 4f       	sbci	r17, 0xFF	; 255
    3e42:	a5 e2       	ldi	r26, 0x25	; 37
    3e44:	ea 2e       	mov	r14, r26
    3e46:	f1 2c       	mov	r15, r1
    3e48:	09 95       	icall
    3e4a:	88 23       	and	r24, r24
    3e4c:	09 f4       	brne	.+2      	; 0x3e50 <fat_open+0x148>
    3e4e:	78 c3       	rjmp	.+1776   	; 0x4540 <fat_open+0x838>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    3e50:	29 80       	ldd	r2, Y+1	; 0x01
    3e52:	3a 80       	ldd	r3, Y+2	; 0x02
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    3e54:	ec 81       	ldd	r30, Y+4	; 0x04
    3e56:	fd 81       	ldd	r31, Y+5	; 0x05
    3e58:	ff a7       	std	Y+47, r31	; 0x2f
    3e5a:	ee a7       	std	Y+46, r30	; 0x2e
    uint8_t sectors_per_cluster = buffer[0x02];
    3e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e5e:	f8 ab       	std	Y+48, r31	; 0x30
    uint8_t fat_copies = buffer[0x05];
    3e60:	ee 80       	ldd	r14, Y+6	; 0x06
    3e62:	e9 aa       	std	Y+49, r14	; 0x31
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    3e64:	0f 81       	ldd	r16, Y+7	; 0x07
    3e66:	18 85       	ldd	r17, Y+8	; 0x08
    3e68:	1b ab       	std	Y+51, r17	; 0x33
    3e6a:	0a ab       	std	Y+50, r16	; 0x32
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    3e6c:	89 85       	ldd	r24, Y+9	; 0x09
    3e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    3e70:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e72:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e74:	3d ab       	std	Y+53, r19	; 0x35
    3e76:	2c ab       	std	Y+52, r18	; 0x34
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    3e78:	ae 88       	ldd	r10, Y+22	; 0x16
    3e7a:	bf 88       	ldd	r11, Y+23	; 0x17
    3e7c:	c8 8c       	ldd	r12, Y+24	; 0x18
    3e7e:	d9 8c       	ldd	r13, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    3e80:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3e82:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3e84:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3e86:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3e88:	4e ab       	std	Y+54, r20	; 0x36
    3e8a:	5f ab       	std	Y+55, r21	; 0x37
    3e8c:	68 af       	std	Y+56, r22	; 0x38
    3e8e:	79 af       	std	Y+57, r23	; 0x39
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
    3e90:	ea a0       	ldd	r14, Y+34	; 0x22
    3e92:	fb a0       	ldd	r15, Y+35	; 0x23
    3e94:	0c a1       	ldd	r16, Y+36	; 0x24
    3e96:	1d a1       	ldd	r17, Y+37	; 0x25
    3e98:	ea ae       	std	Y+58, r14	; 0x3a
    3e9a:	fb ae       	std	Y+59, r15	; 0x3b
    3e9c:	0c af       	std	Y+60, r16	; 0x3c
    3e9e:	1d af       	std	Y+61, r17	; 0x3d
#endif

    if(sector_count == 0)
    3ea0:	a1 14       	cp	r10, r1
    3ea2:	b1 04       	cpc	r11, r1
    3ea4:	c1 04       	cpc	r12, r1
    3ea6:	d1 04       	cpc	r13, r1
    3ea8:	31 f4       	brne	.+12     	; 0x3eb6 <fat_open+0x1ae>
    {
        if(sector_count_16 == 0)
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <fat_open+0x1a8>
    3eae:	48 c3       	rjmp	.+1680   	; 0x4540 <fat_open+0x838>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    3eb0:	5c 01       	movw	r10, r24
    3eb2:	cc 24       	eor	r12, r12
    3eb4:	dd 24       	eor	r13, r13
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    3eb6:	0c a9       	ldd	r16, Y+52	; 0x34
    3eb8:	1d a9       	ldd	r17, Y+53	; 0x35
    3eba:	01 15       	cp	r16, r1
    3ebc:	11 05       	cpc	r17, r1
    3ebe:	41 f0       	breq	.+16     	; 0x3ed0 <fat_open+0x1c8>
        sectors_per_fat32 = sectors_per_fat;
    3ec0:	98 01       	movw	r18, r16
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	2e ab       	std	Y+54, r18	; 0x36
    3ec8:	3f ab       	std	Y+55, r19	; 0x37
    3eca:	48 af       	std	Y+56, r20	; 0x38
    3ecc:	59 af       	std	Y+57, r21	; 0x39
    3ece:	0a c0       	rjmp	.+20     	; 0x3ee4 <fat_open+0x1dc>
    else if(sectors_per_fat32 == 0)
    3ed0:	6e a9       	ldd	r22, Y+54	; 0x36
    3ed2:	7f a9       	ldd	r23, Y+55	; 0x37
    3ed4:	88 ad       	ldd	r24, Y+56	; 0x38
    3ed6:	99 ad       	ldd	r25, Y+57	; 0x39
    3ed8:	61 15       	cp	r22, r1
    3eda:	71 05       	cpc	r23, r1
    3edc:	81 05       	cpc	r24, r1
    3ede:	91 05       	cpc	r25, r1
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <fat_open+0x1dc>
    3ee2:	2e c3       	rjmp	.+1628   	; 0x4540 <fat_open+0x838>
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    3ee4:	ee a5       	ldd	r30, Y+46	; 0x2e
    3ee6:	ff a5       	ldd	r31, Y+47	; 0x2f
    3ee8:	cf 01       	movw	r24, r30
    3eea:	a0 e0       	ldi	r26, 0x00	; 0
    3eec:	b0 e0       	ldi	r27, 0x00	; 0
    3eee:	86 01       	movw	r16, r12
    3ef0:	75 01       	movw	r14, r10
    3ef2:	e8 1a       	sub	r14, r24
    3ef4:	f9 0a       	sbc	r15, r25
    3ef6:	0a 0b       	sbc	r16, r26
    3ef8:	1b 0b       	sbc	r17, r27
    3efa:	f9 a9       	ldd	r31, Y+49	; 0x31
    3efc:	2f 2f       	mov	r18, r31
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	40 e0       	ldi	r20, 0x00	; 0
    3f02:	50 e0       	ldi	r21, 0x00	; 0
    3f04:	6e a9       	ldd	r22, Y+54	; 0x36
    3f06:	7f a9       	ldd	r23, Y+55	; 0x37
    3f08:	88 ad       	ldd	r24, Y+56	; 0x38
    3f0a:	99 ad       	ldd	r25, Y+57	; 0x39
    3f0c:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    3f10:	e6 1a       	sub	r14, r22
    3f12:	f7 0a       	sbc	r15, r23
    3f14:	08 0b       	sbc	r16, r24
    3f16:	19 0b       	sbc	r17, r25
    3f18:	c1 01       	movw	r24, r2
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	2a a9       	ldd	r18, Y+50	; 0x32
    3f1e:	3b a9       	ldd	r19, Y+51	; 0x33
    3f20:	45 e0       	ldi	r20, 0x05	; 5
    3f22:	22 0f       	add	r18, r18
    3f24:	33 1f       	adc	r19, r19
    3f26:	4a 95       	dec	r20
    3f28:	e1 f7       	brne	.-8      	; 0x3f22 <fat_open+0x21a>
    3f2a:	82 0f       	add	r24, r18
    3f2c:	93 1f       	adc	r25, r19
    3f2e:	b1 01       	movw	r22, r2
    3f30:	0e 94 1d 39 	call	0x723a	; 0x723a <__udivmodhi4>
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	e6 1a       	sub	r14, r22
    3f3a:	f7 0a       	sbc	r15, r23
    3f3c:	08 0b       	sbc	r16, r24
    3f3e:	19 0b       	sbc	r17, r25
    3f40:	68 a9       	ldd	r22, Y+48	; 0x30
    3f42:	26 2f       	mov	r18, r22
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	40 e0       	ldi	r20, 0x00	; 0
    3f48:	50 e0       	ldi	r21, 0x00	; 0
    3f4a:	c8 01       	movw	r24, r16
    3f4c:	b7 01       	movw	r22, r14
    3f4e:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodsi4>
    3f52:	39 01       	movw	r6, r18
    3f54:	4a 01       	movw	r8, r20
    if(data_cluster_count < 4085)
    3f56:	75 ef       	ldi	r23, 0xF5	; 245
    3f58:	67 16       	cp	r6, r23
    3f5a:	7f e0       	ldi	r23, 0x0F	; 15
    3f5c:	77 06       	cpc	r7, r23
    3f5e:	70 e0       	ldi	r23, 0x00	; 0
    3f60:	87 06       	cpc	r8, r23
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	97 06       	cpc	r9, r23
    3f66:	08 f4       	brcc	.+2      	; 0x3f6a <fat_open+0x262>
    3f68:	eb c2       	rjmp	.+1494   	; 0x4540 <fat_open+0x838>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    3f6a:	85 ef       	ldi	r24, 0xF5	; 245
    3f6c:	68 16       	cp	r6, r24
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	78 06       	cpc	r7, r24
    3f72:	80 e0       	ldi	r24, 0x00	; 0
    3f74:	88 06       	cpc	r8, r24
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	98 06       	cpc	r9, r24
    3f7a:	28 f4       	brcc	.+10     	; 0x3f86 <fat_open+0x27e>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    3f7c:	86 e0       	ldi	r24, 0x06	; 6
    3f7e:	d2 01       	movw	r26, r4
    3f80:	18 96       	adiw	r26, 0x08	; 8
    3f82:	8c 93       	st	X, r24
    3f84:	03 c0       	rjmp	.+6      	; 0x3f8c <fat_open+0x284>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    3f86:	8b e0       	ldi	r24, 0x0B	; 11
    3f88:	f2 01       	movw	r30, r4
    3f8a:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    3f8c:	8c e2       	ldi	r24, 0x2C	; 44
    3f8e:	ef ec       	ldi	r30, 0xCF	; 207
    3f90:	f3 e0       	ldi	r31, 0x03	; 3
    3f92:	df 01       	movw	r26, r30
    3f94:	1d 92       	st	X+, r1
    3f96:	8a 95       	dec	r24
    3f98:	e9 f7       	brne	.-6      	; 0x3f94 <fat_open+0x28c>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    3f9a:	71 01       	movw	r14, r2
    3f9c:	00 e0       	ldi	r16, 0x00	; 0
    3f9e:	10 e0       	ldi	r17, 0x00	; 0
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	50 e0       	ldi	r21, 0x00	; 0
    3fa8:	2e a2       	std	Y+38, r2	; 0x26
    3faa:	ff a2       	std	Y+39, r15	; 0x27
    3fac:	08 a7       	std	Y+40, r16	; 0x28
    3fae:	19 a7       	std	Y+41, r17	; 0x29
    3fb0:	2a a7       	std	Y+42, r18	; 0x2a
    3fb2:	3b a7       	std	Y+43, r19	; 0x2b
    3fb4:	4c a7       	std	Y+44, r20	; 0x2c
    3fb6:	5d a7       	std	Y+45, r21	; 0x2d
    3fb8:	95 01       	movw	r18, r10
    3fba:	a6 01       	movw	r20, r12
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	70 e0       	ldi	r23, 0x00	; 0
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	ae a0       	ldd	r10, Y+38	; 0x26
    3fc6:	bf a0       	ldd	r11, Y+39	; 0x27
    3fc8:	cc 24       	eor	r12, r12
    3fca:	dd 24       	eor	r13, r13
    3fcc:	ee 24       	eor	r14, r14
    3fce:	ff 24       	eor	r15, r15
    3fd0:	00 e0       	ldi	r16, 0x00	; 0
    3fd2:	10 e0       	ldi	r17, 0x00	; 0
    3fd4:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    3fd8:	20 93 cf 03 	sts	0x03CF, r18
    3fdc:	30 93 d0 03 	sts	0x03D0, r19
    3fe0:	40 93 d1 03 	sts	0x03D1, r20
    3fe4:	50 93 d2 03 	sts	0x03D2, r21
    3fe8:	60 93 d3 03 	sts	0x03D3, r22
    3fec:	70 93 d4 03 	sts	0x03D4, r23
    3ff0:	80 93 d5 03 	sts	0x03D5, r24
    3ff4:	90 93 d6 03 	sts	0x03D6, r25

    header->fat_offset = /* jump to partition */
    3ff8:	0e a5       	ldd	r16, Y+46	; 0x2e
    3ffa:	1f a5       	ldd	r17, Y+47	; 0x2f
    3ffc:	98 01       	movw	r18, r16
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	50 e0       	ldi	r21, 0x00	; 0
    4002:	60 e0       	ldi	r22, 0x00	; 0
    4004:	70 e0       	ldi	r23, 0x00	; 0
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	00 e0       	ldi	r16, 0x00	; 0
    400c:	10 e0       	ldi	r17, 0x00	; 0
    400e:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    4012:	a3 2f       	mov	r26, r19
    4014:	b4 2f       	mov	r27, r20
    4016:	15 2f       	mov	r17, r21
    4018:	06 2f       	mov	r16, r22
    401a:	f7 2e       	mov	r15, r23
    401c:	d8 2e       	mov	r13, r24
    401e:	ce ac       	ldd	r12, Y+62	; 0x3e
    4020:	c2 0e       	add	r12, r18
    4022:	f1 e0       	ldi	r31, 0x01	; 1
    4024:	c2 16       	cp	r12, r18
    4026:	08 f0       	brcs	.+2      	; 0x402a <fat_open+0x322>
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	3f ad       	ldd	r19, Y+63	; 0x3f
    402c:	3a 0f       	add	r19, r26
    402e:	e1 e0       	ldi	r30, 0x01	; 1
    4030:	3a 17       	cp	r19, r26
    4032:	08 f0       	brcs	.+2      	; 0x4036 <fat_open+0x32e>
    4034:	e0 e0       	ldi	r30, 0x00	; 0
    4036:	ef 2e       	mov	r14, r31
    4038:	e3 0e       	add	r14, r19
    403a:	21 e0       	ldi	r18, 0x01	; 1
    403c:	e3 16       	cp	r14, r19
    403e:	08 f0       	brcs	.+2      	; 0x4042 <fat_open+0x33a>
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	e2 2b       	or	r30, r18
    4044:	21 96       	adiw	r28, 0x01	; 1
    4046:	4f ad       	ldd	r20, Y+63	; 0x3f
    4048:	21 97       	sbiw	r28, 0x01	; 1
    404a:	4b 0f       	add	r20, r27
    404c:	31 e0       	ldi	r19, 0x01	; 1
    404e:	4b 17       	cp	r20, r27
    4050:	08 f0       	brcs	.+2      	; 0x4054 <fat_open+0x34c>
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	ae 2f       	mov	r26, r30
    4056:	a4 0f       	add	r26, r20
    4058:	21 e0       	ldi	r18, 0x01	; 1
    405a:	a4 17       	cp	r26, r20
    405c:	08 f0       	brcs	.+2      	; 0x4060 <fat_open+0x358>
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	32 2b       	or	r19, r18
    4062:	22 96       	adiw	r28, 0x02	; 2
    4064:	5f ad       	ldd	r21, Y+63	; 0x3f
    4066:	22 97       	sbiw	r28, 0x02	; 2
    4068:	51 0f       	add	r21, r17
    406a:	41 e0       	ldi	r20, 0x01	; 1
    406c:	51 17       	cp	r21, r17
    406e:	08 f0       	brcs	.+2      	; 0x4072 <fat_open+0x36a>
    4070:	40 e0       	ldi	r20, 0x00	; 0
    4072:	f3 2f       	mov	r31, r19
    4074:	f5 0f       	add	r31, r21
    4076:	21 e0       	ldi	r18, 0x01	; 1
    4078:	f5 17       	cp	r31, r21
    407a:	08 f0       	brcs	.+2      	; 0x407e <fat_open+0x376>
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	42 2b       	or	r20, r18
    4080:	23 96       	adiw	r28, 0x03	; 3
    4082:	6f ad       	ldd	r22, Y+63	; 0x3f
    4084:	23 97       	sbiw	r28, 0x03	; 3
    4086:	60 0f       	add	r22, r16
    4088:	31 e0       	ldi	r19, 0x01	; 1
    408a:	60 17       	cp	r22, r16
    408c:	08 f0       	brcs	.+2      	; 0x4090 <fat_open+0x388>
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	e4 2f       	mov	r30, r20
    4092:	e6 0f       	add	r30, r22
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	e6 17       	cp	r30, r22
    4098:	08 f0       	brcs	.+2      	; 0x409c <fat_open+0x394>
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	32 2b       	or	r19, r18
    409e:	24 96       	adiw	r28, 0x04	; 4
    40a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    40a2:	24 97       	sbiw	r28, 0x04	; 4
    40a4:	7f 0d       	add	r23, r15
    40a6:	41 e0       	ldi	r20, 0x01	; 1
    40a8:	7f 15       	cp	r23, r15
    40aa:	08 f0       	brcs	.+2      	; 0x40ae <fat_open+0x3a6>
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	53 2f       	mov	r21, r19
    40b0:	57 0f       	add	r21, r23
    40b2:	21 e0       	ldi	r18, 0x01	; 1
    40b4:	57 17       	cp	r21, r23
    40b6:	08 f0       	brcs	.+2      	; 0x40ba <fat_open+0x3b2>
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	42 2b       	or	r20, r18
    40bc:	25 96       	adiw	r28, 0x05	; 5
    40be:	8f ad       	ldd	r24, Y+63	; 0x3f
    40c0:	25 97       	sbiw	r28, 0x05	; 5
    40c2:	8d 0d       	add	r24, r13
    40c4:	21 e0       	ldi	r18, 0x01	; 1
    40c6:	8d 15       	cp	r24, r13
    40c8:	08 f0       	brcs	.+2      	; 0x40cc <fat_open+0x3c4>
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	48 0f       	add	r20, r24
    40ce:	31 e0       	ldi	r19, 0x01	; 1
    40d0:	48 17       	cp	r20, r24
    40d2:	08 f0       	brcs	.+2      	; 0x40d6 <fat_open+0x3ce>
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	23 2b       	or	r18, r19
    40d8:	26 96       	adiw	r28, 0x06	; 6
    40da:	1f ad       	ldd	r17, Y+63	; 0x3f
    40dc:	26 97       	sbiw	r28, 0x06	; 6
    40de:	91 0f       	add	r25, r17
    40e0:	29 0f       	add	r18, r25
    40e2:	c0 92 d7 03 	sts	0x03D7, r12
    40e6:	e0 92 d8 03 	sts	0x03D8, r14
    40ea:	a0 93 d9 03 	sts	0x03D9, r26
    40ee:	f0 93 da 03 	sts	0x03DA, r31
    40f2:	e0 93 db 03 	sts	0x03DB, r30
    40f6:	50 93 dc 03 	sts	0x03DC, r21
    40fa:	40 93 dd 03 	sts	0x03DD, r20
    40fe:	20 93 de 03 	sts	0x03DE, r18
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    4102:	d2 01       	movw	r26, r4
    4104:	18 96       	adiw	r26, 0x08	; 8
    4106:	8c 91       	ld	r24, X
    4108:	86 30       	cpi	r24, 0x06	; 6
    410a:	29 f0       	breq	.+10     	; 0x4116 <fat_open+0x40e>
    410c:	64 e0       	ldi	r22, 0x04	; 4
    410e:	70 e0       	ldi	r23, 0x00	; 0
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	04 c0       	rjmp	.+8      	; 0x411e <fat_open+0x416>
    4116:	62 e0       	ldi	r22, 0x02	; 2
    4118:	70 e0       	ldi	r23, 0x00	; 0
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	12 e0       	ldi	r17, 0x02	; 2
    4120:	e1 2e       	mov	r14, r17
    4122:	f1 2c       	mov	r15, r1
    4124:	01 2d       	mov	r16, r1
    4126:	11 2d       	mov	r17, r1
    4128:	6e 0c       	add	r6, r14
    412a:	7f 1c       	adc	r7, r15
    412c:	80 1e       	adc	r8, r16
    412e:	91 1e       	adc	r9, r17
    4130:	a4 01       	movw	r20, r8
    4132:	93 01       	movw	r18, r6
    4134:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    4138:	60 93 df 03 	sts	0x03DF, r22
    413c:	70 93 e0 03 	sts	0x03E0, r23
    4140:	80 93 e1 03 	sts	0x03E1, r24
    4144:	90 93 e2 03 	sts	0x03E2, r25

    header->sector_size = bytes_per_sector;
    4148:	30 92 e4 03 	sts	0x03E4, r3
    414c:	20 92 e3 03 	sts	0x03E3, r2
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    4150:	f8 a8       	ldd	r15, Y+48	; 0x30
    4152:	8f 2d       	mov	r24, r15
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	8c 01       	movw	r16, r24
    4158:	02 9d       	mul	r16, r2
    415a:	c0 01       	movw	r24, r0
    415c:	03 9d       	mul	r16, r3
    415e:	90 0d       	add	r25, r0
    4160:	12 9d       	mul	r17, r2
    4162:	90 0d       	add	r25, r0
    4164:	11 24       	eor	r1, r1
    4166:	90 93 e6 03 	sts	0x03E6, r25
    416a:	80 93 e5 03 	sts	0x03E5, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    416e:	d2 01       	movw	r26, r4
    4170:	18 96       	adiw	r26, 0x08	; 8
    4172:	8c 91       	ld	r24, X
    4174:	f9 a8       	ldd	r15, Y+49	; 0x31
    4176:	ef 2c       	mov	r14, r15
    4178:	ff 24       	eor	r15, r15
    417a:	00 e0       	ldi	r16, 0x00	; 0
    417c:	10 e0       	ldi	r17, 0x00	; 0
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	27 96       	adiw	r28, 0x07	; 7
    4188:	ef ae       	std	Y+63, r14	; 0x3f
    418a:	27 97       	sbiw	r28, 0x07	; 7
    418c:	28 96       	adiw	r28, 0x08	; 8
    418e:	ff ae       	std	Y+63, r15	; 0x3f
    4190:	28 97       	sbiw	r28, 0x08	; 8
    4192:	29 96       	adiw	r28, 0x09	; 9
    4194:	0f af       	std	Y+63, r16	; 0x3f
    4196:	29 97       	sbiw	r28, 0x09	; 9
    4198:	2a 96       	adiw	r28, 0x0a	; 10
    419a:	1f af       	std	Y+63, r17	; 0x3f
    419c:	2a 97       	sbiw	r28, 0x0a	; 10
    419e:	2b 96       	adiw	r28, 0x0b	; 11
    41a0:	2f af       	std	Y+63, r18	; 0x3f
    41a2:	2b 97       	sbiw	r28, 0x0b	; 11
    41a4:	2c 96       	adiw	r28, 0x0c	; 12
    41a6:	3f af       	std	Y+63, r19	; 0x3f
    41a8:	2c 97       	sbiw	r28, 0x0c	; 12
    41aa:	2d 96       	adiw	r28, 0x0d	; 13
    41ac:	4f af       	std	Y+63, r20	; 0x3f
    41ae:	2d 97       	sbiw	r28, 0x0d	; 13
    41b0:	2e 96       	adiw	r28, 0x0e	; 14
    41b2:	5f af       	std	Y+63, r21	; 0x3f
    41b4:	2e 97       	sbiw	r28, 0x0e	; 14
    41b6:	86 30       	cpi	r24, 0x06	; 6
    41b8:	09 f0       	breq	.+2      	; 0x41bc <fat_open+0x4b4>
    41ba:	fa c0       	rjmp	.+500    	; 0x43b0 <fat_open+0x6a8>
#endif
    {
        header->root_dir_offset = /* jump to fats */
    41bc:	0c a9       	ldd	r16, Y+52	; 0x34
    41be:	1d a9       	ldd	r17, Y+53	; 0x35
    41c0:	2e a1       	ldd	r18, Y+38	; 0x26
    41c2:	3f a1       	ldd	r19, Y+39	; 0x27
    41c4:	40 e0       	ldi	r20, 0x00	; 0
    41c6:	50 e0       	ldi	r21, 0x00	; 0
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	58 01       	movw	r10, r16
    41d2:	cc 24       	eor	r12, r12
    41d4:	dd 24       	eor	r13, r13
    41d6:	ee 24       	eor	r14, r14
    41d8:	ff 24       	eor	r15, r15
    41da:	00 e0       	ldi	r16, 0x00	; 0
    41dc:	10 e0       	ldi	r17, 0x00	; 0
    41de:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    41e2:	27 96       	adiw	r28, 0x07	; 7
    41e4:	af ac       	ldd	r10, Y+63	; 0x3f
    41e6:	27 97       	sbiw	r28, 0x07	; 7
    41e8:	bb 24       	eor	r11, r11
    41ea:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    41ee:	f0 90 d7 03 	lds	r15, 0x03D7
    41f2:	e0 91 d8 03 	lds	r30, 0x03D8
    41f6:	b0 91 d9 03 	lds	r27, 0x03D9
    41fa:	10 91 da 03 	lds	r17, 0x03DA
    41fe:	00 91 db 03 	lds	r16, 0x03DB
    4202:	a0 90 dc 03 	lds	r10, 0x03DC
    4206:	90 90 dd 03 	lds	r9, 0x03DD
    420a:	a0 91 de 03 	lds	r26, 0x03DE
    420e:	f2 0e       	add	r15, r18
    4210:	f1 e0       	ldi	r31, 0x01	; 1
    4212:	f2 16       	cp	r15, r18
    4214:	08 f0       	brcs	.+2      	; 0x4218 <fat_open+0x510>
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	23 2f       	mov	r18, r19
    421a:	2e 0f       	add	r18, r30
    421c:	e1 e0       	ldi	r30, 0x01	; 1
    421e:	23 17       	cp	r18, r19
    4220:	08 f0       	brcs	.+2      	; 0x4224 <fat_open+0x51c>
    4222:	e0 e0       	ldi	r30, 0x00	; 0
    4224:	ef 2e       	mov	r14, r31
    4226:	e2 0e       	add	r14, r18
    4228:	31 e0       	ldi	r19, 0x01	; 1
    422a:	e2 16       	cp	r14, r18
    422c:	08 f0       	brcs	.+2      	; 0x4230 <fat_open+0x528>
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	e3 2b       	or	r30, r19
    4232:	24 2f       	mov	r18, r20
    4234:	2b 0f       	add	r18, r27
    4236:	f1 e0       	ldi	r31, 0x01	; 1
    4238:	24 17       	cp	r18, r20
    423a:	08 f0       	brcs	.+2      	; 0x423e <fat_open+0x536>
    423c:	f0 e0       	ldi	r31, 0x00	; 0
    423e:	de 2e       	mov	r13, r30
    4240:	d2 0e       	add	r13, r18
    4242:	31 e0       	ldi	r19, 0x01	; 1
    4244:	d2 16       	cp	r13, r18
    4246:	08 f0       	brcs	.+2      	; 0x424a <fat_open+0x542>
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	f3 2b       	or	r31, r19
    424c:	25 2f       	mov	r18, r21
    424e:	21 0f       	add	r18, r17
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	25 17       	cp	r18, r21
    4254:	08 f0       	brcs	.+2      	; 0x4258 <fat_open+0x550>
    4256:	40 e0       	ldi	r20, 0x00	; 0
    4258:	cf 2e       	mov	r12, r31
    425a:	c2 0e       	add	r12, r18
    425c:	31 e0       	ldi	r19, 0x01	; 1
    425e:	c2 16       	cp	r12, r18
    4260:	08 f0       	brcs	.+2      	; 0x4264 <fat_open+0x55c>
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	43 2b       	or	r20, r19
    4266:	26 2f       	mov	r18, r22
    4268:	20 0f       	add	r18, r16
    426a:	51 e0       	ldi	r21, 0x01	; 1
    426c:	26 17       	cp	r18, r22
    426e:	08 f0       	brcs	.+2      	; 0x4272 <fat_open+0x56a>
    4270:	50 e0       	ldi	r21, 0x00	; 0
    4272:	b4 2e       	mov	r11, r20
    4274:	b2 0e       	add	r11, r18
    4276:	31 e0       	ldi	r19, 0x01	; 1
    4278:	b2 16       	cp	r11, r18
    427a:	08 f0       	brcs	.+2      	; 0x427e <fat_open+0x576>
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	53 2b       	or	r21, r19
    4280:	27 2f       	mov	r18, r23
    4282:	2a 0d       	add	r18, r10
    4284:	41 e0       	ldi	r20, 0x01	; 1
    4286:	27 17       	cp	r18, r23
    4288:	08 f0       	brcs	.+2      	; 0x428c <fat_open+0x584>
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	a5 2e       	mov	r10, r21
    428e:	a2 0e       	add	r10, r18
    4290:	31 e0       	ldi	r19, 0x01	; 1
    4292:	a2 16       	cp	r10, r18
    4294:	08 f0       	brcs	.+2      	; 0x4298 <fat_open+0x590>
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	43 2b       	or	r20, r19
    429a:	28 2f       	mov	r18, r24
    429c:	29 0d       	add	r18, r9
    429e:	31 e0       	ldi	r19, 0x01	; 1
    42a0:	28 17       	cp	r18, r24
    42a2:	08 f0       	brcs	.+2      	; 0x42a6 <fat_open+0x59e>
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	94 2e       	mov	r9, r20
    42a8:	92 0e       	add	r9, r18
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	92 16       	cp	r9, r18
    42ae:	08 f0       	brcs	.+2      	; 0x42b2 <fat_open+0x5aa>
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	13 2f       	mov	r17, r19
    42b4:	18 2b       	or	r17, r24
    42b6:	a9 0f       	add	r26, r25
    42b8:	1a 0f       	add	r17, r26
    42ba:	f0 92 ef 03 	sts	0x03EF, r15
    42be:	e0 92 f0 03 	sts	0x03F0, r14
    42c2:	d0 92 f1 03 	sts	0x03F1, r13
    42c6:	c0 92 f2 03 	sts	0x03F2, r12
    42ca:	b0 92 f3 03 	sts	0x03F3, r11
    42ce:	a0 92 f4 03 	sts	0x03F4, r10
    42d2:	90 92 f5 03 	sts	0x03F5, r9
    42d6:	10 93 f6 03 	sts	0x03F6, r17
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    42da:	2a a9       	ldd	r18, Y+50	; 0x32
    42dc:	3b a9       	ldd	r19, Y+51	; 0x33
    42de:	40 e0       	ldi	r20, 0x00	; 0
    42e0:	50 e0       	ldi	r21, 0x00	; 0
    42e2:	60 e0       	ldi	r22, 0x00	; 0
    42e4:	70 e0       	ldi	r23, 0x00	; 0
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	05 e0       	ldi	r16, 0x05	; 5
    42ec:	0e 94 16 34 	call	0x682c	; 0x682c <__ashldi3>
    42f0:	2f 0d       	add	r18, r15
    42f2:	e1 e0       	ldi	r30, 0x01	; 1
    42f4:	2f 15       	cp	r18, r15
    42f6:	08 f0       	brcs	.+2      	; 0x42fa <fat_open+0x5f2>
    42f8:	e0 e0       	ldi	r30, 0x00	; 0
    42fa:	3e 0d       	add	r19, r14
    42fc:	f1 e0       	ldi	r31, 0x01	; 1
    42fe:	3e 15       	cp	r19, r14
    4300:	08 f0       	brcs	.+2      	; 0x4304 <fat_open+0x5fc>
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	be 2f       	mov	r27, r30
    4306:	b3 0f       	add	r27, r19
    4308:	e1 e0       	ldi	r30, 0x01	; 1
    430a:	b3 17       	cp	r27, r19
    430c:	08 f0       	brcs	.+2      	; 0x4310 <fat_open+0x608>
    430e:	e0 e0       	ldi	r30, 0x00	; 0
    4310:	fe 2b       	or	r31, r30
    4312:	4d 0d       	add	r20, r13
    4314:	e1 e0       	ldi	r30, 0x01	; 1
    4316:	4d 15       	cp	r20, r13
    4318:	08 f0       	brcs	.+2      	; 0x431c <fat_open+0x614>
    431a:	e0 e0       	ldi	r30, 0x00	; 0
    431c:	af 2f       	mov	r26, r31
    431e:	a4 0f       	add	r26, r20
    4320:	31 e0       	ldi	r19, 0x01	; 1
    4322:	a4 17       	cp	r26, r20
    4324:	08 f0       	brcs	.+2      	; 0x4328 <fat_open+0x620>
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	e3 2b       	or	r30, r19
    432a:	5c 0d       	add	r21, r12
    432c:	41 e0       	ldi	r20, 0x01	; 1
    432e:	5c 15       	cp	r21, r12
    4330:	08 f0       	brcs	.+2      	; 0x4334 <fat_open+0x62c>
    4332:	40 e0       	ldi	r20, 0x00	; 0
    4334:	fe 2f       	mov	r31, r30
    4336:	f5 0f       	add	r31, r21
    4338:	31 e0       	ldi	r19, 0x01	; 1
    433a:	f5 17       	cp	r31, r21
    433c:	08 f0       	brcs	.+2      	; 0x4340 <fat_open+0x638>
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	43 2b       	or	r20, r19
    4342:	6b 0d       	add	r22, r11
    4344:	51 e0       	ldi	r21, 0x01	; 1
    4346:	6b 15       	cp	r22, r11
    4348:	08 f0       	brcs	.+2      	; 0x434c <fat_open+0x644>
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	e4 2f       	mov	r30, r20
    434e:	e6 0f       	add	r30, r22
    4350:	31 e0       	ldi	r19, 0x01	; 1
    4352:	e6 17       	cp	r30, r22
    4354:	08 f0       	brcs	.+2      	; 0x4358 <fat_open+0x650>
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	53 2b       	or	r21, r19
    435a:	7a 0d       	add	r23, r10
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	7a 15       	cp	r23, r10
    4360:	08 f0       	brcs	.+2      	; 0x4364 <fat_open+0x65c>
    4362:	40 e0       	ldi	r20, 0x00	; 0
    4364:	65 2f       	mov	r22, r21
    4366:	67 0f       	add	r22, r23
    4368:	31 e0       	ldi	r19, 0x01	; 1
    436a:	67 17       	cp	r22, r23
    436c:	08 f0       	brcs	.+2      	; 0x4370 <fat_open+0x668>
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	43 2b       	or	r20, r19
    4372:	89 0d       	add	r24, r9
    4374:	31 e0       	ldi	r19, 0x01	; 1
    4376:	89 15       	cp	r24, r9
    4378:	08 f0       	brcs	.+2      	; 0x437c <fat_open+0x674>
    437a:	30 e0       	ldi	r19, 0x00	; 0
    437c:	54 2f       	mov	r21, r20
    437e:	58 0f       	add	r21, r24
    4380:	41 e0       	ldi	r20, 0x01	; 1
    4382:	58 17       	cp	r21, r24
    4384:	08 f0       	brcs	.+2      	; 0x4388 <fat_open+0x680>
    4386:	40 e0       	ldi	r20, 0x00	; 0
    4388:	34 2b       	or	r19, r20
    438a:	19 0f       	add	r17, r25
    438c:	31 0f       	add	r19, r17
    438e:	20 93 e7 03 	sts	0x03E7, r18
    4392:	b0 93 e8 03 	sts	0x03E8, r27
    4396:	a0 93 e9 03 	sts	0x03E9, r26
    439a:	f0 93 ea 03 	sts	0x03EA, r31
    439e:	e0 93 eb 03 	sts	0x03EB, r30
    43a2:	60 93 ec 03 	sts	0x03EC, r22
    43a6:	50 93 ed 03 	sts	0x03ED, r21
    43aa:	30 93 ee 03 	sts	0x03EE, r19
    43ae:	a1 c0       	rjmp	.+322    	; 0x44f2 <fat_open+0x7ea>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    43b0:	27 96       	adiw	r28, 0x07	; 7
    43b2:	af ac       	ldd	r10, Y+63	; 0x3f
    43b4:	27 97       	sbiw	r28, 0x07	; 7
    43b6:	2e a1       	ldd	r18, Y+38	; 0x26
    43b8:	3f a1       	ldd	r19, Y+39	; 0x27
    43ba:	40 e0       	ldi	r20, 0x00	; 0
    43bc:	50 e0       	ldi	r21, 0x00	; 0
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	70 e0       	ldi	r23, 0x00	; 0
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	bb 24       	eor	r11, r11
    43c8:	cc 24       	eor	r12, r12
    43ca:	dd 24       	eor	r13, r13
    43cc:	ee 24       	eor	r14, r14
    43ce:	ff 24       	eor	r15, r15
    43d0:	00 e0       	ldi	r16, 0x00	; 0
    43d2:	10 e0       	ldi	r17, 0x00	; 0
    43d4:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    43d8:	ee a8       	ldd	r14, Y+54	; 0x36
    43da:	ff a8       	ldd	r15, Y+55	; 0x37
    43dc:	08 ad       	ldd	r16, Y+56	; 0x38
    43de:	19 ad       	ldd	r17, Y+57	; 0x39
    43e0:	17 01       	movw	r2, r14
    43e2:	28 01       	movw	r4, r16
    43e4:	57 01       	movw	r10, r14
    43e6:	62 01       	movw	r12, r4
    43e8:	ee 24       	eor	r14, r14
    43ea:	ff 24       	eor	r15, r15
    43ec:	00 e0       	ldi	r16, 0x00	; 0
    43ee:	10 e0       	ldi	r17, 0x00	; 0
    43f0:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    43f4:	a0 91 d7 03 	lds	r26, 0x03D7
    43f8:	e0 91 d8 03 	lds	r30, 0x03D8
    43fc:	10 91 d9 03 	lds	r17, 0x03D9
    4400:	00 91 da 03 	lds	r16, 0x03DA
    4404:	f0 90 db 03 	lds	r15, 0x03DB
    4408:	d0 90 dc 03 	lds	r13, 0x03DC
    440c:	c0 90 dd 03 	lds	r12, 0x03DD
    4410:	b0 91 de 03 	lds	r27, 0x03DE
    4414:	a2 0f       	add	r26, r18
    4416:	f1 e0       	ldi	r31, 0x01	; 1
    4418:	a2 17       	cp	r26, r18
    441a:	08 f0       	brcs	.+2      	; 0x441e <fat_open+0x716>
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	23 2f       	mov	r18, r19
    4420:	2e 0f       	add	r18, r30
    4422:	e1 e0       	ldi	r30, 0x01	; 1
    4424:	23 17       	cp	r18, r19
    4426:	08 f0       	brcs	.+2      	; 0x442a <fat_open+0x722>
    4428:	e0 e0       	ldi	r30, 0x00	; 0
    442a:	ef 2e       	mov	r14, r31
    442c:	e2 0e       	add	r14, r18
    442e:	31 e0       	ldi	r19, 0x01	; 1
    4430:	e2 16       	cp	r14, r18
    4432:	08 f0       	brcs	.+2      	; 0x4436 <fat_open+0x72e>
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	e3 2b       	or	r30, r19
    4438:	24 2f       	mov	r18, r20
    443a:	21 0f       	add	r18, r17
    443c:	f1 e0       	ldi	r31, 0x01	; 1
    443e:	24 17       	cp	r18, r20
    4440:	08 f0       	brcs	.+2      	; 0x4444 <fat_open+0x73c>
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	1e 2f       	mov	r17, r30
    4446:	12 0f       	add	r17, r18
    4448:	31 e0       	ldi	r19, 0x01	; 1
    444a:	12 17       	cp	r17, r18
    444c:	08 f0       	brcs	.+2      	; 0x4450 <fat_open+0x748>
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	f3 2b       	or	r31, r19
    4452:	25 2f       	mov	r18, r21
    4454:	20 0f       	add	r18, r16
    4456:	41 e0       	ldi	r20, 0x01	; 1
    4458:	25 17       	cp	r18, r21
    445a:	08 f0       	brcs	.+2      	; 0x445e <fat_open+0x756>
    445c:	40 e0       	ldi	r20, 0x00	; 0
    445e:	ef 2f       	mov	r30, r31
    4460:	e2 0f       	add	r30, r18
    4462:	31 e0       	ldi	r19, 0x01	; 1
    4464:	e2 17       	cp	r30, r18
    4466:	08 f0       	brcs	.+2      	; 0x446a <fat_open+0x762>
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	43 2b       	or	r20, r19
    446c:	26 2f       	mov	r18, r22
    446e:	2f 0d       	add	r18, r15
    4470:	51 e0       	ldi	r21, 0x01	; 1
    4472:	26 17       	cp	r18, r22
    4474:	08 f0       	brcs	.+2      	; 0x4478 <fat_open+0x770>
    4476:	50 e0       	ldi	r21, 0x00	; 0
    4478:	64 2f       	mov	r22, r20
    447a:	62 0f       	add	r22, r18
    447c:	31 e0       	ldi	r19, 0x01	; 1
    447e:	62 17       	cp	r22, r18
    4480:	08 f0       	brcs	.+2      	; 0x4484 <fat_open+0x77c>
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	53 2b       	or	r21, r19
    4486:	27 2f       	mov	r18, r23
    4488:	2d 0d       	add	r18, r13
    448a:	41 e0       	ldi	r20, 0x01	; 1
    448c:	27 17       	cp	r18, r23
    448e:	08 f0       	brcs	.+2      	; 0x4492 <fat_open+0x78a>
    4490:	40 e0       	ldi	r20, 0x00	; 0
    4492:	52 0f       	add	r21, r18
    4494:	31 e0       	ldi	r19, 0x01	; 1
    4496:	52 17       	cp	r21, r18
    4498:	08 f0       	brcs	.+2      	; 0x449c <fat_open+0x794>
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	43 2b       	or	r20, r19
    449e:	28 2f       	mov	r18, r24
    44a0:	2c 0d       	add	r18, r12
    44a2:	31 e0       	ldi	r19, 0x01	; 1
    44a4:	28 17       	cp	r18, r24
    44a6:	08 f0       	brcs	.+2      	; 0x44aa <fat_open+0x7a2>
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	42 0f       	add	r20, r18
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	42 17       	cp	r20, r18
    44b0:	08 f0       	brcs	.+2      	; 0x44b4 <fat_open+0x7ac>
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	38 2b       	or	r19, r24
    44b6:	b9 0f       	add	r27, r25
    44b8:	3b 0f       	add	r19, r27
    44ba:	a0 93 e7 03 	sts	0x03E7, r26
    44be:	e0 92 e8 03 	sts	0x03E8, r14
    44c2:	10 93 e9 03 	sts	0x03E9, r17
    44c6:	e0 93 ea 03 	sts	0x03EA, r30
    44ca:	60 93 eb 03 	sts	0x03EB, r22
    44ce:	50 93 ec 03 	sts	0x03EC, r21
    44d2:	40 93 ed 03 	sts	0x03ED, r20
    44d6:	30 93 ee 03 	sts	0x03EE, r19
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    44da:	0a ad       	ldd	r16, Y+58	; 0x3a
    44dc:	1b ad       	ldd	r17, Y+59	; 0x3b
    44de:	2c ad       	ldd	r18, Y+60	; 0x3c
    44e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    44e2:	00 93 f7 03 	sts	0x03F7, r16
    44e6:	10 93 f8 03 	sts	0x03F8, r17
    44ea:	20 93 f9 03 	sts	0x03F9, r18
    44ee:	30 93 fa 03 	sts	0x03FA, r19
    44f2:	2d ec       	ldi	r18, 0xCD	; 205
    44f4:	33 e0       	ldi	r19, 0x03	; 3
    44f6:	02 c0       	rjmp	.+4      	; 0x44fc <fat_open+0x7f4>
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    44fc:	c9 01       	movw	r24, r18
    44fe:	c3 5b       	subi	r28, 0xB3	; 179
    4500:	df 4f       	sbci	r29, 0xFF	; 255
    4502:	0f b6       	in	r0, 0x3f	; 63
    4504:	f8 94       	cli
    4506:	de bf       	out	0x3e, r29	; 62
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	cd bf       	out	0x3d, r28	; 61
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	1f 91       	pop	r17
    4512:	0f 91       	pop	r16
    4514:	ff 90       	pop	r15
    4516:	ef 90       	pop	r14
    4518:	df 90       	pop	r13
    451a:	cf 90       	pop	r12
    451c:	bf 90       	pop	r11
    451e:	af 90       	pop	r10
    4520:	9f 90       	pop	r9
    4522:	8f 90       	pop	r8
    4524:	7f 90       	pop	r7
    4526:	6f 90       	pop	r6
    4528:	5f 90       	pop	r5
    452a:	4f 90       	pop	r4
    452c:	3f 90       	pop	r3
    452e:	2f 90       	pop	r2
    4530:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    4532:	80 91 cd 03 	lds	r24, 0x03CD
    4536:	90 91 ce 03 	lds	r25, 0x03CE
    453a:	89 2b       	or	r24, r25
    453c:	e9 f6       	brne	.-70     	; 0x44f8 <fat_open+0x7f0>
    453e:	13 cc       	rjmp	.-2010   	; 0x3d66 <fat_open+0x5e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    4540:	10 92 ce 03 	sts	0x03CE, r1
    4544:	10 92 cd 03 	sts	0x03CD, r1
    4548:	d7 cf       	rjmp	.-82     	; 0x44f8 <fat_open+0x7f0>

0000454a <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    454a:	2f 92       	push	r2
    454c:	3f 92       	push	r3
    454e:	4f 92       	push	r4
    4550:	5f 92       	push	r5
    4552:	6f 92       	push	r6
    4554:	7f 92       	push	r7
    4556:	8f 92       	push	r8
    4558:	9f 92       	push	r9
    455a:	af 92       	push	r10
    455c:	bf 92       	push	r11
    455e:	cf 92       	push	r12
    4560:	df 92       	push	r13
    4562:	ef 92       	push	r14
    4564:	ff 92       	push	r15
    4566:	0f 93       	push	r16
    4568:	1f 93       	push	r17
    456a:	df 93       	push	r29
    456c:	cf 93       	push	r28
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	69 97       	sbiw	r28, 0x19	; 25
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	9d 87       	std	Y+13, r25	; 0x0d
    4580:	8c 87       	std	Y+12, r24	; 0x0c
    4582:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    4584:	89 2b       	or	r24, r25
    4586:	09 f4       	brne	.+2      	; 0x458a <fat_find_offset_for_dir_entry+0x40>
    4588:	e2 c2       	rjmp	.+1476   	; 0x4b4e <fat_find_offset_for_dir_entry+0x604>
    458a:	41 15       	cp	r20, r1
    458c:	51 05       	cpc	r21, r1
    458e:	09 f4       	brne	.+2      	; 0x4592 <fat_find_offset_for_dir_entry+0x48>
    4590:	de c2       	rjmp	.+1468   	; 0x4b4e <fat_find_offset_for_dir_entry+0x604>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    4592:	da 01       	movw	r26, r20
    4594:	0d 90       	ld	r0, X+
    4596:	00 20       	and	r0, r0
    4598:	e9 f7       	brne	.-6      	; 0x4594 <fat_find_offset_for_dir_entry+0x4a>
    459a:	a4 1b       	sub	r26, r20
    459c:	b5 0b       	sbc	r27, r21
    459e:	cd 01       	movw	r24, r26
    45a0:	0b 96       	adiw	r24, 0x0b	; 11
    45a2:	6d e0       	ldi	r22, 0x0D	; 13
    45a4:	70 e0       	ldi	r23, 0x00	; 0
    45a6:	0e 94 1d 39 	call	0x723a	; 0x723a <__udivmodhi4>
    45aa:	46 2f       	mov	r20, r22
    45ac:	4f 5f       	subi	r20, 0xFF	; 255
    45ae:	4b 87       	std	Y+11, r20	; 0x0b
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    45b0:	d9 01       	movw	r26, r18
    45b2:	93 96       	adiw	r26, 0x23	; 35
    45b4:	8d 91       	ld	r24, X+
    45b6:	9d 91       	ld	r25, X+
    45b8:	0d 90       	ld	r0, X+
    45ba:	bc 91       	ld	r27, X
    45bc:	a0 2d       	mov	r26, r0
    45be:	8e 83       	std	Y+6, r24	; 0x06
    45c0:	9f 83       	std	Y+7, r25	; 0x07
    45c2:	a8 87       	std	Y+8, r26	; 0x08
    45c4:	b9 87       	std	Y+9, r27	; 0x09
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    45c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    45c8:	bd 85       	ldd	r27, Y+13	; 0x0d
    45ca:	ed 91       	ld	r30, X+
    45cc:	fc 91       	ld	r31, X
    45ce:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    45d0:	2e 81       	ldd	r18, Y+6	; 0x06
    45d2:	3f 81       	ldd	r19, Y+7	; 0x07
    45d4:	48 85       	ldd	r20, Y+8	; 0x08
    45d6:	59 85       	ldd	r21, Y+9	; 0x09
    45d8:	21 15       	cp	r18, r1
    45da:	31 05       	cpc	r19, r1
    45dc:	41 05       	cpc	r20, r1
    45de:	51 05       	cpc	r21, r1
    45e0:	71 f4       	brne	.+28     	; 0x45fe <fat_find_offset_for_dir_entry+0xb4>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    45e2:	8b 30       	cpi	r24, 0x0B	; 11
    45e4:	29 f5       	brne	.+74     	; 0x4630 <fat_find_offset_for_dir_entry+0xe6>
        {
            cluster_num = fs->header.root_dir_cluster;
    45e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    45e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    45ea:	9a 96       	adiw	r26, 0x2a	; 42
    45ec:	8d 91       	ld	r24, X+
    45ee:	9d 91       	ld	r25, X+
    45f0:	0d 90       	ld	r0, X+
    45f2:	bc 91       	ld	r27, X
    45f4:	a0 2d       	mov	r26, r0
    45f6:	8e 83       	std	Y+6, r24	; 0x06
    45f8:	9f 83       	std	Y+7, r25	; 0x07
    45fa:	a8 87       	std	Y+8, r26	; 0x08
    45fc:	b9 87       	std	Y+9, r27	; 0x09
    45fe:	1e 8a       	std	Y+22, r1	; 0x16
    4600:	1f 8a       	std	Y+23, r1	; 0x17
    4602:	18 8e       	std	Y+24, r1	; 0x18
    4604:	19 8e       	std	Y+25, r1	; 0x19
    4606:	33 24       	eor	r3, r3
    4608:	44 24       	eor	r4, r4
    460a:	55 24       	eor	r5, r5
    460c:	66 24       	eor	r6, r6
    460e:	dd 24       	eor	r13, r13
    4610:	cc 24       	eor	r12, r12
    4612:	bb 24       	eor	r11, r11
    4614:	aa 24       	eor	r10, r10
    4616:	22 24       	eor	r2, r2
    4618:	99 24       	eor	r9, r9
    461a:	88 24       	eor	r8, r8
    461c:	77 24       	eor	r7, r7
    461e:	1e 86       	std	Y+14, r1	; 0x0e
    4620:	1f 86       	std	Y+15, r1	; 0x0f
    4622:	18 8a       	std	Y+16, r1	; 0x10
    4624:	19 8a       	std	Y+17, r1	; 0x11
    4626:	1a 8a       	std	Y+18, r1	; 0x12
    4628:	1b 8a       	std	Y+19, r1	; 0x13
    462a:	1c 8a       	std	Y+20, r1	; 0x14
    462c:	1d 8a       	std	Y+21, r1	; 0x15
    462e:	34 c0       	rjmp	.+104    	; 0x4698 <fat_find_offset_for_dir_entry+0x14e>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    4630:	ec 85       	ldd	r30, Y+12	; 0x0c
    4632:	fd 85       	ldd	r31, Y+13	; 0x0d
    4634:	d2 a0       	ldd	r13, Z+34	; 0x22
    4636:	c3 a0       	ldd	r12, Z+35	; 0x23
    4638:	b4 a0       	ldd	r11, Z+36	; 0x24
    463a:	a5 a0       	ldd	r10, Z+37	; 0x25
    463c:	26 a0       	ldd	r2, Z+38	; 0x26
    463e:	97 a0       	ldd	r9, Z+39	; 0x27
    4640:	80 a4       	ldd	r8, Z+40	; 0x28
    4642:	71 a4       	ldd	r7, Z+41	; 0x29
            offset_to = fs->header.cluster_zero_offset;
    4644:	f2 8d       	ldd	r31, Z+26	; 0x1a
    4646:	fe 87       	std	Y+14, r31	; 0x0e
    4648:	ac 85       	ldd	r26, Y+12	; 0x0c
    464a:	bd 85       	ldd	r27, Y+13	; 0x0d
    464c:	5b 96       	adiw	r26, 0x1b	; 27
    464e:	bc 91       	ld	r27, X
    4650:	bf 87       	std	Y+15, r27	; 0x0f
    4652:	ec 85       	ldd	r30, Y+12	; 0x0c
    4654:	fd 85       	ldd	r31, Y+13	; 0x0d
    4656:	f4 8d       	ldd	r31, Z+28	; 0x1c
    4658:	f8 8b       	std	Y+16, r31	; 0x10
    465a:	ac 85       	ldd	r26, Y+12	; 0x0c
    465c:	bd 85       	ldd	r27, Y+13	; 0x0d
    465e:	5d 96       	adiw	r26, 0x1d	; 29
    4660:	bc 91       	ld	r27, X
    4662:	b9 8b       	std	Y+17, r27	; 0x11
    4664:	ec 85       	ldd	r30, Y+12	; 0x0c
    4666:	fd 85       	ldd	r31, Y+13	; 0x0d
    4668:	f6 8d       	ldd	r31, Z+30	; 0x1e
    466a:	fa 8b       	std	Y+18, r31	; 0x12
    466c:	ac 85       	ldd	r26, Y+12	; 0x0c
    466e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4670:	5f 96       	adiw	r26, 0x1f	; 31
    4672:	bc 91       	ld	r27, X
    4674:	bb 8b       	std	Y+19, r27	; 0x13
    4676:	ec 85       	ldd	r30, Y+12	; 0x0c
    4678:	fd 85       	ldd	r31, Y+13	; 0x0d
    467a:	f0 a1       	ldd	r31, Z+32	; 0x20
    467c:	fc 8b       	std	Y+20, r31	; 0x14
    467e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4680:	bd 85       	ldd	r27, Y+13	; 0x0d
    4682:	91 96       	adiw	r26, 0x21	; 33
    4684:	bc 91       	ld	r27, X
    4686:	bd 8b       	std	Y+21, r27	; 0x15
    4688:	de 8a       	std	Y+22, r13	; 0x16
    468a:	cf 8a       	std	Y+23, r12	; 0x17
    468c:	b8 8e       	std	Y+24, r11	; 0x18
    468e:	a9 8e       	std	Y+25, r10	; 0x19
    4690:	32 2c       	mov	r3, r2
    4692:	49 2c       	mov	r4, r9
    4694:	58 2c       	mov	r5, r8
    4696:	67 2c       	mov	r6, r7
    4698:	1a 86       	std	Y+10, r1	; 0x0a
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    469a:	ee 85       	ldd	r30, Y+14	; 0x0e
    469c:	de 16       	cp	r13, r30
    469e:	09 f0       	breq	.+2      	; 0x46a2 <fat_find_offset_for_dir_entry+0x158>
    46a0:	d1 c1       	rjmp	.+930    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46a2:	ff 85       	ldd	r31, Y+15	; 0x0f
    46a4:	cf 16       	cp	r12, r31
    46a6:	09 f0       	breq	.+2      	; 0x46aa <fat_find_offset_for_dir_entry+0x160>
    46a8:	cd c1       	rjmp	.+922    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46aa:	28 89       	ldd	r18, Y+16	; 0x10
    46ac:	b2 16       	cp	r11, r18
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <fat_find_offset_for_dir_entry+0x168>
    46b0:	c9 c1       	rjmp	.+914    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46b2:	39 89       	ldd	r19, Y+17	; 0x11
    46b4:	a3 16       	cp	r10, r19
    46b6:	09 f0       	breq	.+2      	; 0x46ba <fat_find_offset_for_dir_entry+0x170>
    46b8:	c5 c1       	rjmp	.+906    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46ba:	4a 89       	ldd	r20, Y+18	; 0x12
    46bc:	24 16       	cp	r2, r20
    46be:	09 f0       	breq	.+2      	; 0x46c2 <fat_find_offset_for_dir_entry+0x178>
    46c0:	c1 c1       	rjmp	.+898    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46c2:	5b 89       	ldd	r21, Y+19	; 0x13
    46c4:	95 16       	cp	r9, r21
    46c6:	09 f0       	breq	.+2      	; 0x46ca <fat_find_offset_for_dir_entry+0x180>
    46c8:	bd c1       	rjmp	.+890    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46ca:	8c 89       	ldd	r24, Y+20	; 0x14
    46cc:	88 16       	cp	r8, r24
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <fat_find_offset_for_dir_entry+0x188>
    46d0:	b9 c1       	rjmp	.+882    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
    46d2:	9d 89       	ldd	r25, Y+21	; 0x15
    46d4:	79 16       	cp	r7, r25
    46d6:	09 f0       	breq	.+2      	; 0x46da <fat_find_offset_for_dir_entry+0x190>
    46d8:	b5 c1       	rjmp	.+874    	; 0x4a44 <fat_find_offset_for_dir_entry+0x4fa>
        {
            if(cluster_num == 0)
    46da:	2e 81       	ldd	r18, Y+6	; 0x06
    46dc:	3f 81       	ldd	r19, Y+7	; 0x07
    46de:	48 85       	ldd	r20, Y+8	; 0x08
    46e0:	59 85       	ldd	r21, Y+9	; 0x09
    46e2:	21 15       	cp	r18, r1
    46e4:	31 05       	cpc	r19, r1
    46e6:	41 05       	cpc	r20, r1
    46e8:	51 05       	cpc	r21, r1
    46ea:	09 f4       	brne	.+2      	; 0x46ee <fat_find_offset_for_dir_entry+0x1a4>
    46ec:	30 c2       	rjmp	.+1120   	; 0x4b4e <fat_find_offset_for_dir_entry+0x604>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    46ee:	8d 2d       	mov	r24, r13
    46f0:	8c 29       	or	r24, r12
    46f2:	8b 29       	or	r24, r11
    46f4:	8a 29       	or	r24, r10
    46f6:	82 29       	or	r24, r2
    46f8:	89 29       	or	r24, r9
    46fa:	88 29       	or	r24, r8
    46fc:	87 29       	or	r24, r7
    46fe:	09 f4       	brne	.+2      	; 0x4702 <fat_find_offset_for_dir_entry+0x1b8>
    4700:	ba c0       	rjmp	.+372    	; 0x4876 <fat_find_offset_for_dir_entry+0x32c>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    4702:	8c 85       	ldd	r24, Y+12	; 0x0c
    4704:	9d 85       	ldd	r25, Y+13	; 0x0d
    4706:	ba 01       	movw	r22, r20
    4708:	a9 01       	movw	r20, r18
    470a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
                if(!cluster_next)
    470e:	61 15       	cp	r22, r1
    4710:	71 05       	cpc	r23, r1
    4712:	81 05       	cpc	r24, r1
    4714:	91 05       	cpc	r25, r1
    4716:	09 f0       	breq	.+2      	; 0x471a <fat_find_offset_for_dir_entry+0x1d0>
    4718:	aa c0       	rjmp	.+340    	; 0x486e <fat_find_offset_for_dir_entry+0x324>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    471a:	8c 85       	ldd	r24, Y+12	; 0x0c
    471c:	9d 85       	ldd	r25, Y+13	; 0x0d
    471e:	4e 81       	ldd	r20, Y+6	; 0x06
    4720:	5f 81       	ldd	r21, Y+7	; 0x07
    4722:	68 85       	ldd	r22, Y+8	; 0x08
    4724:	79 85       	ldd	r23, Y+9	; 0x09
    4726:	01 e0       	ldi	r16, 0x01	; 1
    4728:	10 e0       	ldi	r17, 0x00	; 0
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	0e 94 bb 11 	call	0x2376	; 0x2376 <fat_append_clusters>
    4732:	6a 83       	std	Y+2, r22	; 0x02
    4734:	7b 83       	std	Y+3, r23	; 0x03
    4736:	8c 83       	std	Y+4, r24	; 0x04
    4738:	9d 83       	std	Y+5, r25	; 0x05
                    if(!cluster_next)
    473a:	61 15       	cp	r22, r1
    473c:	71 05       	cpc	r23, r1
    473e:	81 05       	cpc	r24, r1
    4740:	91 05       	cpc	r25, r1
    4742:	09 f4       	brne	.+2      	; 0x4746 <fat_find_offset_for_dir_entry+0x1fc>
    4744:	04 c2       	rjmp	.+1032   	; 0x4b4e <fat_find_offset_for_dir_entry+0x604>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	02 97       	sbiw	r24, 0x02	; 2
    474c:	a1 09       	sbc	r26, r1
    474e:	b1 09       	sbc	r27, r1
    4750:	5c 01       	movw	r10, r24
    4752:	6d 01       	movw	r12, r26
    4754:	02 96       	adiw	r24, 0x02	; 2
    4756:	a1 1d       	adc	r26, r1
    4758:	b1 1d       	adc	r27, r1
    475a:	8a 83       	std	Y+2, r24	; 0x02
    475c:	9b 83       	std	Y+3, r25	; 0x03
    475e:	ac 83       	std	Y+4, r26	; 0x04
    4760:	bd 83       	std	Y+5, r27	; 0x05
    4762:	ac 85       	ldd	r26, Y+12	; 0x0c
    4764:	bd 85       	ldd	r27, Y+13	; 0x0d
    4766:	58 96       	adiw	r26, 0x18	; 24
    4768:	2d 90       	ld	r2, X+
    476a:	3c 90       	ld	r3, X
    476c:	59 97       	sbiw	r26, 0x19	; 25
    476e:	95 01       	movw	r18, r10
    4770:	a6 01       	movw	r20, r12
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	80 e0       	ldi	r24, 0x00	; 0
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	51 01       	movw	r10, r2
    477c:	cc 24       	eor	r12, r12
    477e:	dd 24       	eor	r13, r13
    4780:	ee 24       	eor	r14, r14
    4782:	ff 24       	eor	r15, r15
    4784:	00 e0       	ldi	r16, 0x00	; 0
    4786:	10 e0       	ldi	r17, 0x00	; 0
    4788:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    478c:	c9 2e       	mov	r12, r25
    478e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4790:	fd 85       	ldd	r31, Y+13	; 0x0d
    4792:	b2 8d       	ldd	r27, Z+26	; 0x1a
    4794:	b3 8c       	ldd	r11, Z+27	; 0x1b
    4796:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4798:	05 8d       	ldd	r16, Z+29	; 0x1d
    479a:	f6 8c       	ldd	r15, Z+30	; 0x1e
    479c:	e7 8c       	ldd	r14, Z+31	; 0x1f
    479e:	d0 a0       	ldd	r13, Z+32	; 0x20
    47a0:	11 a1       	ldd	r17, Z+33	; 0x21
    47a2:	b2 0f       	add	r27, r18
    47a4:	e1 e0       	ldi	r30, 0x01	; 1
    47a6:	b2 17       	cp	r27, r18
    47a8:	08 f0       	brcs	.+2      	; 0x47ac <fat_find_offset_for_dir_entry+0x262>
    47aa:	e0 e0       	ldi	r30, 0x00	; 0
    47ac:	23 2f       	mov	r18, r19
    47ae:	2b 0d       	add	r18, r11
    47b0:	f1 e0       	ldi	r31, 0x01	; 1
    47b2:	23 17       	cp	r18, r19
    47b4:	08 f0       	brcs	.+2      	; 0x47b8 <fat_find_offset_for_dir_entry+0x26e>
    47b6:	f0 e0       	ldi	r31, 0x00	; 0
    47b8:	3e 2f       	mov	r19, r30
    47ba:	32 0f       	add	r19, r18
    47bc:	e1 e0       	ldi	r30, 0x01	; 1
    47be:	32 17       	cp	r19, r18
    47c0:	08 f0       	brcs	.+2      	; 0x47c4 <fat_find_offset_for_dir_entry+0x27a>
    47c2:	e0 e0       	ldi	r30, 0x00	; 0
    47c4:	fe 2b       	or	r31, r30
    47c6:	24 2f       	mov	r18, r20
    47c8:	2a 0f       	add	r18, r26
    47ca:	a1 e0       	ldi	r26, 0x01	; 1
    47cc:	24 17       	cp	r18, r20
    47ce:	08 f0       	brcs	.+2      	; 0x47d2 <fat_find_offset_for_dir_entry+0x288>
    47d0:	a0 e0       	ldi	r26, 0x00	; 0
    47d2:	4f 2f       	mov	r20, r31
    47d4:	42 0f       	add	r20, r18
    47d6:	e1 e0       	ldi	r30, 0x01	; 1
    47d8:	42 17       	cp	r20, r18
    47da:	08 f0       	brcs	.+2      	; 0x47de <fat_find_offset_for_dir_entry+0x294>
    47dc:	e0 e0       	ldi	r30, 0x00	; 0
    47de:	ae 2b       	or	r26, r30
    47e0:	25 2f       	mov	r18, r21
    47e2:	20 0f       	add	r18, r16
    47e4:	f1 e0       	ldi	r31, 0x01	; 1
    47e6:	25 17       	cp	r18, r21
    47e8:	08 f0       	brcs	.+2      	; 0x47ec <fat_find_offset_for_dir_entry+0x2a2>
    47ea:	f0 e0       	ldi	r31, 0x00	; 0
    47ec:	5a 2f       	mov	r21, r26
    47ee:	52 0f       	add	r21, r18
    47f0:	e1 e0       	ldi	r30, 0x01	; 1
    47f2:	52 17       	cp	r21, r18
    47f4:	08 f0       	brcs	.+2      	; 0x47f8 <fat_find_offset_for_dir_entry+0x2ae>
    47f6:	e0 e0       	ldi	r30, 0x00	; 0
    47f8:	fe 2b       	or	r31, r30
    47fa:	26 2f       	mov	r18, r22
    47fc:	2f 0d       	add	r18, r15
    47fe:	a1 e0       	ldi	r26, 0x01	; 1
    4800:	26 17       	cp	r18, r22
    4802:	08 f0       	brcs	.+2      	; 0x4806 <fat_find_offset_for_dir_entry+0x2bc>
    4804:	a0 e0       	ldi	r26, 0x00	; 0
    4806:	6f 2f       	mov	r22, r31
    4808:	62 0f       	add	r22, r18
    480a:	e1 e0       	ldi	r30, 0x01	; 1
    480c:	62 17       	cp	r22, r18
    480e:	08 f0       	brcs	.+2      	; 0x4812 <fat_find_offset_for_dir_entry+0x2c8>
    4810:	e0 e0       	ldi	r30, 0x00	; 0
    4812:	ae 2b       	or	r26, r30
    4814:	27 2f       	mov	r18, r23
    4816:	2e 0d       	add	r18, r14
    4818:	f1 e0       	ldi	r31, 0x01	; 1
    481a:	27 17       	cp	r18, r23
    481c:	08 f0       	brcs	.+2      	; 0x4820 <fat_find_offset_for_dir_entry+0x2d6>
    481e:	f0 e0       	ldi	r31, 0x00	; 0
    4820:	7a 2f       	mov	r23, r26
    4822:	72 0f       	add	r23, r18
    4824:	e1 e0       	ldi	r30, 0x01	; 1
    4826:	72 17       	cp	r23, r18
    4828:	08 f0       	brcs	.+2      	; 0x482c <fat_find_offset_for_dir_entry+0x2e2>
    482a:	e0 e0       	ldi	r30, 0x00	; 0
    482c:	fe 2b       	or	r31, r30
    482e:	28 2f       	mov	r18, r24
    4830:	2d 0d       	add	r18, r13
    4832:	e1 e0       	ldi	r30, 0x01	; 1
    4834:	28 17       	cp	r18, r24
    4836:	08 f0       	brcs	.+2      	; 0x483a <fat_find_offset_for_dir_entry+0x2f0>
    4838:	e0 e0       	ldi	r30, 0x00	; 0
    483a:	8f 2f       	mov	r24, r31
    483c:	82 0f       	add	r24, r18
    483e:	91 e0       	ldi	r25, 0x01	; 1
    4840:	82 17       	cp	r24, r18
    4842:	08 f0       	brcs	.+2      	; 0x4846 <fat_find_offset_for_dir_entry+0x2fc>
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	6e 2e       	mov	r6, r30
    4848:	69 2a       	or	r6, r25
    484a:	1c 0d       	add	r17, r12
    484c:	be 8b       	std	Y+22, r27	; 0x16
    484e:	3f 8b       	std	Y+23, r19	; 0x17
    4850:	48 8f       	std	Y+24, r20	; 0x18
    4852:	59 8f       	std	Y+25, r21	; 0x19
    4854:	36 2e       	mov	r3, r22
    4856:	47 2e       	mov	r4, r23
    4858:	58 2e       	mov	r5, r24
    485a:	61 0e       	add	r6, r17
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    485c:	8c 85       	ldd	r24, Y+12	; 0x0c
    485e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4860:	4a 81       	ldd	r20, Y+2	; 0x02
    4862:	5b 81       	ldd	r21, Y+3	; 0x03
    4864:	6c 81       	ldd	r22, Y+4	; 0x04
    4866:	7d 81       	ldd	r23, Y+5	; 0x05
    4868:	0e 94 0d 1c 	call	0x381a	; 0x381a <fat_clear_cluster>
    486c:	78 c1       	rjmp	.+752    	; 0x4b5e <fat_find_offset_for_dir_entry+0x614>

                    break;
    486e:	6e 83       	std	Y+6, r22	; 0x06
    4870:	7f 83       	std	Y+7, r23	; 0x07
    4872:	88 87       	std	Y+8, r24	; 0x08
    4874:	99 87       	std	Y+9, r25	; 0x09
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    4876:	2e 81       	ldd	r18, Y+6	; 0x06
    4878:	3f 81       	ldd	r19, Y+7	; 0x07
    487a:	48 85       	ldd	r20, Y+8	; 0x08
    487c:	59 85       	ldd	r21, Y+9	; 0x09
    487e:	22 30       	cpi	r18, 0x02	; 2
    4880:	31 05       	cpc	r19, r1
    4882:	41 05       	cpc	r20, r1
    4884:	51 05       	cpc	r21, r1
    4886:	48 f4       	brcc	.+18     	; 0x489a <fat_find_offset_for_dir_entry+0x350>
    4888:	dd 24       	eor	r13, r13
    488a:	cc 24       	eor	r12, r12
    488c:	bb 24       	eor	r11, r11
    488e:	aa 24       	eor	r10, r10
    4890:	22 24       	eor	r2, r2
    4892:	99 24       	eor	r9, r9
    4894:	88 24       	eor	r8, r8
    4896:	77 24       	eor	r7, r7
    4898:	8d c0       	rjmp	.+282    	; 0x49b4 <fat_find_offset_for_dir_entry+0x46a>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    489a:	8e 81       	ldd	r24, Y+6	; 0x06
    489c:	9f 81       	ldd	r25, Y+7	; 0x07
    489e:	a8 85       	ldd	r26, Y+8	; 0x08
    48a0:	b9 85       	ldd	r27, Y+9	; 0x09
    48a2:	02 97       	sbiw	r24, 0x02	; 2
    48a4:	a1 09       	sbc	r26, r1
    48a6:	b1 09       	sbc	r27, r1
    48a8:	5c 01       	movw	r10, r24
    48aa:	6d 01       	movw	r12, r26
    48ac:	02 96       	adiw	r24, 0x02	; 2
    48ae:	a1 1d       	adc	r26, r1
    48b0:	b1 1d       	adc	r27, r1
    48b2:	8e 83       	std	Y+6, r24	; 0x06
    48b4:	9f 83       	std	Y+7, r25	; 0x07
    48b6:	a8 87       	std	Y+8, r26	; 0x08
    48b8:	b9 87       	std	Y+9, r27	; 0x09
    48ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    48bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    48be:	58 96       	adiw	r26, 0x18	; 24
    48c0:	2d 90       	ld	r2, X+
    48c2:	3c 90       	ld	r3, X
    48c4:	59 97       	sbiw	r26, 0x19	; 25
    48c6:	95 01       	movw	r18, r10
    48c8:	a6 01       	movw	r20, r12
    48ca:	60 e0       	ldi	r22, 0x00	; 0
    48cc:	70 e0       	ldi	r23, 0x00	; 0
    48ce:	80 e0       	ldi	r24, 0x00	; 0
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	51 01       	movw	r10, r2
    48d4:	cc 24       	eor	r12, r12
    48d6:	dd 24       	eor	r13, r13
    48d8:	ee 24       	eor	r14, r14
    48da:	ff 24       	eor	r15, r15
    48dc:	00 e0       	ldi	r16, 0x00	; 0
    48de:	10 e0       	ldi	r17, 0x00	; 0
    48e0:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    48e4:	c9 2e       	mov	r12, r25
    48e6:	ec 85       	ldd	r30, Y+12	; 0x0c
    48e8:	fd 85       	ldd	r31, Y+13	; 0x0d
    48ea:	b2 8d       	ldd	r27, Z+26	; 0x1a
    48ec:	b3 8c       	ldd	r11, Z+27	; 0x1b
    48ee:	a4 8d       	ldd	r26, Z+28	; 0x1c
    48f0:	05 8d       	ldd	r16, Z+29	; 0x1d
    48f2:	f6 8c       	ldd	r15, Z+30	; 0x1e
    48f4:	e7 8c       	ldd	r14, Z+31	; 0x1f
    48f6:	d0 a0       	ldd	r13, Z+32	; 0x20
    48f8:	11 a1       	ldd	r17, Z+33	; 0x21
    48fa:	b2 0f       	add	r27, r18
    48fc:	e1 e0       	ldi	r30, 0x01	; 1
    48fe:	b2 17       	cp	r27, r18
    4900:	08 f0       	brcs	.+2      	; 0x4904 <fat_find_offset_for_dir_entry+0x3ba>
    4902:	e0 e0       	ldi	r30, 0x00	; 0
    4904:	23 2f       	mov	r18, r19
    4906:	2b 0d       	add	r18, r11
    4908:	f1 e0       	ldi	r31, 0x01	; 1
    490a:	23 17       	cp	r18, r19
    490c:	08 f0       	brcs	.+2      	; 0x4910 <fat_find_offset_for_dir_entry+0x3c6>
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	3e 2f       	mov	r19, r30
    4912:	32 0f       	add	r19, r18
    4914:	e1 e0       	ldi	r30, 0x01	; 1
    4916:	32 17       	cp	r19, r18
    4918:	08 f0       	brcs	.+2      	; 0x491c <fat_find_offset_for_dir_entry+0x3d2>
    491a:	e0 e0       	ldi	r30, 0x00	; 0
    491c:	fe 2b       	or	r31, r30
    491e:	24 2f       	mov	r18, r20
    4920:	2a 0f       	add	r18, r26
    4922:	a1 e0       	ldi	r26, 0x01	; 1
    4924:	24 17       	cp	r18, r20
    4926:	08 f0       	brcs	.+2      	; 0x492a <fat_find_offset_for_dir_entry+0x3e0>
    4928:	a0 e0       	ldi	r26, 0x00	; 0
    492a:	4f 2f       	mov	r20, r31
    492c:	42 0f       	add	r20, r18
    492e:	e1 e0       	ldi	r30, 0x01	; 1
    4930:	42 17       	cp	r20, r18
    4932:	08 f0       	brcs	.+2      	; 0x4936 <fat_find_offset_for_dir_entry+0x3ec>
    4934:	e0 e0       	ldi	r30, 0x00	; 0
    4936:	ae 2b       	or	r26, r30
    4938:	25 2f       	mov	r18, r21
    493a:	20 0f       	add	r18, r16
    493c:	f1 e0       	ldi	r31, 0x01	; 1
    493e:	25 17       	cp	r18, r21
    4940:	08 f0       	brcs	.+2      	; 0x4944 <fat_find_offset_for_dir_entry+0x3fa>
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	5a 2f       	mov	r21, r26
    4946:	52 0f       	add	r21, r18
    4948:	e1 e0       	ldi	r30, 0x01	; 1
    494a:	52 17       	cp	r21, r18
    494c:	08 f0       	brcs	.+2      	; 0x4950 <fat_find_offset_for_dir_entry+0x406>
    494e:	e0 e0       	ldi	r30, 0x00	; 0
    4950:	fe 2b       	or	r31, r30
    4952:	26 2f       	mov	r18, r22
    4954:	2f 0d       	add	r18, r15
    4956:	a1 e0       	ldi	r26, 0x01	; 1
    4958:	26 17       	cp	r18, r22
    495a:	08 f0       	brcs	.+2      	; 0x495e <fat_find_offset_for_dir_entry+0x414>
    495c:	a0 e0       	ldi	r26, 0x00	; 0
    495e:	6f 2f       	mov	r22, r31
    4960:	62 0f       	add	r22, r18
    4962:	e1 e0       	ldi	r30, 0x01	; 1
    4964:	62 17       	cp	r22, r18
    4966:	08 f0       	brcs	.+2      	; 0x496a <fat_find_offset_for_dir_entry+0x420>
    4968:	e0 e0       	ldi	r30, 0x00	; 0
    496a:	ae 2b       	or	r26, r30
    496c:	27 2f       	mov	r18, r23
    496e:	2e 0d       	add	r18, r14
    4970:	f1 e0       	ldi	r31, 0x01	; 1
    4972:	27 17       	cp	r18, r23
    4974:	08 f0       	brcs	.+2      	; 0x4978 <fat_find_offset_for_dir_entry+0x42e>
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	7a 2f       	mov	r23, r26
    497a:	72 0f       	add	r23, r18
    497c:	e1 e0       	ldi	r30, 0x01	; 1
    497e:	72 17       	cp	r23, r18
    4980:	08 f0       	brcs	.+2      	; 0x4984 <fat_find_offset_for_dir_entry+0x43a>
    4982:	e0 e0       	ldi	r30, 0x00	; 0
    4984:	fe 2b       	or	r31, r30
    4986:	28 2f       	mov	r18, r24
    4988:	2d 0d       	add	r18, r13
    498a:	e1 e0       	ldi	r30, 0x01	; 1
    498c:	28 17       	cp	r18, r24
    498e:	08 f0       	brcs	.+2      	; 0x4992 <fat_find_offset_for_dir_entry+0x448>
    4990:	e0 e0       	ldi	r30, 0x00	; 0
    4992:	8f 2f       	mov	r24, r31
    4994:	82 0f       	add	r24, r18
    4996:	91 e0       	ldi	r25, 0x01	; 1
    4998:	82 17       	cp	r24, r18
    499a:	08 f0       	brcs	.+2      	; 0x499e <fat_find_offset_for_dir_entry+0x454>
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	7e 2e       	mov	r7, r30
    49a0:	79 2a       	or	r7, r25
    49a2:	1c 0d       	add	r17, r12
    49a4:	db 2e       	mov	r13, r27
    49a6:	c3 2e       	mov	r12, r19
    49a8:	b4 2e       	mov	r11, r20
    49aa:	a5 2e       	mov	r10, r21
    49ac:	26 2e       	mov	r2, r22
    49ae:	97 2e       	mov	r9, r23
    49b0:	88 2e       	mov	r8, r24
    49b2:	71 0e       	add	r7, r17
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    49b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    49b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    49b8:	58 96       	adiw	r26, 0x18	; 24
    49ba:	8d 91       	ld	r24, X+
    49bc:	9c 91       	ld	r25, X
    49be:	59 97       	sbiw	r26, 0x19	; 25
    49c0:	9c 01       	movw	r18, r24
    49c2:	fd 2d       	mov	r31, r13
    49c4:	f8 0f       	add	r31, r24
    49c6:	e1 e0       	ldi	r30, 0x01	; 1
    49c8:	fd 15       	cp	r31, r13
    49ca:	08 f0       	brcs	.+2      	; 0x49ce <fat_find_offset_for_dir_entry+0x484>
    49cc:	e0 e0       	ldi	r30, 0x00	; 0
    49ce:	8c 2d       	mov	r24, r12
    49d0:	83 0f       	add	r24, r19
    49d2:	21 e0       	ldi	r18, 0x01	; 1
    49d4:	8c 15       	cp	r24, r12
    49d6:	08 f0       	brcs	.+2      	; 0x49da <fat_find_offset_for_dir_entry+0x490>
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	6e 2f       	mov	r22, r30
    49dc:	68 0f       	add	r22, r24
    49de:	91 e0       	ldi	r25, 0x01	; 1
    49e0:	68 17       	cp	r22, r24
    49e2:	08 f0       	brcs	.+2      	; 0x49e6 <fat_find_offset_for_dir_entry+0x49c>
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	92 2b       	or	r25, r18
    49e8:	9b 0d       	add	r25, r11
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	9b 15       	cp	r25, r11
    49ee:	08 f0       	brcs	.+2      	; 0x49f2 <fat_find_offset_for_dir_entry+0x4a8>
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	58 2f       	mov	r21, r24
    49f4:	5a 0d       	add	r21, r10
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	5a 15       	cp	r21, r10
    49fa:	08 f0       	brcs	.+2      	; 0x49fe <fat_find_offset_for_dir_entry+0x4b4>
    49fc:	80 e0       	ldi	r24, 0x00	; 0
    49fe:	48 2f       	mov	r20, r24
    4a00:	42 0d       	add	r20, r2
    4a02:	81 e0       	ldi	r24, 0x01	; 1
    4a04:	42 15       	cp	r20, r2
    4a06:	08 f0       	brcs	.+2      	; 0x4a0a <fat_find_offset_for_dir_entry+0x4c0>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	38 2f       	mov	r19, r24
    4a0c:	39 0d       	add	r19, r9
    4a0e:	81 e0       	ldi	r24, 0x01	; 1
    4a10:	39 15       	cp	r19, r9
    4a12:	08 f0       	brcs	.+2      	; 0x4a16 <fat_find_offset_for_dir_entry+0x4cc>
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	88 0d       	add	r24, r8
    4a18:	21 e0       	ldi	r18, 0x01	; 1
    4a1a:	88 15       	cp	r24, r8
    4a1c:	08 f0       	brcs	.+2      	; 0x4a20 <fat_find_offset_for_dir_entry+0x4d6>
    4a1e:	20 e0       	ldi	r18, 0x00	; 0
    4a20:	fe 87       	std	Y+14, r31	; 0x0e
    4a22:	6f 87       	std	Y+15, r22	; 0x0f
    4a24:	98 8b       	std	Y+16, r25	; 0x10
    4a26:	59 8b       	std	Y+17, r21	; 0x11
    4a28:	4a 8b       	std	Y+18, r20	; 0x12
    4a2a:	3b 8b       	std	Y+19, r19	; 0x13
    4a2c:	8c 8b       	std	Y+20, r24	; 0x14
    4a2e:	27 0d       	add	r18, r7
    4a30:	2d 8b       	std	Y+21, r18	; 0x15
    4a32:	de 8a       	std	Y+22, r13	; 0x16
    4a34:	cf 8a       	std	Y+23, r12	; 0x17
    4a36:	b8 8e       	std	Y+24, r11	; 0x18
    4a38:	a9 8e       	std	Y+25, r10	; 0x19
    4a3a:	32 2c       	mov	r3, r2
    4a3c:	49 2c       	mov	r4, r9
    4a3e:	58 2c       	mov	r5, r8
    4a40:	67 2c       	mov	r6, r7
    4a42:	1a 86       	std	Y+10, r1	; 0x0a
            free_dir_entries_found = 0;
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    4a44:	ac 85       	ldd	r26, Y+12	; 0x0c
    4a46:	bd 85       	ldd	r27, Y+13	; 0x0d
    4a48:	ed 91       	ld	r30, X+
    4a4a:	fc 91       	ld	r31, X
    4a4c:	01 90       	ld	r0, Z+
    4a4e:	f0 81       	ld	r31, Z
    4a50:	e0 2d       	mov	r30, r0
    4a52:	2d 2d       	mov	r18, r13
    4a54:	3c 2d       	mov	r19, r12
    4a56:	4b 2d       	mov	r20, r11
    4a58:	5a 2d       	mov	r21, r10
    4a5a:	62 2d       	mov	r22, r2
    4a5c:	79 2d       	mov	r23, r9
    4a5e:	88 2d       	mov	r24, r8
    4a60:	97 2d       	mov	r25, r7
    4a62:	8e 01       	movw	r16, r28
    4a64:	0f 5f       	subi	r16, 0xFF	; 255
    4a66:	1f 4f       	sbci	r17, 0xFF	; 255
    4a68:	b1 e0       	ldi	r27, 0x01	; 1
    4a6a:	eb 2e       	mov	r14, r27
    4a6c:	f1 2c       	mov	r15, r1
    4a6e:	09 95       	icall
    4a70:	88 23       	and	r24, r24
    4a72:	09 f4       	brne	.+2      	; 0x4a76 <fat_find_offset_for_dir_entry+0x52c>
    4a74:	6c c0       	rjmp	.+216    	; 0x4b4e <fat_find_offset_for_dir_entry+0x604>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    4a76:	89 81       	ldd	r24, Y+1	; 0x01
    4a78:	85 3e       	cpi	r24, 0xE5	; 229
    4a7a:	11 f0       	breq	.+4      	; 0x4a80 <fat_find_offset_for_dir_entry+0x536>
    4a7c:	88 23       	and	r24, r24
    4a7e:	b9 f5       	brne	.+110    	; 0x4aee <fat_find_offset_for_dir_entry+0x5a4>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    4a80:	ba 85       	ldd	r27, Y+10	; 0x0a
    4a82:	bf 5f       	subi	r27, 0xFF	; 255
    4a84:	ba 87       	std	Y+10, r27	; 0x0a
            if(free_dir_entries_found >= free_dir_entries_needed)
    4a86:	eb 85       	ldd	r30, Y+11	; 0x0b
    4a88:	be 17       	cp	r27, r30
    4a8a:	08 f0       	brcs	.+2      	; 0x4a8e <fat_find_offset_for_dir_entry+0x544>
    4a8c:	68 c0       	rjmp	.+208    	; 0x4b5e <fat_find_offset_for_dir_entry+0x614>
                break;

            offset += 32;
    4a8e:	7d 2d       	mov	r23, r13
    4a90:	70 5e       	subi	r23, 0xE0	; 224
    4a92:	81 e0       	ldi	r24, 0x01	; 1
    4a94:	7d 15       	cp	r23, r13
    4a96:	08 f0       	brcs	.+2      	; 0x4a9a <fat_find_offset_for_dir_entry+0x550>
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	68 2f       	mov	r22, r24
    4a9c:	6c 0d       	add	r22, r12
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	6c 15       	cp	r22, r12
    4aa2:	08 f0       	brcs	.+2      	; 0x4aa6 <fat_find_offset_for_dir_entry+0x55c>
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	58 2f       	mov	r21, r24
    4aa8:	5b 0d       	add	r21, r11
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	5b 15       	cp	r21, r11
    4aae:	08 f0       	brcs	.+2      	; 0x4ab2 <fat_find_offset_for_dir_entry+0x568>
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	48 2f       	mov	r20, r24
    4ab4:	4a 0d       	add	r20, r10
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	4a 15       	cp	r20, r10
    4aba:	08 f0       	brcs	.+2      	; 0x4abe <fat_find_offset_for_dir_entry+0x574>
    4abc:	80 e0       	ldi	r24, 0x00	; 0
    4abe:	38 2f       	mov	r19, r24
    4ac0:	32 0d       	add	r19, r2
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	32 15       	cp	r19, r2
    4ac6:	08 f0       	brcs	.+2      	; 0x4aca <fat_find_offset_for_dir_entry+0x580>
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	28 2f       	mov	r18, r24
    4acc:	29 0d       	add	r18, r9
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	29 15       	cp	r18, r9
    4ad2:	08 f0       	brcs	.+2      	; 0x4ad6 <fat_find_offset_for_dir_entry+0x58c>
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	88 0d       	add	r24, r8
    4ad8:	91 e0       	ldi	r25, 0x01	; 1
    4ada:	88 15       	cp	r24, r8
    4adc:	08 f0       	brcs	.+2      	; 0x4ae0 <fat_find_offset_for_dir_entry+0x596>
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	6b 01       	movw	r12, r22
    4ae2:	5a 01       	movw	r10, r20
    4ae4:	23 2e       	mov	r2, r19
    4ae6:	92 2e       	mov	r9, r18
    4ae8:	88 2e       	mov	r8, r24
    4aea:	79 0e       	add	r7, r25
    4aec:	d6 cd       	rjmp	.-1108   	; 0x469a <fat_find_offset_for_dir_entry+0x150>
        }
        else
        {
            offset += 32;
    4aee:	7d 2d       	mov	r23, r13
    4af0:	70 5e       	subi	r23, 0xE0	; 224
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	7d 15       	cp	r23, r13
    4af6:	08 f0       	brcs	.+2      	; 0x4afa <fat_find_offset_for_dir_entry+0x5b0>
    4af8:	80 e0       	ldi	r24, 0x00	; 0
    4afa:	68 2f       	mov	r22, r24
    4afc:	6c 0d       	add	r22, r12
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	6c 15       	cp	r22, r12
    4b02:	08 f0       	brcs	.+2      	; 0x4b06 <fat_find_offset_for_dir_entry+0x5bc>
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	58 2f       	mov	r21, r24
    4b08:	5b 0d       	add	r21, r11
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	5b 15       	cp	r21, r11
    4b0e:	08 f0       	brcs	.+2      	; 0x4b12 <fat_find_offset_for_dir_entry+0x5c8>
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	48 2f       	mov	r20, r24
    4b14:	4a 0d       	add	r20, r10
    4b16:	81 e0       	ldi	r24, 0x01	; 1
    4b18:	4a 15       	cp	r20, r10
    4b1a:	08 f0       	brcs	.+2      	; 0x4b1e <fat_find_offset_for_dir_entry+0x5d4>
    4b1c:	80 e0       	ldi	r24, 0x00	; 0
    4b1e:	38 2f       	mov	r19, r24
    4b20:	32 0d       	add	r19, r2
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	32 15       	cp	r19, r2
    4b26:	08 f0       	brcs	.+2      	; 0x4b2a <fat_find_offset_for_dir_entry+0x5e0>
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	28 2f       	mov	r18, r24
    4b2c:	29 0d       	add	r18, r9
    4b2e:	81 e0       	ldi	r24, 0x01	; 1
    4b30:	29 15       	cp	r18, r9
    4b32:	08 f0       	brcs	.+2      	; 0x4b36 <fat_find_offset_for_dir_entry+0x5ec>
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	88 0d       	add	r24, r8
    4b38:	91 e0       	ldi	r25, 0x01	; 1
    4b3a:	88 15       	cp	r24, r8
    4b3c:	08 f0       	brcs	.+2      	; 0x4b40 <fat_find_offset_for_dir_entry+0x5f6>
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	6b 01       	movw	r12, r22
    4b42:	5a 01       	movw	r10, r20
    4b44:	23 2e       	mov	r2, r19
    4b46:	92 2e       	mov	r9, r18
    4b48:	88 2e       	mov	r8, r24
    4b4a:	79 0e       	add	r7, r25
    4b4c:	9d cd       	rjmp	.-1222   	; 0x4688 <fat_find_offset_for_dir_entry+0x13e>
    4b4e:	1e 8a       	std	Y+22, r1	; 0x16
    4b50:	1f 8a       	std	Y+23, r1	; 0x17
    4b52:	18 8e       	std	Y+24, r1	; 0x18
    4b54:	19 8e       	std	Y+25, r1	; 0x19
    4b56:	33 24       	eor	r3, r3
    4b58:	44 24       	eor	r4, r4
    4b5a:	55 24       	eor	r5, r5
    4b5c:	66 24       	eor	r6, r6
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    4b5e:	2e 89       	ldd	r18, Y+22	; 0x16
    4b60:	3f 89       	ldd	r19, Y+23	; 0x17
    4b62:	48 8d       	ldd	r20, Y+24	; 0x18
    4b64:	59 8d       	ldd	r21, Y+25	; 0x19
    4b66:	63 2d       	mov	r22, r3
    4b68:	74 2d       	mov	r23, r4
    4b6a:	85 2d       	mov	r24, r5
    4b6c:	96 2d       	mov	r25, r6
    4b6e:	69 96       	adiw	r28, 0x19	; 25
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	cd bf       	out	0x3d, r28	; 61
    4b7a:	cf 91       	pop	r28
    4b7c:	df 91       	pop	r29
    4b7e:	1f 91       	pop	r17
    4b80:	0f 91       	pop	r16
    4b82:	ff 90       	pop	r15
    4b84:	ef 90       	pop	r14
    4b86:	df 90       	pop	r13
    4b88:	cf 90       	pop	r12
    4b8a:	bf 90       	pop	r11
    4b8c:	af 90       	pop	r10
    4b8e:	9f 90       	pop	r9
    4b90:	8f 90       	pop	r8
    4b92:	7f 90       	pop	r7
    4b94:	6f 90       	pop	r6
    4b96:	5f 90       	pop	r5
    4b98:	4f 90       	pop	r4
    4b9a:	3f 90       	pop	r3
    4b9c:	2f 90       	pop	r2
    4b9e:	08 95       	ret

00004ba0 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    4ba0:	2f 92       	push	r2
    4ba2:	3f 92       	push	r3
    4ba4:	4f 92       	push	r4
    4ba6:	5f 92       	push	r5
    4ba8:	6f 92       	push	r6
    4baa:	7f 92       	push	r7
    4bac:	8f 92       	push	r8
    4bae:	9f 92       	push	r9
    4bb0:	af 92       	push	r10
    4bb2:	bf 92       	push	r11
    4bb4:	cf 92       	push	r12
    4bb6:	df 92       	push	r13
    4bb8:	ef 92       	push	r14
    4bba:	ff 92       	push	r15
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	df 93       	push	r29
    4bc2:	cf 93       	push	r28
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	a5 97       	sbiw	r28, 0x25	; 37
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    4bd8:	00 97       	sbiw	r24, 0x00	; 0
    4bda:	09 f4       	brne	.+2      	; 0x4bde <fat_write_dir_entry+0x3e>
    4bdc:	b3 c1       	rjmp	.+870    	; 0x4f44 <fat_write_dir_entry+0x3a4>
    4bde:	61 15       	cp	r22, r1
    4be0:	71 05       	cpc	r23, r1
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <fat_write_dir_entry+0x46>
    4be4:	af c1       	rjmp	.+862    	; 0x4f44 <fat_write_dir_entry+0x3a4>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    4be6:	01 90       	ld	r0, Z+
    4be8:	f0 81       	ld	r31, Z
    4bea:	e0 2d       	mov	r30, r0
    4bec:	84 81       	ldd	r24, Z+4	; 0x04
    4bee:	95 81       	ldd	r25, Z+5	; 0x05
    4bf0:	9b a3       	std	Y+35, r25	; 0x23
    4bf2:	8a a3       	std	Y+34, r24	; 0x22
    offset_t offset = dir_entry->entry_offset;
    4bf4:	db 01       	movw	r26, r22
    4bf6:	99 96       	adiw	r26, 0x29	; 41
    4bf8:	2c 90       	ld	r2, X
    4bfa:	99 97       	sbiw	r26, 0x29	; 41
    4bfc:	9a 96       	adiw	r26, 0x2a	; 42
    4bfe:	bc 91       	ld	r27, X
    4c00:	bc a3       	std	Y+36, r27	; 0x24
    4c02:	fb 01       	movw	r30, r22
    4c04:	73 a4       	ldd	r7, Z+43	; 0x2b
    4c06:	64 a4       	ldd	r6, Z+44	; 0x2c
    4c08:	55 a4       	ldd	r5, Z+45	; 0x2d
    4c0a:	46 a4       	ldd	r4, Z+46	; 0x2e
    4c0c:	37 a4       	ldd	r3, Z+47	; 0x2f
    4c0e:	f0 a9       	ldd	r31, Z+48	; 0x30
    4c10:	fd a3       	std	Y+37, r31	; 0x25
    const char* name = dir_entry->long_name;
    4c12:	06 2f       	mov	r16, r22
    4c14:	fd 2c       	mov	r15, r13
    uint8_t name_len = strlen(name);
    4c16:	fb 01       	movw	r30, r22
    4c18:	01 90       	ld	r0, Z+
    4c1a:	00 20       	and	r0, r0
    4c1c:	e9 f7       	brne	.-6      	; 0x4c18 <fat_write_dir_entry+0x78>
    4c1e:	31 97       	sbiw	r30, 0x01	; 1
    4c20:	1e 2f       	mov	r17, r30
    4c22:	16 1b       	sub	r17, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    4c24:	81 2f       	mov	r24, r17
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	0c 96       	adiw	r24, 0x0c	; 12
    4c2a:	6d e0       	ldi	r22, 0x0D	; 13
    4c2c:	70 e0       	ldi	r23, 0x00	; 0
    4c2e:	0e 94 31 39 	call	0x7262	; 0x7262 <__divmodhi4>
    4c32:	69 a3       	std	Y+33, r22	; 0x21
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    4c34:	ce 01       	movw	r24, r28
    4c36:	01 96       	adiw	r24, 0x01	; 1
    4c38:	60 e2       	ldi	r22, 0x20	; 32
    4c3a:	70 e0       	ldi	r23, 0x00	; 0
    4c3c:	4b e0       	ldi	r20, 0x0B	; 11
    4c3e:	50 e0       	ldi	r21, 0x00	; 0
    4c40:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <memset>
    char* name_ext = strrchr(name, '.');
    4c44:	c6 01       	movw	r24, r12
    4c46:	6e e2       	ldi	r22, 0x2E	; 46
    4c48:	70 e0       	ldi	r23, 0x00	; 0
    4c4a:	0e 94 10 36 	call	0x6c20	; 0x6c20 <strrchr>
    4c4e:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    4c50:	00 97       	sbiw	r24, 0x00	; 0
    4c52:	e1 f0       	breq	.+56     	; 0x4c8c <fat_write_dir_entry+0xec>
    4c54:	9c 01       	movw	r18, r24
    4c56:	2f 5f       	subi	r18, 0xFF	; 255
    4c58:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5a:	81 81       	ldd	r24, Z+1	; 0x01
    4c5c:	88 23       	and	r24, r24
    4c5e:	b1 f0       	breq	.+44     	; 0x4c8c <fat_write_dir_entry+0xec>
    {
        uint8_t name_ext_len = strlen(name_ext);
    4c60:	d9 01       	movw	r26, r18
    4c62:	0d 90       	ld	r0, X+
    4c64:	00 20       	and	r0, r0
    4c66:	e9 f7       	brne	.-6      	; 0x4c62 <fat_write_dir_entry+0xc2>
    4c68:	11 97       	sbiw	r26, 0x01	; 1
    4c6a:	a2 1b       	sub	r26, r18
    4c6c:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    4c6e:	8a 2f       	mov	r24, r26
    4c70:	80 95       	com	r24
    4c72:	18 0f       	add	r17, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    4c74:	be 01       	movw	r22, r28
    4c76:	67 5f       	subi	r22, 0xF7	; 247
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	4a 2f       	mov	r20, r26
    4c7c:	a4 30       	cpi	r26, 0x04	; 4
    4c7e:	08 f0       	brcs	.+2      	; 0x4c82 <fat_write_dir_entry+0xe2>
    4c80:	43 e0       	ldi	r20, 0x03	; 3
    4c82:	cb 01       	movw	r24, r22
    4c84:	b9 01       	movw	r22, r18
    4c86:	50 e0       	ldi	r21, 0x00	; 0
    4c88:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <memcpy>
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    4c90:	19 30       	cpi	r17, 0x09	; 9
    4c92:	a0 f4       	brcc	.+40     	; 0x4cbc <fat_write_dir_entry+0x11c>
    {
        memcpy(buffer, name, name_len);
    4c94:	60 2f       	mov	r22, r16
    4c96:	7f 2d       	mov	r23, r15
    4c98:	41 2f       	mov	r20, r17
    4c9a:	50 e0       	ldi	r21, 0x00	; 0
    4c9c:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    4ca0:	d6 01       	movw	r26, r12
    4ca2:	8c 91       	ld	r24, X
    4ca4:	8e 32       	cpi	r24, 0x2E	; 46
    4ca6:	41 f5       	brne	.+80     	; 0x4cf8 <fat_write_dir_entry+0x158>
    4ca8:	11 96       	adiw	r26, 0x01	; 1
    4caa:	8c 91       	ld	r24, X
    4cac:	11 97       	sbiw	r26, 0x01	; 1
    4cae:	8e 32       	cpi	r24, 0x2E	; 46
    4cb0:	11 f4       	brne	.+4      	; 0x4cb6 <fat_write_dir_entry+0x116>
    4cb2:	12 96       	adiw	r26, 0x02	; 2
    4cb4:	8c 91       	ld	r24, X
    4cb6:	88 23       	and	r24, r24
    4cb8:	f1 f0       	breq	.+60     	; 0x4cf6 <fat_write_dir_entry+0x156>
    4cba:	1e c0       	rjmp	.+60     	; 0x4cf8 <fat_write_dir_entry+0x158>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	80 2f       	mov	r24, r16
    4cc0:	9f 2d       	mov	r25, r15
    4cc2:	9c 01       	movw	r18, r24
    4cc4:	f9 01       	movw	r30, r18
    4cc6:	88 e0       	ldi	r24, 0x08	; 8
    4cc8:	01 90       	ld	r0, Z+
    4cca:	0d 92       	st	X+, r0
    4ccc:	81 50       	subi	r24, 0x01	; 1
    4cce:	e1 f7       	brne	.-8      	; 0x4cc8 <fat_write_dir_entry+0x128>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    4cd0:	f6 01       	movw	r30, r12
    4cd2:	81 a1       	ldd	r24, Z+33	; 0x21
    4cd4:	98 2f       	mov	r25, r24
    4cd6:	92 95       	swap	r25
    4cd8:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    4cda:	80 3a       	cpi	r24, 0xA0	; 160
    4cdc:	10 f4       	brcc	.+4      	; 0x4ce2 <fat_write_dir_entry+0x142>
    4cde:	90 5d       	subi	r25, 0xD0	; 208
    4ce0:	01 c0       	rjmp	.+2      	; 0x4ce4 <fat_write_dir_entry+0x144>
    4ce2:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    4ce4:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    4ce6:	8a 30       	cpi	r24, 0x0A	; 10
    4ce8:	10 f4       	brcc	.+4      	; 0x4cee <fat_write_dir_entry+0x14e>
    4cea:	80 5d       	subi	r24, 0xD0	; 208
    4cec:	01 c0       	rjmp	.+2      	; 0x4cf0 <fat_write_dir_entry+0x150>
    4cee:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    4cf0:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    4cf2:	88 87       	std	Y+8, r24	; 0x08
    4cf4:	01 c0       	rjmp	.+2      	; 0x4cf8 <fat_write_dir_entry+0x158>
    4cf6:	19 a2       	std	Y+33, r1	; 0x21
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	85 3e       	cpi	r24, 0xE5	; 229
    4cfc:	11 f4       	brne	.+4      	; 0x4d02 <fat_write_dir_entry+0x162>
        buffer[0] = 0x05;
    4cfe:	85 e0       	ldi	r24, 0x05	; 5
    4d00:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    4d02:	85 e1       	ldi	r24, 0x15	; 21
    4d04:	fe 01       	movw	r30, r28
    4d06:	3c 96       	adiw	r30, 0x0c	; 12
    4d08:	df 01       	movw	r26, r30
    4d0a:	1d 92       	st	X+, r1
    4d0c:	8a 95       	dec	r24
    4d0e:	e9 f7       	brne	.-6      	; 0x4d0a <fat_write_dir_entry+0x16a>
    buffer[0x0b] = dir_entry->attributes;
    4d10:	f6 01       	movw	r30, r12
    4d12:	80 a1       	ldd	r24, Z+32	; 0x20
    4d14:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    *((uint16_t*) &buffer[0x16]) = htol16(dir_entry->modification_time);
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
    4d16:	21 a1       	ldd	r18, Z+33	; 0x21
    4d18:	32 a1       	ldd	r19, Z+34	; 0x22
    4d1a:	43 a1       	ldd	r20, Z+35	; 0x23
    4d1c:	54 a1       	ldd	r21, Z+36	; 0x24
    4d1e:	ca 01       	movw	r24, r20
    4d20:	aa 27       	eor	r26, r26
    4d22:	bb 27       	eor	r27, r27
    4d24:	9e 8b       	std	Y+22, r25	; 0x16
    4d26:	8d 8b       	std	Y+21, r24	; 0x15
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    4d28:	3c 8f       	std	Y+28, r19	; 0x1c
    4d2a:	2b 8f       	std	Y+27, r18	; 0x1b
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    4d2c:	85 a1       	ldd	r24, Z+37	; 0x25
    4d2e:	96 a1       	ldd	r25, Z+38	; 0x26
    4d30:	a7 a1       	ldd	r26, Z+39	; 0x27
    4d32:	b0 a5       	ldd	r27, Z+40	; 0x28
    4d34:	8d 8f       	std	Y+29, r24	; 0x1d
    4d36:	9e 8f       	std	Y+30, r25	; 0x1e
    4d38:	af 8f       	std	Y+31, r26	; 0x1f
    4d3a:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    4d3c:	f9 a1       	ldd	r31, Y+33	; 0x21
    4d3e:	8f 2f       	mov	r24, r31
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	a5 e0       	ldi	r26, 0x05	; 5
    4d44:	88 0f       	add	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	aa 95       	dec	r26
    4d4a:	e1 f7       	brne	.-8      	; 0x4d44 <fat_write_dir_entry+0x1a4>
    4d4c:	9c 01       	movw	r18, r24
    4d4e:	40 e0       	ldi	r20, 0x00	; 0
    4d50:	50 e0       	ldi	r21, 0x00	; 0
    4d52:	60 e0       	ldi	r22, 0x00	; 0
    4d54:	70 e0       	ldi	r23, 0x00	; 0
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	b2 2e       	mov	r11, r18
    4d5c:	b2 0c       	add	r11, r2
    4d5e:	a1 e0       	ldi	r26, 0x01	; 1
    4d60:	b2 16       	cp	r11, r18
    4d62:	08 f0       	brcs	.+2      	; 0x4d66 <fat_write_dir_entry+0x1c6>
    4d64:	a0 e0       	ldi	r26, 0x00	; 0
    4d66:	ec a1       	ldd	r30, Y+36	; 0x24
    4d68:	e3 0f       	add	r30, r19
    4d6a:	f1 e0       	ldi	r31, 0x01	; 1
    4d6c:	e3 17       	cp	r30, r19
    4d6e:	08 f0       	brcs	.+2      	; 0x4d72 <fat_write_dir_entry+0x1d2>
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	ea 2e       	mov	r14, r26
    4d74:	ee 0e       	add	r14, r30
    4d76:	a1 e0       	ldi	r26, 0x01	; 1
    4d78:	ee 16       	cp	r14, r30
    4d7a:	08 f0       	brcs	.+2      	; 0x4d7e <fat_write_dir_entry+0x1de>
    4d7c:	a0 e0       	ldi	r26, 0x00	; 0
    4d7e:	fa 2b       	or	r31, r26
    4d80:	e1 e0       	ldi	r30, 0x01	; 1
    4d82:	74 16       	cp	r7, r20
    4d84:	08 f0       	brcs	.+2      	; 0x4d88 <fat_write_dir_entry+0x1e8>
    4d86:	e0 e0       	ldi	r30, 0x00	; 0
    4d88:	ff 2e       	mov	r15, r31
    4d8a:	f7 0c       	add	r15, r7
    4d8c:	f1 e0       	ldi	r31, 0x01	; 1
    4d8e:	f7 14       	cp	r15, r7
    4d90:	08 f0       	brcs	.+2      	; 0x4d94 <fat_write_dir_entry+0x1f4>
    4d92:	f0 e0       	ldi	r31, 0x00	; 0
    4d94:	ef 2b       	or	r30, r31
    4d96:	f1 e0       	ldi	r31, 0x01	; 1
    4d98:	65 16       	cp	r6, r21
    4d9a:	08 f0       	brcs	.+2      	; 0x4d9e <fat_write_dir_entry+0x1fe>
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	0e 2f       	mov	r16, r30
    4da0:	06 0d       	add	r16, r6
    4da2:	e1 e0       	ldi	r30, 0x01	; 1
    4da4:	06 15       	cp	r16, r6
    4da6:	08 f0       	brcs	.+2      	; 0x4daa <fat_write_dir_entry+0x20a>
    4da8:	e0 e0       	ldi	r30, 0x00	; 0
    4daa:	fe 2b       	or	r31, r30
    4dac:	e1 e0       	ldi	r30, 0x01	; 1
    4dae:	56 16       	cp	r5, r22
    4db0:	08 f0       	brcs	.+2      	; 0x4db4 <fat_write_dir_entry+0x214>
    4db2:	e0 e0       	ldi	r30, 0x00	; 0
    4db4:	1f 2f       	mov	r17, r31
    4db6:	15 0d       	add	r17, r5
    4db8:	f1 e0       	ldi	r31, 0x01	; 1
    4dba:	15 15       	cp	r17, r5
    4dbc:	08 f0       	brcs	.+2      	; 0x4dc0 <fat_write_dir_entry+0x220>
    4dbe:	f0 e0       	ldi	r31, 0x00	; 0
    4dc0:	ef 2b       	or	r30, r31
    4dc2:	f1 e0       	ldi	r31, 0x01	; 1
    4dc4:	47 16       	cp	r4, r23
    4dc6:	08 f0       	brcs	.+2      	; 0x4dca <fat_write_dir_entry+0x22a>
    4dc8:	f0 e0       	ldi	r31, 0x00	; 0
    4dca:	be 2f       	mov	r27, r30
    4dcc:	b4 0d       	add	r27, r4
    4dce:	e1 e0       	ldi	r30, 0x01	; 1
    4dd0:	b4 15       	cp	r27, r4
    4dd2:	08 f0       	brcs	.+2      	; 0x4dd6 <fat_write_dir_entry+0x236>
    4dd4:	e0 e0       	ldi	r30, 0x00	; 0
    4dd6:	fe 2b       	or	r31, r30
    4dd8:	a1 e0       	ldi	r26, 0x01	; 1
    4dda:	38 16       	cp	r3, r24
    4ddc:	08 f0       	brcs	.+2      	; 0x4de0 <fat_write_dir_entry+0x240>
    4dde:	a0 e0       	ldi	r26, 0x00	; 0
    4de0:	8f 2f       	mov	r24, r31
    4de2:	83 0d       	add	r24, r3
    4de4:	e1 e0       	ldi	r30, 0x01	; 1
    4de6:	83 15       	cp	r24, r3
    4de8:	08 f0       	brcs	.+2      	; 0x4dec <fat_write_dir_entry+0x24c>
    4dea:	e0 e0       	ldi	r30, 0x00	; 0
    4dec:	ae 2b       	or	r26, r30
    4dee:	2b 2d       	mov	r18, r11
    4df0:	3e 2d       	mov	r19, r14
    4df2:	4f 2d       	mov	r20, r15
    4df4:	50 2f       	mov	r21, r16
    4df6:	61 2f       	mov	r22, r17
    4df8:	7b 2f       	mov	r23, r27
    4dfa:	9d a1       	ldd	r25, Y+37	; 0x25
    4dfc:	9a 0f       	add	r25, r26
    4dfe:	8e 01       	movw	r16, r28
    4e00:	0f 5f       	subi	r16, 0xFF	; 255
    4e02:	1f 4f       	sbci	r17, 0xFF	; 255
    4e04:	f0 e2       	ldi	r31, 0x20	; 32
    4e06:	ef 2e       	mov	r14, r31
    4e08:	f1 2c       	mov	r15, r1
    4e0a:	aa a1       	ldd	r26, Y+34	; 0x22
    4e0c:	bb a1       	ldd	r27, Y+35	; 0x23
    4e0e:	fd 01       	movw	r30, r26
    4e10:	09 95       	icall
    4e12:	88 23       	and	r24, r24
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <fat_write_dir_entry+0x278>
    4e16:	96 c0       	rjmp	.+300    	; 0x4f44 <fat_write_dir_entry+0x3a4>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    4e18:	b9 80       	ldd	r11, Y+1	; 0x01
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    4e1e:	9e 01       	movw	r18, r28
    4e20:	24 5f       	subi	r18, 0xF4	; 244
    4e22:	3f 4f       	sbci	r19, 0xFF	; 255
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    4e24:	8b 2d       	mov	r24, r11
    4e26:	86 95       	lsr	r24
    4e28:	b7 94       	ror	r11
    4e2a:	bb 24       	eor	r11, r11
    4e2c:	b7 94       	ror	r11
    4e2e:	b8 2a       	or	r11, r24
    4e30:	81 91       	ld	r24, Z+
    4e32:	b8 0e       	add	r11, r24
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    4e34:	e2 17       	cp	r30, r18
    4e36:	f3 07       	cpc	r31, r19
    4e38:	a9 f7       	brne	.-22     	; 0x4e24 <fat_write_dir_entry+0x284>
    4e3a:	a9 a0       	ldd	r10, Y+33	; 0x21
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    4e3c:	4e 01       	movw	r8, r28
    4e3e:	08 94       	sec
    4e40:	81 1c       	adc	r8, r1
    4e42:	91 1c       	adc	r9, r1
    4e44:	7a c0       	rjmp	.+244    	; 0x4f3a <fat_write_dir_entry+0x39a>
    4e46:	c4 01       	movw	r24, r8
    4e48:	6f ef       	ldi	r22, 0xFF	; 255
    4e4a:	70 e0       	ldi	r23, 0x00	; 0
    4e4c:	40 e2       	ldi	r20, 0x20	; 32
    4e4e:	50 e0       	ldi	r21, 0x00	; 0
    4e50:	0e 94 cd 35 	call	0x6b9a	; 0x6b9a <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    4e54:	ed e0       	ldi	r30, 0x0D	; 13
    4e56:	ae 9e       	mul	r10, r30
    4e58:	d0 01       	movw	r26, r0
    4e5a:	11 24       	eor	r1, r1
    4e5c:	1d 97       	sbiw	r26, 0x0d	; 13
    4e5e:	ac 0d       	add	r26, r12
    4e60:	bd 1d       	adc	r27, r13
    4e62:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    4e64:	f4 01       	movw	r30, r8
    4e66:	e9 0f       	add	r30, r25
    4e68:	f1 1d       	adc	r31, r1
    4e6a:	8c 91       	ld	r24, X
    4e6c:	80 83       	st	Z, r24
    4e6e:	89 2f       	mov	r24, r25
    4e70:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    4e72:	f4 01       	movw	r30, r8
    4e74:	e8 0f       	add	r30, r24
    4e76:	f1 1d       	adc	r31, r1
    4e78:	10 82       	st	Z, r1
    4e7a:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    4e7c:	9b 30       	cpi	r25, 0x0B	; 11
    4e7e:	19 f0       	breq	.+6      	; 0x4e86 <fat_write_dir_entry+0x2e6>
    4e80:	9a 31       	cpi	r25, 0x1A	; 26
    4e82:	21 f4       	brne	.+8      	; 0x4e8c <fat_write_dir_entry+0x2ec>
    4e84:	02 c0       	rjmp	.+4      	; 0x4e8a <fat_write_dir_entry+0x2ea>
    4e86:	9e e0       	ldi	r25, 0x0E	; 14
    4e88:	01 c0       	rjmp	.+2      	; 0x4e8c <fat_write_dir_entry+0x2ec>
    4e8a:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    4e8c:	8c 91       	ld	r24, X
    4e8e:	88 23       	and	r24, r24
    4e90:	21 f0       	breq	.+8      	; 0x4e9a <fat_write_dir_entry+0x2fa>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    4e92:	9f 31       	cpi	r25, 0x1F	; 31
    4e94:	10 f4       	brcc	.+4      	; 0x4e9a <fat_write_dir_entry+0x2fa>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    4e96:	11 96       	adiw	r26, 0x01	; 1
    4e98:	e5 cf       	rjmp	.-54     	; 0x4e64 <fat_write_dir_entry+0x2c4>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    4e9a:	a9 82       	std	Y+1, r10	; 0x01
        if(lfn_entry == lfn_entry_count)
    4e9c:	f9 a1       	ldd	r31, Y+33	; 0x21
    4e9e:	af 16       	cp	r10, r31
    4ea0:	19 f4       	brne	.+6      	; 0x4ea8 <fat_write_dir_entry+0x308>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    4ea2:	8a 2d       	mov	r24, r10
    4ea4:	80 64       	ori	r24, 0x40	; 64
    4ea6:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    4ea8:	2f e0       	ldi	r18, 0x0F	; 15
    4eaa:	2c 87       	std	Y+12, r18	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    4eac:	be 86       	std	Y+14, r11	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    4eae:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    4eb0:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    4eb2:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    4eb4:	22 2d       	mov	r18, r2
    4eb6:	3c a1       	ldd	r19, Y+36	; 0x24
    4eb8:	47 2d       	mov	r20, r7
    4eba:	56 2d       	mov	r21, r6
    4ebc:	65 2d       	mov	r22, r5
    4ebe:	74 2d       	mov	r23, r4
    4ec0:	83 2d       	mov	r24, r3
    4ec2:	9d a1       	ldd	r25, Y+37	; 0x25
    4ec4:	84 01       	movw	r16, r8
    4ec6:	e0 e2       	ldi	r30, 0x20	; 32
    4ec8:	ee 2e       	mov	r14, r30
    4eca:	f1 2c       	mov	r15, r1
    4ecc:	aa a1       	ldd	r26, Y+34	; 0x22
    4ece:	bb a1       	ldd	r27, Y+35	; 0x23
    4ed0:	fd 01       	movw	r30, r26
    4ed2:	09 95       	icall
    
        offset += sizeof(buffer);
    4ed4:	72 2d       	mov	r23, r2
    4ed6:	70 5e       	subi	r23, 0xE0	; 224
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	72 15       	cp	r23, r2
    4edc:	08 f0       	brcs	.+2      	; 0x4ee0 <fat_write_dir_entry+0x340>
    4ede:	80 e0       	ldi	r24, 0x00	; 0
    4ee0:	6c a1       	ldd	r22, Y+36	; 0x24
    4ee2:	68 0f       	add	r22, r24
    4ee4:	81 e0       	ldi	r24, 0x01	; 1
    4ee6:	bc a1       	ldd	r27, Y+36	; 0x24
    4ee8:	6b 17       	cp	r22, r27
    4eea:	08 f0       	brcs	.+2      	; 0x4eee <fat_write_dir_entry+0x34e>
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	58 2f       	mov	r21, r24
    4ef0:	57 0d       	add	r21, r7
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	57 15       	cp	r21, r7
    4ef6:	08 f0       	brcs	.+2      	; 0x4efa <fat_write_dir_entry+0x35a>
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	48 2f       	mov	r20, r24
    4efc:	46 0d       	add	r20, r6
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	46 15       	cp	r20, r6
    4f02:	08 f0       	brcs	.+2      	; 0x4f06 <fat_write_dir_entry+0x366>
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	38 2f       	mov	r19, r24
    4f08:	35 0d       	add	r19, r5
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	35 15       	cp	r19, r5
    4f0e:	08 f0       	brcs	.+2      	; 0x4f12 <fat_write_dir_entry+0x372>
    4f10:	80 e0       	ldi	r24, 0x00	; 0
    4f12:	28 2f       	mov	r18, r24
    4f14:	24 0d       	add	r18, r4
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	24 15       	cp	r18, r4
    4f1a:	08 f0       	brcs	.+2      	; 0x4f1e <fat_write_dir_entry+0x37e>
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	83 0d       	add	r24, r3
    4f20:	91 e0       	ldi	r25, 0x01	; 1
    4f22:	83 15       	cp	r24, r3
    4f24:	08 f0       	brcs	.+2      	; 0x4f28 <fat_write_dir_entry+0x388>
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	27 2e       	mov	r2, r23
    4f2a:	6c a3       	std	Y+36, r22	; 0x24
    4f2c:	3a 01       	movw	r6, r20
    4f2e:	29 01       	movw	r4, r18
    4f30:	38 2e       	mov	r3, r24
    4f32:	ed a1       	ldd	r30, Y+37	; 0x25
    4f34:	e9 0f       	add	r30, r25
    4f36:	ed a3       	std	Y+37, r30	; 0x25
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    4f38:	aa 94       	dec	r10
    4f3a:	aa 20       	and	r10, r10
    4f3c:	09 f0       	breq	.+2      	; 0x4f40 <fat_write_dir_entry+0x3a0>
    4f3e:	83 cf       	rjmp	.-250    	; 0x4e46 <fat_write_dir_entry+0x2a6>
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	01 c0       	rjmp	.+2      	; 0x4f46 <fat_write_dir_entry+0x3a6>
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    4f46:	a5 96       	adiw	r28, 0x25	; 37
    4f48:	0f b6       	in	r0, 0x3f	; 63
    4f4a:	f8 94       	cli
    4f4c:	de bf       	out	0x3e, r29	; 62
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	cd bf       	out	0x3d, r28	; 61
    4f52:	cf 91       	pop	r28
    4f54:	df 91       	pop	r29
    4f56:	1f 91       	pop	r17
    4f58:	0f 91       	pop	r16
    4f5a:	ff 90       	pop	r15
    4f5c:	ef 90       	pop	r14
    4f5e:	df 90       	pop	r13
    4f60:	cf 90       	pop	r12
    4f62:	bf 90       	pop	r11
    4f64:	af 90       	pop	r10
    4f66:	9f 90       	pop	r9
    4f68:	8f 90       	pop	r8
    4f6a:	7f 90       	pop	r7
    4f6c:	6f 90       	pop	r6
    4f6e:	5f 90       	pop	r5
    4f70:	4f 90       	pop	r4
    4f72:	3f 90       	pop	r3
    4f74:	2f 90       	pop	r2
    4f76:	08 95       	ret

00004f78 <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    4f78:	2f 92       	push	r2
    4f7a:	3f 92       	push	r3
    4f7c:	4f 92       	push	r4
    4f7e:	5f 92       	push	r5
    4f80:	6f 92       	push	r6
    4f82:	7f 92       	push	r7
    4f84:	8f 92       	push	r8
    4f86:	9f 92       	push	r9
    4f88:	af 92       	push	r10
    4f8a:	bf 92       	push	r11
    4f8c:	cf 92       	push	r12
    4f8e:	df 92       	push	r13
    4f90:	ef 92       	push	r14
    4f92:	ff 92       	push	r15
    4f94:	0f 93       	push	r16
    4f96:	1f 93       	push	r17
    4f98:	df 93       	push	r29
    4f9a:	cf 93       	push	r28
    4f9c:	cd b7       	in	r28, 0x3d	; 61
    4f9e:	de b7       	in	r29, 0x3e	; 62
    4fa0:	2e 97       	sbiw	r28, 0x0e	; 14
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	98 87       	std	Y+8, r25	; 0x08
    4fae:	8f 83       	std	Y+7, r24	; 0x07
    4fb0:	7a 87       	std	Y+10, r23	; 0x0a
    4fb2:	69 87       	std	Y+9, r22	; 0x09
    4fb4:	5e 87       	std	Y+14, r21	; 0x0e
    4fb6:	4d 87       	std	Y+13, r20	; 0x0d
    if(!parent || !dir || !dir[0] || !dir_entry)
    4fb8:	89 2b       	or	r24, r25
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <fat_create_dir+0x46>
    4fbc:	ac c1       	rjmp	.+856    	; 0x5316 <fat_create_dir+0x39e>
    4fbe:	61 15       	cp	r22, r1
    4fc0:	71 05       	cpc	r23, r1
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <fat_create_dir+0x4e>
    4fc4:	a8 c1       	rjmp	.+848    	; 0x5316 <fat_create_dir+0x39e>
    4fc6:	db 01       	movw	r26, r22
    4fc8:	8c 91       	ld	r24, X
    4fca:	88 23       	and	r24, r24
    4fcc:	09 f4       	brne	.+2      	; 0x4fd0 <fat_create_dir+0x58>
    4fce:	a3 c1       	rjmp	.+838    	; 0x5316 <fat_create_dir+0x39e>
    4fd0:	45 2b       	or	r20, r21
    4fd2:	b1 f4       	brne	.+44     	; 0x5000 <fat_create_dir+0x88>
    4fd4:	a0 c1       	rjmp	.+832    	; 0x5316 <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    4fd6:	89 85       	ldd	r24, Y+9	; 0x09
    4fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fde:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <strcmp>
    4fe2:	00 97       	sbiw	r24, 0x00	; 0
    4fe4:	89 f4       	brne	.+34     	; 0x5008 <fat_create_dir+0x90>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    4fe6:	ef 81       	ldd	r30, Y+7	; 0x07
    4fe8:	f8 85       	ldd	r31, Y+8	; 0x08
    4fea:	83 a1       	ldd	r24, Z+35	; 0x23
    4fec:	94 a1       	ldd	r25, Z+36	; 0x24
    4fee:	a5 a1       	ldd	r26, Z+37	; 0x25
    4ff0:	b6 a1       	ldd	r27, Z+38	; 0x26
    4ff2:	83 ab       	std	Z+51, r24	; 0x33
    4ff4:	94 ab       	std	Z+52, r25	; 0x34
    4ff6:	a5 ab       	std	Z+53, r26	; 0x35
    4ff8:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    4ffa:	10 ae       	std	Z+56, r1	; 0x38
    4ffc:	17 aa       	std	Z+55, r1	; 0x37
    4ffe:	8b c1       	rjmp	.+790    	; 0x5316 <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    5000:	fd 85       	ldd	r31, Y+13	; 0x0d
    5002:	fb 87       	std	Y+11, r31	; 0x0b
    5004:	8e 85       	ldd	r24, Y+14	; 0x0e
    5006:	8c 87       	std	Y+12, r24	; 0x0c
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    5008:	8f 81       	ldd	r24, Y+7	; 0x07
    500a:	98 85       	ldd	r25, Y+8	; 0x08
    500c:	6d 85       	ldd	r22, Y+13	; 0x0d
    500e:	7e 85       	ldd	r23, Y+14	; 0x0e
    5010:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <fat_read_dir>
    5014:	88 23       	and	r24, r24
    5016:	f9 f6       	brne	.-66     	; 0x4fd6 <fat_create_dir+0x5e>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    5018:	af 81       	ldd	r26, Y+7	; 0x07
    501a:	b8 85       	ldd	r27, Y+8	; 0x08
    501c:	0d 90       	ld	r0, X+
    501e:	bc 91       	ld	r27, X
    5020:	a0 2d       	mov	r26, r0
    5022:	be 83       	std	Y+6, r27	; 0x06
    5024:	ad 83       	std	Y+5, r26	; 0x05

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    5026:	cd 01       	movw	r24, r26
    5028:	40 e0       	ldi	r20, 0x00	; 0
    502a:	50 e0       	ldi	r21, 0x00	; 0
    502c:	60 e0       	ldi	r22, 0x00	; 0
    502e:	70 e0       	ldi	r23, 0x00	; 0
    5030:	01 e0       	ldi	r16, 0x01	; 1
    5032:	10 e0       	ldi	r17, 0x00	; 0
    5034:	20 e0       	ldi	r18, 0x00	; 0
    5036:	30 e0       	ldi	r19, 0x00	; 0
    5038:	0e 94 bb 11 	call	0x2376	; 0x2376 <fat_append_clusters>
    503c:	69 83       	std	Y+1, r22	; 0x01
    503e:	7a 83       	std	Y+2, r23	; 0x02
    5040:	8b 83       	std	Y+3, r24	; 0x03
    5042:	9c 83       	std	Y+4, r25	; 0x04
    if(!dir_cluster)
    5044:	61 15       	cp	r22, r1
    5046:	71 05       	cpc	r23, r1
    5048:	81 05       	cpc	r24, r1
    504a:	91 05       	cpc	r25, r1
    504c:	09 f4       	brne	.+2      	; 0x5050 <fat_create_dir+0xd8>
    504e:	63 c1       	rjmp	.+710    	; 0x5316 <fat_create_dir+0x39e>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    5050:	8d 81       	ldd	r24, Y+5	; 0x05
    5052:	9e 81       	ldd	r25, Y+6	; 0x06
    5054:	49 81       	ldd	r20, Y+1	; 0x01
    5056:	5a 81       	ldd	r21, Y+2	; 0x02
    5058:	6b 81       	ldd	r22, Y+3	; 0x03
    505a:	7c 81       	ldd	r23, Y+4	; 0x04
    505c:	0e 94 0d 1c 	call	0x381a	; 0x381a <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    5060:	81 e3       	ldi	r24, 0x31	; 49
    5062:	ed 85       	ldd	r30, Y+13	; 0x0d
    5064:	fe 85       	ldd	r31, Y+14	; 0x0e
    5066:	11 92       	st	Z+, r1
    5068:	8a 95       	dec	r24
    506a:	e9 f7       	brne	.-6      	; 0x5066 <fat_create_dir+0xee>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    506c:	80 e1       	ldi	r24, 0x10	; 16
    506e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5070:	be 85       	ldd	r27, Y+14	; 0x0e
    5072:	90 96       	adiw	r26, 0x20	; 32
    5074:	8c 93       	st	X, r24

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    5076:	89 81       	ldd	r24, Y+1	; 0x01
    5078:	9a 81       	ldd	r25, Y+2	; 0x02
    507a:	ab 81       	ldd	r26, Y+3	; 0x03
    507c:	bc 81       	ldd	r27, Y+4	; 0x04
    507e:	02 97       	sbiw	r24, 0x02	; 2
    5080:	a1 09       	sbc	r26, r1
    5082:	b1 09       	sbc	r27, r1
    5084:	5c 01       	movw	r10, r24
    5086:	6d 01       	movw	r12, r26
    5088:	02 96       	adiw	r24, 0x02	; 2
    508a:	a1 1d       	adc	r26, r1
    508c:	b1 1d       	adc	r27, r1
    508e:	89 83       	std	Y+1, r24	; 0x01
    5090:	9a 83       	std	Y+2, r25	; 0x02
    5092:	ab 83       	std	Y+3, r26	; 0x03
    5094:	bc 83       	std	Y+4, r27	; 0x04
    5096:	ad 81       	ldd	r26, Y+5	; 0x05
    5098:	be 81       	ldd	r27, Y+6	; 0x06
    509a:	58 96       	adiw	r26, 0x18	; 24
    509c:	2d 90       	ld	r2, X+
    509e:	3c 90       	ld	r3, X
    50a0:	59 97       	sbiw	r26, 0x19	; 25
    50a2:	95 01       	movw	r18, r10
    50a4:	a6 01       	movw	r20, r12
    50a6:	60 e0       	ldi	r22, 0x00	; 0
    50a8:	70 e0       	ldi	r23, 0x00	; 0
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	51 01       	movw	r10, r2
    50b0:	cc 24       	eor	r12, r12
    50b2:	dd 24       	eor	r13, r13
    50b4:	ee 24       	eor	r14, r14
    50b6:	ff 24       	eor	r15, r15
    50b8:	00 e0       	ldi	r16, 0x00	; 0
    50ba:	10 e0       	ldi	r17, 0x00	; 0
    50bc:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    50c0:	ed 81       	ldd	r30, Y+5	; 0x05
    50c2:	fe 81       	ldd	r31, Y+6	; 0x06
    50c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    50c6:	e3 8c       	ldd	r14, Z+27	; 0x1b
    50c8:	14 8d       	ldd	r17, Z+28	; 0x1c
    50ca:	05 8d       	ldd	r16, Z+29	; 0x1d
    50cc:	f6 8c       	ldd	r15, Z+30	; 0x1e
    50ce:	d7 8c       	ldd	r13, Z+31	; 0x1f
    50d0:	c0 a0       	ldd	r12, Z+32	; 0x20
    50d2:	b1 a1       	ldd	r27, Z+33	; 0x21
    50d4:	a2 0f       	add	r26, r18
    50d6:	f1 e0       	ldi	r31, 0x01	; 1
    50d8:	a2 17       	cp	r26, r18
    50da:	08 f0       	brcs	.+2      	; 0x50de <fat_create_dir+0x166>
    50dc:	f0 e0       	ldi	r31, 0x00	; 0
    50de:	23 2f       	mov	r18, r19
    50e0:	2e 0d       	add	r18, r14
    50e2:	e1 e0       	ldi	r30, 0x01	; 1
    50e4:	23 17       	cp	r18, r19
    50e6:	08 f0       	brcs	.+2      	; 0x50ea <fat_create_dir+0x172>
    50e8:	e0 e0       	ldi	r30, 0x00	; 0
    50ea:	ef 2e       	mov	r14, r31
    50ec:	e2 0e       	add	r14, r18
    50ee:	31 e0       	ldi	r19, 0x01	; 1
    50f0:	e2 16       	cp	r14, r18
    50f2:	08 f0       	brcs	.+2      	; 0x50f6 <fat_create_dir+0x17e>
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	e3 2b       	or	r30, r19
    50f8:	24 2f       	mov	r18, r20
    50fa:	21 0f       	add	r18, r17
    50fc:	f1 e0       	ldi	r31, 0x01	; 1
    50fe:	24 17       	cp	r18, r20
    5100:	08 f0       	brcs	.+2      	; 0x5104 <fat_create_dir+0x18c>
    5102:	f0 e0       	ldi	r31, 0x00	; 0
    5104:	1e 2f       	mov	r17, r30
    5106:	12 0f       	add	r17, r18
    5108:	31 e0       	ldi	r19, 0x01	; 1
    510a:	12 17       	cp	r17, r18
    510c:	08 f0       	brcs	.+2      	; 0x5110 <fat_create_dir+0x198>
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	f3 2b       	or	r31, r19
    5112:	25 2f       	mov	r18, r21
    5114:	20 0f       	add	r18, r16
    5116:	41 e0       	ldi	r20, 0x01	; 1
    5118:	25 17       	cp	r18, r21
    511a:	08 f0       	brcs	.+2      	; 0x511e <fat_create_dir+0x1a6>
    511c:	40 e0       	ldi	r20, 0x00	; 0
    511e:	0f 2f       	mov	r16, r31
    5120:	02 0f       	add	r16, r18
    5122:	31 e0       	ldi	r19, 0x01	; 1
    5124:	02 17       	cp	r16, r18
    5126:	08 f0       	brcs	.+2      	; 0x512a <fat_create_dir+0x1b2>
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	43 2b       	or	r20, r19
    512c:	26 2f       	mov	r18, r22
    512e:	2f 0d       	add	r18, r15
    5130:	51 e0       	ldi	r21, 0x01	; 1
    5132:	26 17       	cp	r18, r22
    5134:	08 f0       	brcs	.+2      	; 0x5138 <fat_create_dir+0x1c0>
    5136:	50 e0       	ldi	r21, 0x00	; 0
    5138:	64 2f       	mov	r22, r20
    513a:	62 0f       	add	r22, r18
    513c:	31 e0       	ldi	r19, 0x01	; 1
    513e:	62 17       	cp	r22, r18
    5140:	08 f0       	brcs	.+2      	; 0x5144 <fat_create_dir+0x1cc>
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	53 2b       	or	r21, r19
    5146:	27 2f       	mov	r18, r23
    5148:	2d 0d       	add	r18, r13
    514a:	41 e0       	ldi	r20, 0x01	; 1
    514c:	27 17       	cp	r18, r23
    514e:	08 f0       	brcs	.+2      	; 0x5152 <fat_create_dir+0x1da>
    5150:	40 e0       	ldi	r20, 0x00	; 0
    5152:	52 0f       	add	r21, r18
    5154:	31 e0       	ldi	r19, 0x01	; 1
    5156:	52 17       	cp	r21, r18
    5158:	08 f0       	brcs	.+2      	; 0x515c <fat_create_dir+0x1e4>
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	43 2b       	or	r20, r19
    515e:	28 2f       	mov	r18, r24
    5160:	2c 0d       	add	r18, r12
    5162:	31 e0       	ldi	r19, 0x01	; 1
    5164:	28 17       	cp	r18, r24
    5166:	08 f0       	brcs	.+2      	; 0x516a <fat_create_dir+0x1f2>
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	42 0f       	add	r20, r18
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	42 17       	cp	r20, r18
    5170:	08 f0       	brcs	.+2      	; 0x5174 <fat_create_dir+0x1fc>
    5172:	80 e0       	ldi	r24, 0x00	; 0
    5174:	38 2b       	or	r19, r24
    5176:	b9 0f       	add	r27, r25
    5178:	3b 0f       	add	r19, r27
    517a:	ed 85       	ldd	r30, Y+13	; 0x0d
    517c:	fe 85       	ldd	r31, Y+14	; 0x0e
    517e:	a1 a7       	std	Z+41, r26	; 0x29
    5180:	e2 a6       	std	Z+42, r14	; 0x2a
    5182:	13 a7       	std	Z+43, r17	; 0x2b
    5184:	04 a7       	std	Z+44, r16	; 0x2c
    5186:	65 a7       	std	Z+45, r22	; 0x2d
    5188:	56 a7       	std	Z+46, r21	; 0x2e
    518a:	47 a7       	std	Z+47, r20	; 0x2f
    518c:	30 ab       	std	Z+48, r19	; 0x30
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    518e:	8e e2       	ldi	r24, 0x2E	; 46
    5190:	80 83       	st	Z, r24
    dir_entry->cluster = dir_cluster;
    5192:	89 81       	ldd	r24, Y+1	; 0x01
    5194:	9a 81       	ldd	r25, Y+2	; 0x02
    5196:	ab 81       	ldd	r26, Y+3	; 0x03
    5198:	bc 81       	ldd	r27, Y+4	; 0x04
    519a:	ed 85       	ldd	r30, Y+13	; 0x0d
    519c:	fe 85       	ldd	r31, Y+14	; 0x0e
    519e:	81 a3       	std	Z+33, r24	; 0x21
    51a0:	92 a3       	std	Z+34, r25	; 0x22
    51a2:	a3 a3       	std	Z+35, r26	; 0x23
    51a4:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    51a6:	8d 81       	ldd	r24, Y+5	; 0x05
    51a8:	9e 81       	ldd	r25, Y+6	; 0x06
    51aa:	bf 01       	movw	r22, r30
    51ac:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <fat_write_dir_entry>
    51b0:	88 23       	and	r24, r24
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <fat_create_dir+0x23e>
    51b4:	a8 c0       	rjmp	.+336    	; 0x5306 <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    51b6:	ad 85       	ldd	r26, Y+13	; 0x0d
    51b8:	be 85       	ldd	r27, Y+14	; 0x0e
    51ba:	99 96       	adiw	r26, 0x29	; 41
    51bc:	8c 91       	ld	r24, X
    51be:	99 97       	sbiw	r26, 0x29	; 41
    51c0:	9a 96       	adiw	r26, 0x2a	; 42
    51c2:	2c 91       	ld	r18, X
    51c4:	9a 97       	sbiw	r26, 0x2a	; 42
    51c6:	9b 96       	adiw	r26, 0x2b	; 43
    51c8:	3c 91       	ld	r19, X
    51ca:	9b 97       	sbiw	r26, 0x2b	; 43
    51cc:	9c 96       	adiw	r26, 0x2c	; 44
    51ce:	4c 91       	ld	r20, X
    51d0:	9c 97       	sbiw	r26, 0x2c	; 44
    51d2:	9d 96       	adiw	r26, 0x2d	; 45
    51d4:	6c 91       	ld	r22, X
    51d6:	9d 97       	sbiw	r26, 0x2d	; 45
    51d8:	9e 96       	adiw	r26, 0x2e	; 46
    51da:	fc 90       	ld	r15, X
    51dc:	9e 97       	sbiw	r26, 0x2e	; 46
    51de:	9f 96       	adiw	r26, 0x2f	; 47
    51e0:	ac 91       	ld	r26, X
    51e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    51e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    51e6:	10 a9       	ldd	r17, Z+48	; 0x30
    51e8:	b8 2f       	mov	r27, r24
    51ea:	b0 5e       	subi	r27, 0xE0	; 224
    51ec:	91 e0       	ldi	r25, 0x01	; 1
    51ee:	b8 17       	cp	r27, r24
    51f0:	08 f0       	brcs	.+2      	; 0x51f4 <fat_create_dir+0x27c>
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	09 2f       	mov	r16, r25
    51f6:	02 0f       	add	r16, r18
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	02 17       	cp	r16, r18
    51fc:	08 f0       	brcs	.+2      	; 0x5200 <fat_create_dir+0x288>
    51fe:	80 e0       	ldi	r24, 0x00	; 0
    5200:	78 2f       	mov	r23, r24
    5202:	73 0f       	add	r23, r19
    5204:	81 e0       	ldi	r24, 0x01	; 1
    5206:	73 17       	cp	r23, r19
    5208:	08 f0       	brcs	.+2      	; 0x520c <fat_create_dir+0x294>
    520a:	80 e0       	ldi	r24, 0x00	; 0
    520c:	58 2f       	mov	r21, r24
    520e:	54 0f       	add	r21, r20
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	54 17       	cp	r21, r20
    5214:	08 f0       	brcs	.+2      	; 0x5218 <fat_create_dir+0x2a0>
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	38 2f       	mov	r19, r24
    521a:	36 0f       	add	r19, r22
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	36 17       	cp	r19, r22
    5220:	08 f0       	brcs	.+2      	; 0x5224 <fat_create_dir+0x2ac>
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	28 2f       	mov	r18, r24
    5226:	2f 0d       	add	r18, r15
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	2f 15       	cp	r18, r15
    522c:	08 f0       	brcs	.+2      	; 0x5230 <fat_create_dir+0x2b8>
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	98 2f       	mov	r25, r24
    5232:	9a 0f       	add	r25, r26
    5234:	81 e0       	ldi	r24, 0x01	; 1
    5236:	9a 17       	cp	r25, r26
    5238:	08 f0       	brcs	.+2      	; 0x523c <fat_create_dir+0x2c4>
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	81 0f       	add	r24, r17
    523e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5240:	fe 85       	ldd	r31, Y+14	; 0x0e
    5242:	b1 a7       	std	Z+41, r27	; 0x29
    5244:	02 a7       	std	Z+42, r16	; 0x2a
    5246:	73 a7       	std	Z+43, r23	; 0x2b
    5248:	54 a7       	std	Z+44, r21	; 0x2c
    524a:	35 a7       	std	Z+45, r19	; 0x2d
    524c:	26 a7       	std	Z+46, r18	; 0x2e
    524e:	97 a7       	std	Z+47, r25	; 0x2f
    5250:	80 ab       	std	Z+48, r24	; 0x30
    dir_entry->long_name[1] = '.';
    5252:	8e e2       	ldi	r24, 0x2E	; 46
    5254:	81 83       	std	Z+1, r24	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    5256:	ef 81       	ldd	r30, Y+7	; 0x07
    5258:	f8 85       	ldd	r31, Y+8	; 0x08
    525a:	83 a1       	ldd	r24, Z+35	; 0x23
    525c:	94 a1       	ldd	r25, Z+36	; 0x24
    525e:	a5 a1       	ldd	r26, Z+37	; 0x25
    5260:	b6 a1       	ldd	r27, Z+38	; 0x26
    5262:	ed 85       	ldd	r30, Y+13	; 0x0d
    5264:	fe 85       	ldd	r31, Y+14	; 0x0e
    5266:	81 a3       	std	Z+33, r24	; 0x21
    5268:	92 a3       	std	Z+34, r25	; 0x22
    526a:	a3 a3       	std	Z+35, r26	; 0x23
    526c:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    526e:	8d 81       	ldd	r24, Y+5	; 0x05
    5270:	9e 81       	ldd	r25, Y+6	; 0x06
    5272:	bf 01       	movw	r22, r30
    5274:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <fat_write_dir_entry>
    5278:	88 23       	and	r24, r24
    527a:	09 f4       	brne	.+2      	; 0x527e <fat_create_dir+0x306>
    527c:	44 c0       	rjmp	.+136    	; 0x5306 <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    527e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5280:	9c 85       	ldd	r25, Y+12	; 0x0c
    5282:	69 85       	ldd	r22, Y+9	; 0x09
    5284:	7a 85       	ldd	r23, Y+10	; 0x0a
    5286:	4f e1       	ldi	r20, 0x1F	; 31
    5288:	50 e0       	ldi	r21, 0x00	; 0
    528a:	0e 94 01 36 	call	0x6c02	; 0x6c02 <strncpy>
    dir_entry->cluster = dir_cluster;
    528e:	89 81       	ldd	r24, Y+1	; 0x01
    5290:	9a 81       	ldd	r25, Y+2	; 0x02
    5292:	ab 81       	ldd	r26, Y+3	; 0x03
    5294:	bc 81       	ldd	r27, Y+4	; 0x04
    5296:	ed 85       	ldd	r30, Y+13	; 0x0d
    5298:	fe 85       	ldd	r31, Y+14	; 0x0e
    529a:	81 a3       	std	Z+33, r24	; 0x21
    529c:	92 a3       	std	Z+34, r25	; 0x22
    529e:	a3 a3       	std	Z+35, r26	; 0x23
    52a0:	b4 a3       	std	Z+36, r27	; 0x24

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    52a2:	8d 81       	ldd	r24, Y+5	; 0x05
    52a4:	9e 81       	ldd	r25, Y+6	; 0x06
    52a6:	6f 81       	ldd	r22, Y+7	; 0x07
    52a8:	78 85       	ldd	r23, Y+8	; 0x08
    52aa:	af 01       	movw	r20, r30
    52ac:	0e 94 a5 22 	call	0x454a	; 0x454a <fat_find_offset_for_dir_entry>
    52b0:	ad 85       	ldd	r26, Y+13	; 0x0d
    52b2:	be 85       	ldd	r27, Y+14	; 0x0e
    52b4:	99 96       	adiw	r26, 0x29	; 41
    52b6:	2c 93       	st	X, r18
    52b8:	99 97       	sbiw	r26, 0x29	; 41
    52ba:	9a 96       	adiw	r26, 0x2a	; 42
    52bc:	3c 93       	st	X, r19
    52be:	9a 97       	sbiw	r26, 0x2a	; 42
    52c0:	9b 96       	adiw	r26, 0x2b	; 43
    52c2:	4c 93       	st	X, r20
    52c4:	9b 97       	sbiw	r26, 0x2b	; 43
    52c6:	9c 96       	adiw	r26, 0x2c	; 44
    52c8:	5c 93       	st	X, r21
    52ca:	9c 97       	sbiw	r26, 0x2c	; 44
    52cc:	9d 96       	adiw	r26, 0x2d	; 45
    52ce:	6c 93       	st	X, r22
    52d0:	9d 97       	sbiw	r26, 0x2d	; 45
    52d2:	9e 96       	adiw	r26, 0x2e	; 46
    52d4:	7c 93       	st	X, r23
    52d6:	9e 97       	sbiw	r26, 0x2e	; 46
    52d8:	9f 96       	adiw	r26, 0x2f	; 47
    52da:	8c 93       	st	X, r24
    52dc:	9f 97       	sbiw	r26, 0x2f	; 47
    52de:	d0 96       	adiw	r26, 0x30	; 48
    52e0:	9c 93       	st	X, r25
    52e2:	23 2b       	or	r18, r19
    52e4:	24 2b       	or	r18, r20
    52e6:	25 2b       	or	r18, r21
    52e8:	26 2b       	or	r18, r22
    52ea:	27 2b       	or	r18, r23
    52ec:	28 2b       	or	r18, r24
    52ee:	29 2b       	or	r18, r25
    52f0:	51 f0       	breq	.+20     	; 0x5306 <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    52f2:	8d 81       	ldd	r24, Y+5	; 0x05
    52f4:	9e 81       	ldd	r25, Y+6	; 0x06
    52f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    52f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    52fa:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <fat_write_dir_entry>
    52fe:	88 23       	and	r24, r24
    5300:	11 f0       	breq	.+4      	; 0x5306 <fat_create_dir+0x38e>
    5302:	81 e0       	ldi	r24, 0x01	; 1
    5304:	09 c0       	rjmp	.+18     	; 0x5318 <fat_create_dir+0x3a0>
    {
        fat_free_clusters(fs, dir_cluster);
    5306:	8d 81       	ldd	r24, Y+5	; 0x05
    5308:	9e 81       	ldd	r25, Y+6	; 0x06
    530a:	49 81       	ldd	r20, Y+1	; 0x01
    530c:	5a 81       	ldd	r21, Y+2	; 0x02
    530e:	6b 81       	ldd	r22, Y+3	; 0x03
    5310:	7c 81       	ldd	r23, Y+4	; 0x04
    5312:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_free_clusters>
        return 0;
    5316:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    5318:	2e 96       	adiw	r28, 0x0e	; 14
    531a:	0f b6       	in	r0, 0x3f	; 63
    531c:	f8 94       	cli
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	0f be       	out	0x3f, r0	; 63
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	cf 91       	pop	r28
    5326:	df 91       	pop	r29
    5328:	1f 91       	pop	r17
    532a:	0f 91       	pop	r16
    532c:	ff 90       	pop	r15
    532e:	ef 90       	pop	r14
    5330:	df 90       	pop	r13
    5332:	cf 90       	pop	r12
    5334:	bf 90       	pop	r11
    5336:	af 90       	pop	r10
    5338:	9f 90       	pop	r9
    533a:	8f 90       	pop	r8
    533c:	7f 90       	pop	r7
    533e:	6f 90       	pop	r6
    5340:	5f 90       	pop	r5
    5342:	4f 90       	pop	r4
    5344:	3f 90       	pop	r3
    5346:	2f 90       	pop	r2
    5348:	08 95       	ret

0000534a <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    534a:	af 92       	push	r10
    534c:	bf 92       	push	r11
    534e:	cf 92       	push	r12
    5350:	df 92       	push	r13
    5352:	ef 92       	push	r14
    5354:	ff 92       	push	r15
    5356:	0f 93       	push	r16
    5358:	1f 93       	push	r17
    535a:	cf 93       	push	r28
    535c:	df 93       	push	r29
    535e:	8c 01       	movw	r16, r24
    5360:	7b 01       	movw	r14, r22
    5362:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    5364:	00 97       	sbiw	r24, 0x00	; 0
    5366:	09 f4       	brne	.+2      	; 0x536a <fat_create_file+0x20>
    5368:	54 c0       	rjmp	.+168    	; 0x5412 <fat_create_file+0xc8>
    536a:	61 15       	cp	r22, r1
    536c:	71 05       	cpc	r23, r1
    536e:	09 f4       	brne	.+2      	; 0x5372 <fat_create_file+0x28>
    5370:	50 c0       	rjmp	.+160    	; 0x5412 <fat_create_file+0xc8>
    5372:	fb 01       	movw	r30, r22
    5374:	80 81       	ld	r24, Z
    5376:	88 23       	and	r24, r24
    5378:	09 f4       	brne	.+2      	; 0x537c <fat_create_file+0x32>
    537a:	4b c0       	rjmp	.+150    	; 0x5412 <fat_create_file+0xc8>
    537c:	41 15       	cp	r20, r1
    537e:	51 05       	cpc	r21, r1
    5380:	09 f4       	brne	.+2      	; 0x5384 <fat_create_file+0x3a>
    5382:	47 c0       	rjmp	.+142    	; 0x5412 <fat_create_file+0xc8>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    5384:	b4 2e       	mov	r11, r20
    5386:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    5388:	c8 01       	movw	r24, r16
    538a:	be 01       	movw	r22, r28
    538c:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <fat_read_dir>
    5390:	88 23       	and	r24, r24
    5392:	99 f0       	breq	.+38     	; 0x53ba <fat_create_file+0x70>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    5394:	c7 01       	movw	r24, r14
    5396:	6b 2d       	mov	r22, r11
    5398:	7a 2d       	mov	r23, r10
    539a:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <strcmp>
    539e:	00 97       	sbiw	r24, 0x00	; 0
    53a0:	99 f7       	brne	.-26     	; 0x5388 <fat_create_file+0x3e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    53a2:	f8 01       	movw	r30, r16
    53a4:	83 a1       	ldd	r24, Z+35	; 0x23
    53a6:	94 a1       	ldd	r25, Z+36	; 0x24
    53a8:	a5 a1       	ldd	r26, Z+37	; 0x25
    53aa:	b6 a1       	ldd	r27, Z+38	; 0x26
    53ac:	83 ab       	std	Z+51, r24	; 0x33
    53ae:	94 ab       	std	Z+52, r25	; 0x34
    53b0:	a5 ab       	std	Z+53, r26	; 0x35
    53b2:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    53b4:	10 ae       	std	Z+56, r1	; 0x38
    53b6:	17 aa       	std	Z+55, r1	; 0x37
    53b8:	2c c0       	rjmp	.+88     	; 0x5412 <fat_create_file+0xc8>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    53ba:	f8 01       	movw	r30, r16
    53bc:	c0 80       	ld	r12, Z
    53be:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    53c0:	81 e3       	ldi	r24, 0x31	; 49
    53c2:	fe 01       	movw	r30, r28
    53c4:	11 92       	st	Z+, r1
    53c6:	8a 95       	dec	r24
    53c8:	e9 f7       	brne	.-6      	; 0x53c4 <fat_create_file+0x7a>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    53ca:	8b 2d       	mov	r24, r11
    53cc:	9a 2d       	mov	r25, r10
    53ce:	b7 01       	movw	r22, r14
    53d0:	4f e1       	ldi	r20, 0x1F	; 31
    53d2:	50 e0       	ldi	r21, 0x00	; 0
    53d4:	0e 94 01 36 	call	0x6c02	; 0x6c02 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    53d8:	c6 01       	movw	r24, r12
    53da:	b8 01       	movw	r22, r16
    53dc:	ae 01       	movw	r20, r28
    53de:	0e 94 a5 22 	call	0x454a	; 0x454a <fat_find_offset_for_dir_entry>
    53e2:	29 a7       	std	Y+41, r18	; 0x29
    53e4:	3a a7       	std	Y+42, r19	; 0x2a
    53e6:	4b a7       	std	Y+43, r20	; 0x2b
    53e8:	5c a7       	std	Y+44, r21	; 0x2c
    53ea:	6d a7       	std	Y+45, r22	; 0x2d
    53ec:	7e a7       	std	Y+46, r23	; 0x2e
    53ee:	8f a7       	std	Y+47, r24	; 0x2f
    53f0:	98 ab       	std	Y+48, r25	; 0x30
    53f2:	23 2b       	or	r18, r19
    53f4:	24 2b       	or	r18, r20
    53f6:	25 2b       	or	r18, r21
    53f8:	26 2b       	or	r18, r22
    53fa:	27 2b       	or	r18, r23
    53fc:	28 2b       	or	r18, r24
    53fe:	29 2b       	or	r18, r25
    5400:	41 f0       	breq	.+16     	; 0x5412 <fat_create_file+0xc8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    5402:	c6 01       	movw	r24, r12
    5404:	be 01       	movw	r22, r28
    5406:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <fat_write_dir_entry>
    540a:	88 23       	and	r24, r24
    540c:	19 f0       	breq	.+6      	; 0x5414 <fat_create_file+0xca>
    540e:	81 e0       	ldi	r24, 0x01	; 1
    5410:	01 c0       	rjmp	.+2      	; 0x5414 <fat_create_file+0xca>
    5412:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    5414:	df 91       	pop	r29
    5416:	cf 91       	pop	r28
    5418:	1f 91       	pop	r17
    541a:	0f 91       	pop	r16
    541c:	ff 90       	pop	r15
    541e:	ef 90       	pop	r14
    5420:	df 90       	pop	r13
    5422:	cf 90       	pop	r12
    5424:	bf 90       	pop	r11
    5426:	af 90       	pop	r10
    5428:	08 95       	ret

0000542a <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    542a:	2f 92       	push	r2
    542c:	3f 92       	push	r3
    542e:	4f 92       	push	r4
    5430:	5f 92       	push	r5
    5432:	6f 92       	push	r6
    5434:	7f 92       	push	r7
    5436:	8f 92       	push	r8
    5438:	9f 92       	push	r9
    543a:	af 92       	push	r10
    543c:	bf 92       	push	r11
    543e:	cf 92       	push	r12
    5440:	df 92       	push	r13
    5442:	ef 92       	push	r14
    5444:	ff 92       	push	r15
    5446:	0f 93       	push	r16
    5448:	1f 93       	push	r17
    544a:	df 93       	push	r29
    544c:	cf 93       	push	r28
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	62 97       	sbiw	r28, 0x12	; 18
    5454:	0f b6       	in	r0, 0x3f	; 63
    5456:	f8 94       	cli
    5458:	de bf       	out	0x3e, r29	; 62
    545a:	0f be       	out	0x3f, r0	; 63
    545c:	cd bf       	out	0x3d, r28	; 61
    545e:	1c 01       	movw	r2, r24
    5460:	4b 87       	std	Y+11, r20	; 0x0b
    5462:	5c 87       	std	Y+12, r21	; 0x0c
    5464:	6d 87       	std	Y+13, r22	; 0x0d
    5466:	7e 87       	std	Y+14, r23	; 0x0e
    if(!fd)
    5468:	00 97       	sbiw	r24, 0x00	; 0
    546a:	09 f4       	brne	.+2      	; 0x546e <fat_resize_file+0x44>
    546c:	15 c2       	rjmp	.+1066   	; 0x5898 <fat_resize_file+0x46e>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    546e:	dc 01       	movw	r26, r24
    5470:	93 96       	adiw	r26, 0x23	; 35
    5472:	cd 90       	ld	r12, X+
    5474:	dd 90       	ld	r13, X+
    5476:	ed 90       	ld	r14, X+
    5478:	fc 90       	ld	r15, X
    547a:	96 97       	sbiw	r26, 0x26	; 38
    uint16_t cluster_size = fd->fs->header.cluster_size;
    547c:	ed 91       	ld	r30, X+
    547e:	fc 91       	ld	r31, X
    5480:	20 8d       	ldd	r18, Z+24	; 0x18
    5482:	31 8d       	ldd	r19, Z+25	; 0x19
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    5484:	c1 14       	cp	r12, r1
    5486:	d1 04       	cpc	r13, r1
    5488:	e1 04       	cpc	r14, r1
    548a:	f1 04       	cpc	r15, r1
    548c:	99 f0       	breq	.+38     	; 0x54b4 <fat_resize_file+0x8a>
    548e:	4b 84       	ldd	r4, Y+11	; 0x0b
    5490:	5c 84       	ldd	r5, Y+12	; 0x0c
    5492:	6d 84       	ldd	r6, Y+13	; 0x0d
    5494:	7e 84       	ldd	r7, Y+14	; 0x0e
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    5496:	49 01       	movw	r8, r18
    5498:	aa 24       	eor	r10, r10
    549a:	bb 24       	eor	r11, r11
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    549c:	22 27       	eor	r18, r18
    549e:	33 27       	eor	r19, r19
    54a0:	a9 01       	movw	r20, r18
    54a2:	28 19       	sub	r18, r8
    54a4:	39 09       	sbc	r19, r9
    54a6:	4a 09       	sbc	r20, r10
    54a8:	5b 09       	sbc	r21, r11
    54aa:	2f 87       	std	Y+15, r18	; 0x0f
    54ac:	38 8b       	std	Y+16, r19	; 0x10
    54ae:	49 8b       	std	Y+17, r20	; 0x11
    54b0:	5a 8b       	std	Y+18, r21	; 0x12
    54b2:	20 c0       	rjmp	.+64     	; 0x54f4 <fat_resize_file+0xca>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    54b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    54b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    54b8:	ad 85       	ldd	r26, Y+13	; 0x0d
    54ba:	be 85       	ldd	r27, Y+14	; 0x0e
    54bc:	00 97       	sbiw	r24, 0x00	; 0
    54be:	a1 05       	cpc	r26, r1
    54c0:	b1 05       	cpc	r27, r1
    54c2:	09 f4       	brne	.+2      	; 0x54c6 <fat_resize_file+0x9c>
    54c4:	97 c1       	rjmp	.+814    	; 0x57f4 <fat_resize_file+0x3ca>
    54c6:	e3 cf       	rjmp	.-58     	; 0x548e <fat_resize_file+0x64>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    54c8:	d1 01       	movw	r26, r2
    54ca:	8d 91       	ld	r24, X+
    54cc:	9c 91       	ld	r25, X
    54ce:	b7 01       	movw	r22, r14
    54d0:	a6 01       	movw	r20, r12
    54d2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
            if(cluster_num_next)
    54d6:	61 15       	cp	r22, r1
    54d8:	71 05       	cpc	r23, r1
    54da:	81 05       	cpc	r24, r1
    54dc:	91 05       	cpc	r25, r1
    54de:	81 f0       	breq	.+32     	; 0x5500 <fat_resize_file+0xd6>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    54e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    54e2:	38 89       	ldd	r19, Y+16	; 0x10
    54e4:	49 89       	ldd	r20, Y+17	; 0x11
    54e6:	5a 89       	ldd	r21, Y+18	; 0x12
    54e8:	42 0e       	add	r4, r18
    54ea:	53 1e       	adc	r5, r19
    54ec:	64 1e       	adc	r6, r20
    54ee:	75 1e       	adc	r7, r21
    54f0:	6b 01       	movw	r12, r22
    54f2:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    54f4:	84 14       	cp	r8, r4
    54f6:	95 04       	cpc	r9, r5
    54f8:	a6 04       	cpc	r10, r6
    54fa:	b7 04       	cpc	r11, r7
    54fc:	28 f3       	brcs	.-54     	; 0x54c8 <fat_resize_file+0x9e>
    54fe:	e6 c1       	rjmp	.+972    	; 0x58cc <fat_resize_file+0x4a2>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    5500:	c3 01       	movw	r24, r6
    5502:	b2 01       	movw	r22, r4
    5504:	68 0d       	add	r22, r8
    5506:	79 1d       	adc	r23, r9
    5508:	8a 1d       	adc	r24, r10
    550a:	9b 1d       	adc	r25, r11
    550c:	61 50       	subi	r22, 0x01	; 1
    550e:	70 40       	sbci	r23, 0x00	; 0
    5510:	80 40       	sbci	r24, 0x00	; 0
    5512:	90 40       	sbci	r25, 0x00	; 0
    5514:	a5 01       	movw	r20, r10
    5516:	94 01       	movw	r18, r8
    5518:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodsi4>
    551c:	89 01       	movw	r16, r18
    551e:	9a 01       	movw	r18, r20
    5520:	d1 01       	movw	r26, r2
    5522:	8d 91       	ld	r24, X+
    5524:	9c 91       	ld	r25, X
    5526:	b7 01       	movw	r22, r14
    5528:	a6 01       	movw	r20, r12
    552a:	0e 94 bb 11 	call	0x2376	; 0x2376 <fat_append_clusters>
            if(!cluster_new_chain)
    552e:	61 15       	cp	r22, r1
    5530:	71 05       	cpc	r23, r1
    5532:	81 05       	cpc	r24, r1
    5534:	91 05       	cpc	r25, r1
    5536:	09 f4       	brne	.+2      	; 0x553a <fat_resize_file+0x110>
    5538:	af c1       	rjmp	.+862    	; 0x5898 <fat_resize_file+0x46e>
                return 0;

            if(!cluster_num)
    553a:	c1 14       	cp	r12, r1
    553c:	d1 04       	cpc	r13, r1
    553e:	e1 04       	cpc	r14, r1
    5540:	f1 04       	cpc	r15, r1
    5542:	39 f4       	brne	.+14     	; 0x5552 <fat_resize_file+0x128>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    5544:	f1 01       	movw	r30, r2
    5546:	63 a3       	std	Z+35, r22	; 0x23
    5548:	74 a3       	std	Z+36, r23	; 0x24
    554a:	85 a3       	std	Z+37, r24	; 0x25
    554c:	96 a3       	std	Z+38, r25	; 0x26
    554e:	6b 01       	movw	r12, r22
    5550:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    5552:	2b 85       	ldd	r18, Y+11	; 0x0b
    5554:	3c 85       	ldd	r19, Y+12	; 0x0c
    5556:	4d 85       	ldd	r20, Y+13	; 0x0d
    5558:	5e 85       	ldd	r21, Y+14	; 0x0e
    555a:	d1 01       	movw	r26, r2
    555c:	97 96       	adiw	r26, 0x27	; 39
    555e:	2d 93       	st	X+, r18
    5560:	3d 93       	st	X+, r19
    5562:	4d 93       	st	X+, r20
    5564:	5c 93       	st	X, r21
    5566:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    5568:	21 15       	cp	r18, r1
    556a:	31 05       	cpc	r19, r1
    556c:	41 05       	cpc	r20, r1
    556e:	51 05       	cpc	r21, r1
    5570:	29 f4       	brne	.+10     	; 0x557c <fat_resize_file+0x152>
            fd->dir_entry.cluster = 0;
    5572:	f1 01       	movw	r30, r2
    5574:	13 a2       	std	Z+35, r1	; 0x23
    5576:	14 a2       	std	Z+36, r1	; 0x24
    5578:	15 a2       	std	Z+37, r1	; 0x25
    557a:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    557c:	f1 01       	movw	r30, r2
    557e:	81 91       	ld	r24, Z+
    5580:	91 91       	ld	r25, Z+
    5582:	bf 01       	movw	r22, r30
    5584:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <fat_write_dir_entry>
    5588:	88 23       	and	r24, r24
    558a:	09 f4       	brne	.+2      	; 0x558e <fat_resize_file+0x164>
    558c:	85 c1       	rjmp	.+778    	; 0x5898 <fat_resize_file+0x46e>
            return 0;

        if(size == 0)
    558e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5590:	3c 85       	ldd	r19, Y+12	; 0x0c
    5592:	4d 85       	ldd	r20, Y+13	; 0x0d
    5594:	5e 85       	ldd	r21, Y+14	; 0x0e
    5596:	21 15       	cp	r18, r1
    5598:	31 05       	cpc	r19, r1
    559a:	41 05       	cpc	r20, r1
    559c:	51 05       	cpc	r21, r1
    559e:	31 f4       	brne	.+12     	; 0x55ac <fat_resize_file+0x182>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    55a0:	d1 01       	movw	r26, r2
    55a2:	8d 91       	ld	r24, X+
    55a4:	9c 91       	ld	r25, X
    55a6:	b7 01       	movw	r22, r14
    55a8:	a6 01       	movw	r20, r12
    55aa:	22 c1       	rjmp	.+580    	; 0x57f0 <fat_resize_file+0x3c6>
        }
        else if(size_new <= cluster_size)
    55ac:	84 14       	cp	r8, r4
    55ae:	95 04       	cpc	r9, r5
    55b0:	a6 04       	cpc	r10, r6
    55b2:	b7 04       	cpc	r11, r7
    55b4:	08 f4       	brcc	.+2      	; 0x55b8 <fat_resize_file+0x18e>
    55b6:	1e c1       	rjmp	.+572    	; 0x57f4 <fat_resize_file+0x3ca>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    55b8:	f1 01       	movw	r30, r2
    55ba:	a0 80       	ld	r10, Z
    55bc:	b1 80       	ldd	r11, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    55be:	a1 14       	cp	r10, r1
    55c0:	b1 04       	cpc	r11, r1
    55c2:	09 f4       	brne	.+2      	; 0x55c6 <fat_resize_file+0x19c>
    55c4:	17 c1       	rjmp	.+558    	; 0x57f4 <fat_resize_file+0x3ca>
    55c6:	f2 e0       	ldi	r31, 0x02	; 2
    55c8:	cf 16       	cp	r12, r31
    55ca:	d1 04       	cpc	r13, r1
    55cc:	e1 04       	cpc	r14, r1
    55ce:	f1 04       	cpc	r15, r1
    55d0:	08 f4       	brcc	.+2      	; 0x55d4 <fat_resize_file+0x1aa>
    55d2:	10 c1       	rjmp	.+544    	; 0x57f4 <fat_resize_file+0x3ca>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    55d4:	c5 01       	movw	r24, r10
    55d6:	b7 01       	movw	r22, r14
    55d8:	a6 01       	movw	r20, r12
    55da:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
    55de:	6f 83       	std	Y+7, r22	; 0x07
    55e0:	78 87       	std	Y+8, r23	; 0x08
    55e2:	89 87       	std	Y+9, r24	; 0x09
    55e4:	9a 87       	std	Y+10, r25	; 0x0a

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    55e6:	d5 01       	movw	r26, r10
    55e8:	8d 90       	ld	r8, X+
    55ea:	9c 90       	ld	r9, X
    55ec:	f4 01       	movw	r30, r8
    55ee:	80 85       	ldd	r24, Z+8	; 0x08
    55f0:	8b 30       	cpi	r24, 0x0B	; 11
    55f2:	09 f0       	breq	.+2      	; 0x55f6 <fat_resize_file+0x1cc>
    55f4:	7b c0       	rjmp	.+246    	; 0x56ec <fat_resize_file+0x2c2>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    55f6:	8f ef       	ldi	r24, 0xFF	; 255
    55f8:	9f ef       	ldi	r25, 0xFF	; 255
    55fa:	af ef       	ldi	r26, 0xFF	; 255
    55fc:	bf e0       	ldi	r27, 0x0F	; 15
    55fe:	8b 83       	std	Y+3, r24	; 0x03
    5600:	9c 83       	std	Y+4, r25	; 0x04
    5602:	ad 83       	std	Y+5, r26	; 0x05
    5604:	be 83       	std	Y+6, r27	; 0x06
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    5606:	b2 e0       	ldi	r27, 0x02	; 2
    5608:	cc 0c       	add	r12, r12
    560a:	dd 1c       	adc	r13, r13
    560c:	ee 1c       	adc	r14, r14
    560e:	ff 1c       	adc	r15, r15
    5610:	ba 95       	dec	r27
    5612:	d1 f7       	brne	.-12     	; 0x5608 <fat_resize_file+0x1de>
    5614:	b7 01       	movw	r22, r14
    5616:	a6 01       	movw	r20, r12
    5618:	80 e0       	ldi	r24, 0x00	; 0
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	a0 e0       	ldi	r26, 0x00	; 0
    561e:	b0 e0       	ldi	r27, 0x00	; 0
    5620:	f5 01       	movw	r30, r10
    5622:	22 85       	ldd	r18, Z+10	; 0x0a
    5624:	13 85       	ldd	r17, Z+11	; 0x0b
    5626:	04 85       	ldd	r16, Z+12	; 0x0c
    5628:	c5 84       	ldd	r12, Z+13	; 0x0d
    562a:	f6 84       	ldd	r15, Z+14	; 0x0e
    562c:	e7 84       	ldd	r14, Z+15	; 0x0f
    562e:	d0 88       	ldd	r13, Z+16	; 0x10
    5630:	51 88       	ldd	r5, Z+17	; 0x11
    5632:	24 0f       	add	r18, r20
    5634:	31 e0       	ldi	r19, 0x01	; 1
    5636:	24 17       	cp	r18, r20
    5638:	08 f0       	brcs	.+2      	; 0x563c <fat_resize_file+0x212>
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	e1 2f       	mov	r30, r17
    563e:	e5 0f       	add	r30, r21
    5640:	11 e0       	ldi	r17, 0x01	; 1
    5642:	e5 17       	cp	r30, r21
    5644:	08 f0       	brcs	.+2      	; 0x5648 <fat_resize_file+0x21e>
    5646:	10 e0       	ldi	r17, 0x00	; 0
    5648:	3e 0f       	add	r19, r30
    564a:	f1 e0       	ldi	r31, 0x01	; 1
    564c:	3e 17       	cp	r19, r30
    564e:	08 f0       	brcs	.+2      	; 0x5652 <fat_resize_file+0x228>
    5650:	f0 e0       	ldi	r31, 0x00	; 0
    5652:	1f 2b       	or	r17, r31
    5654:	e6 2f       	mov	r30, r22
    5656:	e0 0f       	add	r30, r16
    5658:	01 e0       	ldi	r16, 0x01	; 1
    565a:	e6 17       	cp	r30, r22
    565c:	08 f0       	brcs	.+2      	; 0x5660 <fat_resize_file+0x236>
    565e:	00 e0       	ldi	r16, 0x00	; 0
    5660:	61 2e       	mov	r6, r17
    5662:	6e 0e       	add	r6, r30
    5664:	f1 e0       	ldi	r31, 0x01	; 1
    5666:	6e 16       	cp	r6, r30
    5668:	08 f0       	brcs	.+2      	; 0x566c <fat_resize_file+0x242>
    566a:	f0 e0       	ldi	r31, 0x00	; 0
    566c:	0f 2b       	or	r16, r31
    566e:	e7 2f       	mov	r30, r23
    5670:	ec 0d       	add	r30, r12
    5672:	f1 e0       	ldi	r31, 0x01	; 1
    5674:	e7 17       	cp	r30, r23
    5676:	08 f0       	brcs	.+2      	; 0x567a <fat_resize_file+0x250>
    5678:	f0 e0       	ldi	r31, 0x00	; 0
    567a:	70 2e       	mov	r7, r16
    567c:	7e 0e       	add	r7, r30
    567e:	11 e0       	ldi	r17, 0x01	; 1
    5680:	7e 16       	cp	r7, r30
    5682:	08 f0       	brcs	.+2      	; 0x5686 <fat_resize_file+0x25c>
    5684:	10 e0       	ldi	r17, 0x00	; 0
    5686:	f1 2b       	or	r31, r17
    5688:	e1 e0       	ldi	r30, 0x01	; 1
    568a:	f8 16       	cp	r15, r24
    568c:	08 f0       	brcs	.+2      	; 0x5690 <fat_resize_file+0x266>
    568e:	e0 e0       	ldi	r30, 0x00	; 0
    5690:	cf 2e       	mov	r12, r31
    5692:	cf 0c       	add	r12, r15
    5694:	f1 e0       	ldi	r31, 0x01	; 1
    5696:	cf 14       	cp	r12, r15
    5698:	08 f0       	brcs	.+2      	; 0x569c <fat_resize_file+0x272>
    569a:	f0 e0       	ldi	r31, 0x00	; 0
    569c:	ef 2b       	or	r30, r31
    569e:	f1 e0       	ldi	r31, 0x01	; 1
    56a0:	e9 16       	cp	r14, r25
    56a2:	08 f0       	brcs	.+2      	; 0x56a6 <fat_resize_file+0x27c>
    56a4:	f0 e0       	ldi	r31, 0x00	; 0
    56a6:	0e 2f       	mov	r16, r30
    56a8:	0e 0d       	add	r16, r14
    56aa:	e1 e0       	ldi	r30, 0x01	; 1
    56ac:	0e 15       	cp	r16, r14
    56ae:	08 f0       	brcs	.+2      	; 0x56b2 <fat_resize_file+0x288>
    56b0:	e0 e0       	ldi	r30, 0x00	; 0
    56b2:	fe 2b       	or	r31, r30
    56b4:	11 e0       	ldi	r17, 0x01	; 1
    56b6:	da 16       	cp	r13, r26
    56b8:	08 f0       	brcs	.+2      	; 0x56bc <fat_resize_file+0x292>
    56ba:	10 e0       	ldi	r17, 0x00	; 0
    56bc:	8f 2f       	mov	r24, r31
    56be:	8d 0d       	add	r24, r13
    56c0:	e1 e0       	ldi	r30, 0x01	; 1
    56c2:	8d 15       	cp	r24, r13
    56c4:	08 f0       	brcs	.+2      	; 0x56c8 <fat_resize_file+0x29e>
    56c6:	e0 e0       	ldi	r30, 0x00	; 0
    56c8:	1e 2b       	or	r17, r30
    56ca:	d4 01       	movw	r26, r8
    56cc:	14 96       	adiw	r26, 0x04	; 4
    56ce:	ed 91       	ld	r30, X+
    56d0:	fc 91       	ld	r31, X
    56d2:	15 97       	sbiw	r26, 0x05	; 5
    56d4:	a3 01       	movw	r20, r6
    56d6:	6c 2d       	mov	r22, r12
    56d8:	70 2f       	mov	r23, r16
    56da:	91 2f       	mov	r25, r17
    56dc:	95 0d       	add	r25, r5
    56de:	8e 01       	movw	r16, r28
    56e0:	0d 5f       	subi	r16, 0xFD	; 253
    56e2:	1f 4f       	sbci	r17, 0xFF	; 255
    56e4:	a4 e0       	ldi	r26, 0x04	; 4
    56e6:	ea 2e       	mov	r14, r26
    56e8:	f1 2c       	mov	r15, r1
    56ea:	73 c0       	rjmp	.+230    	; 0x57d2 <fat_resize_file+0x3a8>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    56ec:	8f ef       	ldi	r24, 0xFF	; 255
    56ee:	9f ef       	ldi	r25, 0xFF	; 255
    56f0:	9a 83       	std	Y+2, r25	; 0x02
    56f2:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    56f4:	cc 0c       	add	r12, r12
    56f6:	dd 1c       	adc	r13, r13
    56f8:	ee 1c       	adc	r14, r14
    56fa:	ff 1c       	adc	r15, r15
    56fc:	b7 01       	movw	r22, r14
    56fe:	a6 01       	movw	r20, r12
    5700:	80 e0       	ldi	r24, 0x00	; 0
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	a0 e0       	ldi	r26, 0x00	; 0
    5706:	b0 e0       	ldi	r27, 0x00	; 0
    5708:	f5 01       	movw	r30, r10
    570a:	22 85       	ldd	r18, Z+10	; 0x0a
    570c:	13 85       	ldd	r17, Z+11	; 0x0b
    570e:	04 85       	ldd	r16, Z+12	; 0x0c
    5710:	c5 84       	ldd	r12, Z+13	; 0x0d
    5712:	f6 84       	ldd	r15, Z+14	; 0x0e
    5714:	e7 84       	ldd	r14, Z+15	; 0x0f
    5716:	d0 88       	ldd	r13, Z+16	; 0x10
    5718:	51 88       	ldd	r5, Z+17	; 0x11
    571a:	24 0f       	add	r18, r20
    571c:	31 e0       	ldi	r19, 0x01	; 1
    571e:	24 17       	cp	r18, r20
    5720:	08 f0       	brcs	.+2      	; 0x5724 <fat_resize_file+0x2fa>
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	e1 2f       	mov	r30, r17
    5726:	e5 0f       	add	r30, r21
    5728:	11 e0       	ldi	r17, 0x01	; 1
    572a:	e5 17       	cp	r30, r21
    572c:	08 f0       	brcs	.+2      	; 0x5730 <fat_resize_file+0x306>
    572e:	10 e0       	ldi	r17, 0x00	; 0
    5730:	3e 0f       	add	r19, r30
    5732:	f1 e0       	ldi	r31, 0x01	; 1
    5734:	3e 17       	cp	r19, r30
    5736:	08 f0       	brcs	.+2      	; 0x573a <fat_resize_file+0x310>
    5738:	f0 e0       	ldi	r31, 0x00	; 0
    573a:	1f 2b       	or	r17, r31
    573c:	e6 2f       	mov	r30, r22
    573e:	e0 0f       	add	r30, r16
    5740:	01 e0       	ldi	r16, 0x01	; 1
    5742:	e6 17       	cp	r30, r22
    5744:	08 f0       	brcs	.+2      	; 0x5748 <fat_resize_file+0x31e>
    5746:	00 e0       	ldi	r16, 0x00	; 0
    5748:	61 2e       	mov	r6, r17
    574a:	6e 0e       	add	r6, r30
    574c:	f1 e0       	ldi	r31, 0x01	; 1
    574e:	6e 16       	cp	r6, r30
    5750:	08 f0       	brcs	.+2      	; 0x5754 <fat_resize_file+0x32a>
    5752:	f0 e0       	ldi	r31, 0x00	; 0
    5754:	0f 2b       	or	r16, r31
    5756:	e7 2f       	mov	r30, r23
    5758:	ec 0d       	add	r30, r12
    575a:	f1 e0       	ldi	r31, 0x01	; 1
    575c:	e7 17       	cp	r30, r23
    575e:	08 f0       	brcs	.+2      	; 0x5762 <fat_resize_file+0x338>
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	70 2e       	mov	r7, r16
    5764:	7e 0e       	add	r7, r30
    5766:	11 e0       	ldi	r17, 0x01	; 1
    5768:	7e 16       	cp	r7, r30
    576a:	08 f0       	brcs	.+2      	; 0x576e <fat_resize_file+0x344>
    576c:	10 e0       	ldi	r17, 0x00	; 0
    576e:	f1 2b       	or	r31, r17
    5770:	e1 e0       	ldi	r30, 0x01	; 1
    5772:	f8 16       	cp	r15, r24
    5774:	08 f0       	brcs	.+2      	; 0x5778 <fat_resize_file+0x34e>
    5776:	e0 e0       	ldi	r30, 0x00	; 0
    5778:	cf 2e       	mov	r12, r31
    577a:	cf 0c       	add	r12, r15
    577c:	f1 e0       	ldi	r31, 0x01	; 1
    577e:	cf 14       	cp	r12, r15
    5780:	08 f0       	brcs	.+2      	; 0x5784 <fat_resize_file+0x35a>
    5782:	f0 e0       	ldi	r31, 0x00	; 0
    5784:	ef 2b       	or	r30, r31
    5786:	f1 e0       	ldi	r31, 0x01	; 1
    5788:	e9 16       	cp	r14, r25
    578a:	08 f0       	brcs	.+2      	; 0x578e <fat_resize_file+0x364>
    578c:	f0 e0       	ldi	r31, 0x00	; 0
    578e:	0e 2f       	mov	r16, r30
    5790:	0e 0d       	add	r16, r14
    5792:	e1 e0       	ldi	r30, 0x01	; 1
    5794:	0e 15       	cp	r16, r14
    5796:	08 f0       	brcs	.+2      	; 0x579a <fat_resize_file+0x370>
    5798:	e0 e0       	ldi	r30, 0x00	; 0
    579a:	fe 2b       	or	r31, r30
    579c:	11 e0       	ldi	r17, 0x01	; 1
    579e:	da 16       	cp	r13, r26
    57a0:	08 f0       	brcs	.+2      	; 0x57a4 <fat_resize_file+0x37a>
    57a2:	10 e0       	ldi	r17, 0x00	; 0
    57a4:	8f 2f       	mov	r24, r31
    57a6:	8d 0d       	add	r24, r13
    57a8:	e1 e0       	ldi	r30, 0x01	; 1
    57aa:	8d 15       	cp	r24, r13
    57ac:	08 f0       	brcs	.+2      	; 0x57b0 <fat_resize_file+0x386>
    57ae:	e0 e0       	ldi	r30, 0x00	; 0
    57b0:	1e 2b       	or	r17, r30
    57b2:	d4 01       	movw	r26, r8
    57b4:	14 96       	adiw	r26, 0x04	; 4
    57b6:	ed 91       	ld	r30, X+
    57b8:	fc 91       	ld	r31, X
    57ba:	15 97       	sbiw	r26, 0x05	; 5
    57bc:	a3 01       	movw	r20, r6
    57be:	6c 2d       	mov	r22, r12
    57c0:	70 2f       	mov	r23, r16
    57c2:	91 2f       	mov	r25, r17
    57c4:	95 0d       	add	r25, r5
    57c6:	8e 01       	movw	r16, r28
    57c8:	0f 5f       	subi	r16, 0xFF	; 255
    57ca:	1f 4f       	sbci	r17, 0xFF	; 255
    57cc:	a2 e0       	ldi	r26, 0x02	; 2
    57ce:	ea 2e       	mov	r14, r26
    57d0:	f1 2c       	mov	r15, r1
    57d2:	09 95       	icall
    57d4:	88 23       	and	r24, r24
    57d6:	71 f0       	breq	.+28     	; 0x57f4 <fat_resize_file+0x3ca>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    57d8:	2f 81       	ldd	r18, Y+7	; 0x07
    57da:	38 85       	ldd	r19, Y+8	; 0x08
    57dc:	49 85       	ldd	r20, Y+9	; 0x09
    57de:	5a 85       	ldd	r21, Y+10	; 0x0a
    57e0:	21 15       	cp	r18, r1
    57e2:	31 05       	cpc	r19, r1
    57e4:	41 05       	cpc	r20, r1
    57e6:	51 05       	cpc	r21, r1
    57e8:	29 f0       	breq	.+10     	; 0x57f4 <fat_resize_file+0x3ca>
        return fat_free_clusters(fs, cluster_num_next);
    57ea:	c5 01       	movw	r24, r10
    57ec:	ba 01       	movw	r22, r20
    57ee:	a9 01       	movw	r20, r18
    57f0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    57f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    57f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    57f8:	ad 85       	ldd	r26, Y+13	; 0x0d
    57fa:	be 85       	ldd	r27, Y+14	; 0x0e
    57fc:	8c 01       	movw	r16, r24
    57fe:	9d 01       	movw	r18, r26
    5800:	40 e0       	ldi	r20, 0x00	; 0
    5802:	50 e0       	ldi	r21, 0x00	; 0
    5804:	60 e0       	ldi	r22, 0x00	; 0
    5806:	70 e0       	ldi	r23, 0x00	; 0
    5808:	d1 01       	movw	r26, r2
    580a:	da 96       	adiw	r26, 0x3a	; 58
    580c:	8c 91       	ld	r24, X
    580e:	da 97       	sbiw	r26, 0x3a	; 58
    5810:	78 17       	cp	r23, r24
    5812:	80 f1       	brcs	.+96     	; 0x5874 <fat_resize_file+0x44a>
    5814:	87 17       	cp	r24, r23
    5816:	f1 f5       	brne	.+124    	; 0x5894 <fat_resize_file+0x46a>
    5818:	d9 96       	adiw	r26, 0x39	; 57
    581a:	8c 91       	ld	r24, X
    581c:	d9 97       	sbiw	r26, 0x39	; 57
    581e:	68 17       	cp	r22, r24
    5820:	48 f1       	brcs	.+82     	; 0x5874 <fat_resize_file+0x44a>
    5822:	86 17       	cp	r24, r22
    5824:	b9 f5       	brne	.+110    	; 0x5894 <fat_resize_file+0x46a>
    5826:	d8 96       	adiw	r26, 0x38	; 56
    5828:	8c 91       	ld	r24, X
    582a:	d8 97       	sbiw	r26, 0x38	; 56
    582c:	58 17       	cp	r21, r24
    582e:	10 f1       	brcs	.+68     	; 0x5874 <fat_resize_file+0x44a>
    5830:	85 17       	cp	r24, r21
    5832:	81 f5       	brne	.+96     	; 0x5894 <fat_resize_file+0x46a>
    5834:	d7 96       	adiw	r26, 0x37	; 55
    5836:	8c 91       	ld	r24, X
    5838:	d7 97       	sbiw	r26, 0x37	; 55
    583a:	48 17       	cp	r20, r24
    583c:	d8 f0       	brcs	.+54     	; 0x5874 <fat_resize_file+0x44a>
    583e:	84 17       	cp	r24, r20
    5840:	49 f5       	brne	.+82     	; 0x5894 <fat_resize_file+0x46a>
    5842:	d6 96       	adiw	r26, 0x36	; 54
    5844:	8c 91       	ld	r24, X
    5846:	d6 97       	sbiw	r26, 0x36	; 54
    5848:	38 17       	cp	r19, r24
    584a:	a0 f0       	brcs	.+40     	; 0x5874 <fat_resize_file+0x44a>
    584c:	83 17       	cp	r24, r19
    584e:	11 f5       	brne	.+68     	; 0x5894 <fat_resize_file+0x46a>
    5850:	d5 96       	adiw	r26, 0x35	; 53
    5852:	8c 91       	ld	r24, X
    5854:	d5 97       	sbiw	r26, 0x35	; 53
    5856:	28 17       	cp	r18, r24
    5858:	68 f0       	brcs	.+26     	; 0x5874 <fat_resize_file+0x44a>
    585a:	82 17       	cp	r24, r18
    585c:	d9 f4       	brne	.+54     	; 0x5894 <fat_resize_file+0x46a>
    585e:	d4 96       	adiw	r26, 0x34	; 52
    5860:	8c 91       	ld	r24, X
    5862:	d4 97       	sbiw	r26, 0x34	; 52
    5864:	18 17       	cp	r17, r24
    5866:	30 f0       	brcs	.+12     	; 0x5874 <fat_resize_file+0x44a>
    5868:	81 17       	cp	r24, r17
    586a:	a1 f4       	brne	.+40     	; 0x5894 <fat_resize_file+0x46a>
    586c:	d3 96       	adiw	r26, 0x33	; 51
    586e:	8c 91       	ld	r24, X
    5870:	08 17       	cp	r16, r24
    5872:	80 f4       	brcc	.+32     	; 0x5894 <fat_resize_file+0x46a>
    {
        fd->pos = size;
    5874:	f1 01       	movw	r30, r2
    5876:	03 ab       	std	Z+51, r16	; 0x33
    5878:	14 ab       	std	Z+52, r17	; 0x34
    587a:	25 ab       	std	Z+53, r18	; 0x35
    587c:	36 ab       	std	Z+54, r19	; 0x36
    587e:	17 aa       	std	Z+55, r1	; 0x37
    5880:	10 ae       	std	Z+56, r1	; 0x38
    5882:	11 ae       	std	Z+57, r1	; 0x39
    5884:	12 ae       	std	Z+58, r1	; 0x3a
        fd->pos_cluster = 0;
    5886:	d1 01       	movw	r26, r2
    5888:	db 96       	adiw	r26, 0x3b	; 59
    588a:	1d 92       	st	X+, r1
    588c:	1d 92       	st	X+, r1
    588e:	1d 92       	st	X+, r1
    5890:	1c 92       	st	X, r1
    5892:	de 97       	sbiw	r26, 0x3e	; 62
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	01 c0       	rjmp	.+2      	; 0x589a <fat_resize_file+0x470>
    5898:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    589a:	62 96       	adiw	r28, 0x12	; 18
    589c:	0f b6       	in	r0, 0x3f	; 63
    589e:	f8 94       	cli
    58a0:	de bf       	out	0x3e, r29	; 62
    58a2:	0f be       	out	0x3f, r0	; 63
    58a4:	cd bf       	out	0x3d, r28	; 61
    58a6:	cf 91       	pop	r28
    58a8:	df 91       	pop	r29
    58aa:	1f 91       	pop	r17
    58ac:	0f 91       	pop	r16
    58ae:	ff 90       	pop	r15
    58b0:	ef 90       	pop	r14
    58b2:	df 90       	pop	r13
    58b4:	cf 90       	pop	r12
    58b6:	bf 90       	pop	r11
    58b8:	af 90       	pop	r10
    58ba:	9f 90       	pop	r9
    58bc:	8f 90       	pop	r8
    58be:	7f 90       	pop	r7
    58c0:	6f 90       	pop	r6
    58c2:	5f 90       	pop	r5
    58c4:	4f 90       	pop	r4
    58c6:	3f 90       	pop	r3
    58c8:	2f 90       	pop	r2
    58ca:	08 95       	ret
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    58cc:	c1 14       	cp	r12, r1
    58ce:	d1 04       	cpc	r13, r1
    58d0:	e1 04       	cpc	r14, r1
    58d2:	f1 04       	cpc	r15, r1
    58d4:	09 f4       	brne	.+2      	; 0x58d8 <fat_resize_file+0x4ae>
    58d6:	14 ce       	rjmp	.-984    	; 0x5500 <fat_resize_file+0xd6>
    58d8:	3c ce       	rjmp	.-904    	; 0x5552 <fat_resize_file+0x128>

000058da <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    58da:	cf 92       	push	r12
    58dc:	df 92       	push	r13
    58de:	ef 92       	push	r14
    58e0:	ff 92       	push	r15
    58e2:	0f 93       	push	r16
    58e4:	1f 93       	push	r17
    58e6:	cf 93       	push	r28
    58e8:	df 93       	push	r29
    58ea:	ec 01       	movw	r28, r24
    58ec:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    58ee:	00 97       	sbiw	r24, 0x00	; 0
    58f0:	09 f4       	brne	.+2      	; 0x58f4 <fat_seek_file+0x1a>
    58f2:	51 c0       	rjmp	.+162    	; 0x5996 <fat_seek_file+0xbc>
    58f4:	61 15       	cp	r22, r1
    58f6:	71 05       	cpc	r23, r1
    58f8:	09 f4       	brne	.+2      	; 0x58fc <fat_seek_file+0x22>
    58fa:	4d c0       	rjmp	.+154    	; 0x5996 <fat_seek_file+0xbc>
        return 0;

    uint32_t new_pos = fd->pos;
    58fc:	2b a9       	ldd	r18, Y+51	; 0x33
    58fe:	3c a9       	ldd	r19, Y+52	; 0x34
    5900:	5d a9       	ldd	r21, Y+53	; 0x35
    5902:	6e a9       	ldd	r22, Y+54	; 0x36
    switch(whence)
    5904:	41 30       	cpi	r20, 0x01	; 1
    5906:	61 f0       	breq	.+24     	; 0x5920 <fat_seek_file+0x46>
    5908:	41 30       	cpi	r20, 0x01	; 1
    590a:	20 f0       	brcs	.+8      	; 0x5914 <fat_seek_file+0x3a>
    590c:	42 30       	cpi	r20, 0x02	; 2
    590e:	09 f0       	breq	.+2      	; 0x5912 <fat_seek_file+0x38>
    5910:	42 c0       	rjmp	.+132    	; 0x5996 <fat_seek_file+0xbc>
    5912:	0f c0       	rjmp	.+30     	; 0x5932 <fat_seek_file+0x58>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    5914:	f6 01       	movw	r30, r12
    5916:	e0 80       	ld	r14, Z
    5918:	f1 80       	ldd	r15, Z+1	; 0x01
    591a:	02 81       	ldd	r16, Z+2	; 0x02
    591c:	13 81       	ldd	r17, Z+3	; 0x03
    591e:	16 c0       	rjmp	.+44     	; 0x594c <fat_seek_file+0x72>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    5920:	c9 01       	movw	r24, r18
    5922:	a5 2f       	mov	r26, r21
    5924:	b6 2f       	mov	r27, r22
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    5926:	f6 01       	movw	r30, r12
    5928:	e0 80       	ld	r14, Z
    592a:	f1 80       	ldd	r15, Z+1	; 0x01
    592c:	02 81       	ldd	r16, Z+2	; 0x02
    592e:	13 81       	ldd	r17, Z+3	; 0x03
    5930:	09 c0       	rjmp	.+18     	; 0x5944 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    5932:	f6 01       	movw	r30, r12
    5934:	e0 80       	ld	r14, Z
    5936:	f1 80       	ldd	r15, Z+1	; 0x01
    5938:	02 81       	ldd	r16, Z+2	; 0x02
    593a:	13 81       	ldd	r17, Z+3	; 0x03
    593c:	8f a1       	ldd	r24, Y+39	; 0x27
    593e:	98 a5       	ldd	r25, Y+40	; 0x28
    5940:	a9 a5       	ldd	r26, Y+41	; 0x29
    5942:	ba a5       	ldd	r27, Y+42	; 0x2a
    5944:	e8 0e       	add	r14, r24
    5946:	f9 1e       	adc	r15, r25
    5948:	0a 1f       	adc	r16, r26
    594a:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    594c:	8f a1       	ldd	r24, Y+39	; 0x27
    594e:	98 a5       	ldd	r25, Y+40	; 0x28
    5950:	a9 a5       	ldd	r26, Y+41	; 0x29
    5952:	ba a5       	ldd	r27, Y+42	; 0x2a
    5954:	8e 15       	cp	r24, r14
    5956:	9f 05       	cpc	r25, r15
    5958:	a0 07       	cpc	r26, r16
    595a:	b1 07       	cpc	r27, r17
    595c:	38 f4       	brcc	.+14     	; 0x596c <fat_seek_file+0x92>
    595e:	ce 01       	movw	r24, r28
    5960:	b8 01       	movw	r22, r16
    5962:	a7 01       	movw	r20, r14
    5964:	0e 94 15 2a 	call	0x542a	; 0x542a <fat_resize_file>
    5968:	88 23       	and	r24, r24
    596a:	a9 f0       	breq	.+42     	; 0x5996 <fat_seek_file+0xbc>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    596c:	a8 01       	movw	r20, r16
    596e:	97 01       	movw	r18, r14
    5970:	eb aa       	std	Y+51, r14	; 0x33
    5972:	3c ab       	std	Y+52, r19	; 0x34
    5974:	4d ab       	std	Y+53, r20	; 0x35
    5976:	5e ab       	std	Y+54, r21	; 0x36
    5978:	1f aa       	std	Y+55, r1	; 0x37
    597a:	18 ae       	std	Y+56, r1	; 0x38
    597c:	19 ae       	std	Y+57, r1	; 0x39
    597e:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    5980:	1b ae       	std	Y+59, r1	; 0x3b
    5982:	1c ae       	std	Y+60, r1	; 0x3c
    5984:	1d ae       	std	Y+61, r1	; 0x3d
    5986:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    5988:	f6 01       	movw	r30, r12
    598a:	e0 82       	st	Z, r14
    598c:	f1 82       	std	Z+1, r15	; 0x01
    598e:	02 83       	std	Z+2, r16	; 0x02
    5990:	13 83       	std	Z+3, r17	; 0x03
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	01 c0       	rjmp	.+2      	; 0x5998 <fat_seek_file+0xbe>
    return 1;
    5996:	80 e0       	ldi	r24, 0x00	; 0
}
    5998:	df 91       	pop	r29
    599a:	cf 91       	pop	r28
    599c:	1f 91       	pop	r17
    599e:	0f 91       	pop	r16
    59a0:	ff 90       	pop	r15
    59a2:	ef 90       	pop	r14
    59a4:	df 90       	pop	r13
    59a6:	cf 90       	pop	r12
    59a8:	08 95       	ret

000059aa <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    59aa:	2f 92       	push	r2
    59ac:	3f 92       	push	r3
    59ae:	4f 92       	push	r4
    59b0:	5f 92       	push	r5
    59b2:	6f 92       	push	r6
    59b4:	7f 92       	push	r7
    59b6:	8f 92       	push	r8
    59b8:	9f 92       	push	r9
    59ba:	af 92       	push	r10
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	df 93       	push	r29
    59cc:	cf 93       	push	r28
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62
    59d2:	66 97       	sbiw	r28, 0x16	; 22
    59d4:	0f b6       	in	r0, 0x3f	; 63
    59d6:	f8 94       	cli
    59d8:	de bf       	out	0x3e, r29	; 62
    59da:	0f be       	out	0x3f, r0	; 63
    59dc:	cd bf       	out	0x3d, r28	; 61
    59de:	9e 8b       	std	Y+22, r25	; 0x16
    59e0:	8d 8b       	std	Y+21, r24	; 0x15
    59e2:	7e 87       	std	Y+14, r23	; 0x0e
    59e4:	6d 87       	std	Y+13, r22	; 0x0d
    59e6:	58 8b       	std	Y+16, r21	; 0x10
    59e8:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    59ea:	00 97       	sbiw	r24, 0x00	; 0
    59ec:	09 f4       	brne	.+2      	; 0x59f0 <fat_write_file+0x46>
    59ee:	8e c3       	rjmp	.+1820   	; 0x610c <fat_write_file+0x762>
    59f0:	67 2b       	or	r22, r23
    59f2:	09 f4       	brne	.+2      	; 0x59f6 <fat_write_file+0x4c>
    59f4:	8b c3       	rjmp	.+1814   	; 0x610c <fat_write_file+0x762>
    59f6:	45 2b       	or	r20, r21
    59f8:	09 f4       	brne	.+2      	; 0x59fc <fat_write_file+0x52>
    59fa:	88 c3       	rjmp	.+1808   	; 0x610c <fat_write_file+0x762>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    59fc:	dc 01       	movw	r26, r24
    59fe:	d3 96       	adiw	r26, 0x33	; 51
    5a00:	8c 90       	ld	r8, X
    5a02:	d3 97       	sbiw	r26, 0x33	; 51
    5a04:	d4 96       	adiw	r26, 0x34	; 52
    5a06:	9c 90       	ld	r9, X
    5a08:	d4 97       	sbiw	r26, 0x34	; 52
    5a0a:	d5 96       	adiw	r26, 0x35	; 53
    5a0c:	ac 90       	ld	r10, X
    5a0e:	d5 97       	sbiw	r26, 0x35	; 53
    5a10:	d6 96       	adiw	r26, 0x36	; 54
    5a12:	bc 90       	ld	r11, X
    5a14:	d6 97       	sbiw	r26, 0x36	; 54
    5a16:	d7 96       	adiw	r26, 0x37	; 55
    5a18:	cc 90       	ld	r12, X
    5a1a:	d7 97       	sbiw	r26, 0x37	; 55
    5a1c:	d8 96       	adiw	r26, 0x38	; 56
    5a1e:	dc 90       	ld	r13, X
    5a20:	d8 97       	sbiw	r26, 0x38	; 56
    5a22:	d9 96       	adiw	r26, 0x39	; 57
    5a24:	ec 90       	ld	r14, X
    5a26:	d9 97       	sbiw	r26, 0x39	; 57
    5a28:	da 96       	adiw	r26, 0x3a	; 58
    5a2a:	fc 90       	ld	r15, X
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	87 a1       	ldd	r24, Z+39	; 0x27
    5a30:	90 a5       	ldd	r25, Z+40	; 0x28
    5a32:	a1 a5       	ldd	r26, Z+41	; 0x29
    5a34:	b2 a5       	ldd	r27, Z+42	; 0x2a
    5a36:	9c 01       	movw	r18, r24
    5a38:	ad 01       	movw	r20, r26
    5a3a:	60 e0       	ldi	r22, 0x00	; 0
    5a3c:	70 e0       	ldi	r23, 0x00	; 0
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	9f 15       	cp	r25, r15
    5a44:	08 f4       	brcc	.+2      	; 0x5a48 <fat_write_file+0x9e>
    5a46:	62 c3       	rjmp	.+1732   	; 0x610c <fat_write_file+0x762>
    5a48:	f9 16       	cp	r15, r25
    5a4a:	09 f5       	brne	.+66     	; 0x5a8e <fat_write_file+0xe4>
    5a4c:	8e 15       	cp	r24, r14
    5a4e:	08 f4       	brcc	.+2      	; 0x5a52 <fat_write_file+0xa8>
    5a50:	5d c3       	rjmp	.+1722   	; 0x610c <fat_write_file+0x762>
    5a52:	e8 16       	cp	r14, r24
    5a54:	e1 f4       	brne	.+56     	; 0x5a8e <fat_write_file+0xe4>
    5a56:	7d 15       	cp	r23, r13
    5a58:	08 f4       	brcc	.+2      	; 0x5a5c <fat_write_file+0xb2>
    5a5a:	58 c3       	rjmp	.+1712   	; 0x610c <fat_write_file+0x762>
    5a5c:	d7 16       	cp	r13, r23
    5a5e:	b9 f4       	brne	.+46     	; 0x5a8e <fat_write_file+0xe4>
    5a60:	6c 15       	cp	r22, r12
    5a62:	08 f4       	brcc	.+2      	; 0x5a66 <fat_write_file+0xbc>
    5a64:	53 c3       	rjmp	.+1702   	; 0x610c <fat_write_file+0x762>
    5a66:	c6 16       	cp	r12, r22
    5a68:	91 f4       	brne	.+36     	; 0x5a8e <fat_write_file+0xe4>
    5a6a:	5b 15       	cp	r21, r11
    5a6c:	08 f4       	brcc	.+2      	; 0x5a70 <fat_write_file+0xc6>
    5a6e:	4e c3       	rjmp	.+1692   	; 0x610c <fat_write_file+0x762>
    5a70:	b5 16       	cp	r11, r21
    5a72:	69 f4       	brne	.+26     	; 0x5a8e <fat_write_file+0xe4>
    5a74:	4a 15       	cp	r20, r10
    5a76:	08 f4       	brcc	.+2      	; 0x5a7a <fat_write_file+0xd0>
    5a78:	49 c3       	rjmp	.+1682   	; 0x610c <fat_write_file+0x762>
    5a7a:	a4 16       	cp	r10, r20
    5a7c:	41 f4       	brne	.+16     	; 0x5a8e <fat_write_file+0xe4>
    5a7e:	39 15       	cp	r19, r9
    5a80:	08 f4       	brcc	.+2      	; 0x5a84 <fat_write_file+0xda>
    5a82:	44 c3       	rjmp	.+1672   	; 0x610c <fat_write_file+0x762>
    5a84:	93 16       	cp	r9, r19
    5a86:	19 f4       	brne	.+6      	; 0x5a8e <fat_write_file+0xe4>
    5a88:	28 15       	cp	r18, r8
    5a8a:	08 f4       	brcc	.+2      	; 0x5a8e <fat_write_file+0xe4>
    5a8c:	3f c3       	rjmp	.+1662   	; 0x610c <fat_write_file+0x762>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    5a8e:	ad 89       	ldd	r26, Y+21	; 0x15
    5a90:	be 89       	ldd	r27, Y+22	; 0x16
    5a92:	2d 91       	ld	r18, X+
    5a94:	3c 91       	ld	r19, X
    5a96:	11 97       	sbiw	r26, 0x01	; 1
    5a98:	f9 01       	movw	r30, r18
    5a9a:	00 8c       	ldd	r0, Z+24	; 0x18
    5a9c:	f1 8d       	ldd	r31, Z+25	; 0x19
    5a9e:	e0 2d       	mov	r30, r0
    5aa0:	fc 87       	std	Y+12, r31	; 0x0c
    5aa2:	eb 87       	std	Y+11, r30	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    5aa4:	db 96       	adiw	r26, 0x3b	; 59
    5aa6:	8d 91       	ld	r24, X+
    5aa8:	9d 91       	ld	r25, X+
    5aaa:	0d 90       	ld	r0, X+
    5aac:	bc 91       	ld	r27, X
    5aae:	a0 2d       	mov	r26, r0
    5ab0:	8f 83       	std	Y+7, r24	; 0x07
    5ab2:	98 87       	std	Y+8, r25	; 0x08
    5ab4:	a9 87       	std	Y+9, r26	; 0x09
    5ab6:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    5ab8:	00 97       	sbiw	r24, 0x00	; 0
    5aba:	a1 05       	cpc	r26, r1
    5abc:	b1 05       	cpc	r27, r1
    5abe:	09 f0       	breq	.+2      	; 0x5ac2 <fat_write_file+0x118>
    5ac0:	ae c0       	rjmp	.+348    	; 0x5c1e <fat_write_file+0x274>
    {
        cluster_num = fd->dir_entry.cluster;
    5ac2:	ad 89       	ldd	r26, Y+21	; 0x15
    5ac4:	be 89       	ldd	r27, Y+22	; 0x16
    5ac6:	93 96       	adiw	r26, 0x23	; 35
    5ac8:	8d 91       	ld	r24, X+
    5aca:	9d 91       	ld	r25, X+
    5acc:	0d 90       	ld	r0, X+
    5ace:	bc 91       	ld	r27, X
    5ad0:	a0 2d       	mov	r26, r0
    5ad2:	8f 83       	std	Y+7, r24	; 0x07
    5ad4:	98 87       	std	Y+8, r25	; 0x08
    5ad6:	a9 87       	std	Y+9, r26	; 0x09
    5ad8:	ba 87       	std	Y+10, r27	; 0x0a
        
        if(!cluster_num)
    5ada:	00 97       	sbiw	r24, 0x00	; 0
    5adc:	a1 05       	cpc	r26, r1
    5ade:	b1 05       	cpc	r27, r1
    5ae0:	29 f5       	brne	.+74     	; 0x5b2c <fat_write_file+0x182>
        {
            if(!fd->pos)
    5ae2:	88 2d       	mov	r24, r8
    5ae4:	89 29       	or	r24, r9
    5ae6:	8a 29       	or	r24, r10
    5ae8:	8b 29       	or	r24, r11
    5aea:	8c 29       	or	r24, r12
    5aec:	8d 29       	or	r24, r13
    5aee:	8e 29       	or	r24, r14
    5af0:	8f 29       	or	r24, r15
    5af2:	09 f0       	breq	.+2      	; 0x5af6 <fat_write_file+0x14c>
    5af4:	0b c3       	rjmp	.+1558   	; 0x610c <fat_write_file+0x762>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    5af6:	c9 01       	movw	r24, r18
    5af8:	40 e0       	ldi	r20, 0x00	; 0
    5afa:	50 e0       	ldi	r21, 0x00	; 0
    5afc:	60 e0       	ldi	r22, 0x00	; 0
    5afe:	70 e0       	ldi	r23, 0x00	; 0
    5b00:	01 e0       	ldi	r16, 0x01	; 1
    5b02:	10 e0       	ldi	r17, 0x00	; 0
    5b04:	20 e0       	ldi	r18, 0x00	; 0
    5b06:	30 e0       	ldi	r19, 0x00	; 0
    5b08:	0e 94 bb 11 	call	0x2376	; 0x2376 <fat_append_clusters>
    5b0c:	6f 83       	std	Y+7, r22	; 0x07
    5b0e:	78 87       	std	Y+8, r23	; 0x08
    5b10:	89 87       	std	Y+9, r24	; 0x09
    5b12:	9a 87       	std	Y+10, r25	; 0x0a
    5b14:	ed 89       	ldd	r30, Y+21	; 0x15
    5b16:	fe 89       	ldd	r31, Y+22	; 0x16
    5b18:	63 a3       	std	Z+35, r22	; 0x23
    5b1a:	74 a3       	std	Z+36, r23	; 0x24
    5b1c:	85 a3       	std	Z+37, r24	; 0x25
    5b1e:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    5b20:	61 15       	cp	r22, r1
    5b22:	71 05       	cpc	r23, r1
    5b24:	81 05       	cpc	r24, r1
    5b26:	91 05       	cpc	r25, r1
    5b28:	09 f4       	brne	.+2      	; 0x5b2c <fat_write_file+0x182>
    5b2a:	f0 c2       	rjmp	.+1504   	; 0x610c <fat_write_file+0x762>
            {
                return -1;
            }
        }

        if(fd->pos)
    5b2c:	ad 89       	ldd	r26, Y+21	; 0x15
    5b2e:	be 89       	ldd	r27, Y+22	; 0x16
    5b30:	d3 96       	adiw	r26, 0x33	; 51
    5b32:	6c 91       	ld	r22, X
    5b34:	d3 97       	sbiw	r26, 0x33	; 51
    5b36:	d4 96       	adiw	r26, 0x34	; 52
    5b38:	7c 91       	ld	r23, X
    5b3a:	d4 97       	sbiw	r26, 0x34	; 52
    5b3c:	d5 96       	adiw	r26, 0x35	; 53
    5b3e:	ec 91       	ld	r30, X
    5b40:	d5 97       	sbiw	r26, 0x35	; 53
    5b42:	d6 96       	adiw	r26, 0x36	; 54
    5b44:	fc 91       	ld	r31, X
    5b46:	d6 97       	sbiw	r26, 0x36	; 54
    5b48:	d7 96       	adiw	r26, 0x37	; 55
    5b4a:	9c 91       	ld	r25, X
    5b4c:	d7 97       	sbiw	r26, 0x37	; 55
    5b4e:	d8 96       	adiw	r26, 0x38	; 56
    5b50:	2c 91       	ld	r18, X
    5b52:	d8 97       	sbiw	r26, 0x38	; 56
    5b54:	d9 96       	adiw	r26, 0x39	; 57
    5b56:	3c 91       	ld	r19, X
    5b58:	d9 97       	sbiw	r26, 0x39	; 57
    5b5a:	da 96       	adiw	r26, 0x3a	; 58
    5b5c:	4c 91       	ld	r20, X
    5b5e:	86 2f       	mov	r24, r22
    5b60:	87 2b       	or	r24, r23
    5b62:	8e 2b       	or	r24, r30
    5b64:	8f 2b       	or	r24, r31
    5b66:	89 2b       	or	r24, r25
    5b68:	82 2b       	or	r24, r18
    5b6a:	83 2b       	or	r24, r19
    5b6c:	84 2b       	or	r24, r20
    5b6e:	09 f4       	brne	.+2      	; 0x5b72 <fat_write_file+0x1c8>
    5b70:	56 c0       	rjmp	.+172    	; 0x5c1e <fat_write_file+0x274>
        {
            uint32_t pos = fd->pos;
    5b72:	9b 01       	movw	r18, r22
    5b74:	af 01       	movw	r20, r30
    5b76:	c9 01       	movw	r24, r18
    5b78:	da 01       	movw	r26, r20
    5b7a:	2c 01       	movw	r4, r24
    5b7c:	3d 01       	movw	r6, r26
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    5b7e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5b80:	5c 85       	ldd	r21, Y+12	; 0x0c
    5b82:	9a 01       	movw	r18, r20
    5b84:	40 e0       	ldi	r20, 0x00	; 0
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	29 8b       	std	Y+17, r18	; 0x11
    5b8a:	3a 8b       	std	Y+18, r19	; 0x12
    5b8c:	4b 8b       	std	Y+19, r20	; 0x13
    5b8e:	5c 8b       	std	Y+20, r21	; 0x14
    5b90:	3c c0       	rjmp	.+120    	; 0x5c0a <fat_write_file+0x260>
            {
                pos -= cluster_size;
    5b92:	89 89       	ldd	r24, Y+17	; 0x11
    5b94:	9a 89       	ldd	r25, Y+18	; 0x12
    5b96:	ab 89       	ldd	r26, Y+19	; 0x13
    5b98:	bc 89       	ldd	r27, Y+20	; 0x14
    5b9a:	48 1a       	sub	r4, r24
    5b9c:	59 0a       	sbc	r5, r25
    5b9e:	6a 0a       	sbc	r6, r26
    5ba0:	7b 0a       	sbc	r7, r27
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    5ba2:	ad 89       	ldd	r26, Y+21	; 0x15
    5ba4:	be 89       	ldd	r27, Y+22	; 0x16
    5ba6:	8d 91       	ld	r24, X+
    5ba8:	9c 91       	ld	r25, X
    5baa:	4f 81       	ldd	r20, Y+7	; 0x07
    5bac:	58 85       	ldd	r21, Y+8	; 0x08
    5bae:	69 85       	ldd	r22, Y+9	; 0x09
    5bb0:	7a 85       	ldd	r23, Y+10	; 0x0a
    5bb2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    5bb6:	61 15       	cp	r22, r1
    5bb8:	71 05       	cpc	r23, r1
    5bba:	81 05       	cpc	r24, r1
    5bbc:	91 05       	cpc	r25, r1
    5bbe:	29 f0       	breq	.+10     	; 0x5bca <fat_write_file+0x220>
    5bc0:	6f 83       	std	Y+7, r22	; 0x07
    5bc2:	78 87       	std	Y+8, r23	; 0x08
    5bc4:	89 87       	std	Y+9, r24	; 0x09
    5bc6:	9a 87       	std	Y+10, r25	; 0x0a
    5bc8:	20 c0       	rjmp	.+64     	; 0x5c0a <fat_write_file+0x260>
    5bca:	41 14       	cp	r4, r1
    5bcc:	51 04       	cpc	r5, r1
    5bce:	61 04       	cpc	r6, r1
    5bd0:	71 04       	cpc	r7, r1
    5bd2:	09 f0       	breq	.+2      	; 0x5bd6 <fat_write_file+0x22c>
    5bd4:	9b c2       	rjmp	.+1334   	; 0x610c <fat_write_file+0x762>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    5bd6:	ed 89       	ldd	r30, Y+21	; 0x15
    5bd8:	fe 89       	ldd	r31, Y+22	; 0x16
    5bda:	80 81       	ld	r24, Z
    5bdc:	91 81       	ldd	r25, Z+1	; 0x01
    5bde:	4f 81       	ldd	r20, Y+7	; 0x07
    5be0:	58 85       	ldd	r21, Y+8	; 0x08
    5be2:	69 85       	ldd	r22, Y+9	; 0x09
    5be4:	7a 85       	ldd	r23, Y+10	; 0x0a
    5be6:	01 e0       	ldi	r16, 0x01	; 1
    5be8:	10 e0       	ldi	r17, 0x00	; 0
    5bea:	20 e0       	ldi	r18, 0x00	; 0
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	0e 94 bb 11 	call	0x2376	; 0x2376 <fat_append_clusters>
    5bf2:	ab 01       	movw	r20, r22
    5bf4:	bc 01       	movw	r22, r24
                if(!cluster_num_next)
    5bf6:	41 15       	cp	r20, r1
    5bf8:	51 05       	cpc	r21, r1
    5bfa:	61 05       	cpc	r22, r1
    5bfc:	71 05       	cpc	r23, r1
    5bfe:	09 f4       	brne	.+2      	; 0x5c02 <fat_write_file+0x258>
    5c00:	85 c2       	rjmp	.+1290   	; 0x610c <fat_write_file+0x762>
    5c02:	4f 83       	std	Y+7, r20	; 0x07
    5c04:	58 87       	std	Y+8, r21	; 0x08
    5c06:	69 87       	std	Y+9, r22	; 0x09
    5c08:	7a 87       	std	Y+10, r23	; 0x0a

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    5c0a:	29 89       	ldd	r18, Y+17	; 0x11
    5c0c:	3a 89       	ldd	r19, Y+18	; 0x12
    5c0e:	4b 89       	ldd	r20, Y+19	; 0x13
    5c10:	5c 89       	ldd	r21, Y+20	; 0x14
    5c12:	42 16       	cp	r4, r18
    5c14:	53 06       	cpc	r5, r19
    5c16:	64 06       	cpc	r6, r20
    5c18:	75 06       	cpc	r7, r21
    5c1a:	08 f0       	brcs	.+2      	; 0x5c1e <fat_write_file+0x274>
    5c1c:	ba cf       	rjmp	.-140    	; 0x5b92 <fat_write_file+0x1e8>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    5c1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5c20:	5c 85       	ldd	r21, Y+12	; 0x0c
    5c22:	41 50       	subi	r20, 0x01	; 1
    5c24:	50 40       	sbci	r21, 0x00	; 0
    5c26:	5c 87       	std	Y+12, r21	; 0x0c
    5c28:	4b 87       	std	Y+11, r20	; 0x0b
    5c2a:	48 21       	and	r20, r8
    5c2c:	59 21       	and	r21, r9
    5c2e:	5c 83       	std	Y+4, r21	; 0x04
    5c30:	4b 83       	std	Y+3, r20	; 0x03
    5c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    5c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    5c36:	01 96       	adiw	r24, 0x01	; 1
    5c38:	9c 87       	std	Y+12, r25	; 0x0c
    5c3a:	8b 87       	std	Y+11, r24	; 0x0b
    5c3c:	af 85       	ldd	r26, Y+15	; 0x0f
    5c3e:	b8 89       	ldd	r27, Y+16	; 0x10
    5c40:	be 83       	std	Y+6, r27	; 0x06
    5c42:	ad 83       	std	Y+5, r26	; 0x05
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    5c44:	ed 89       	ldd	r30, Y+21	; 0x15
    5c46:	fe 89       	ldd	r31, Y+22	; 0x16
    5c48:	01 90       	ld	r0, Z+
    5c4a:	f0 81       	ld	r31, Z
    5c4c:	e0 2d       	mov	r30, r0
    5c4e:	fa 83       	std	Y+2, r31	; 0x02
    5c50:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    5c52:	30 97       	sbiw	r30, 0x00	; 0
    5c54:	09 f4       	brne	.+2      	; 0x5c58 <fat_write_file+0x2ae>
    5c56:	8e c0       	rjmp	.+284    	; 0x5d74 <fat_write_file+0x3ca>
    5c58:	2f 81       	ldd	r18, Y+7	; 0x07
    5c5a:	38 85       	ldd	r19, Y+8	; 0x08
    5c5c:	49 85       	ldd	r20, Y+9	; 0x09
    5c5e:	5a 85       	ldd	r21, Y+10	; 0x0a
    5c60:	22 30       	cpi	r18, 0x02	; 2
    5c62:	31 05       	cpc	r19, r1
    5c64:	41 05       	cpc	r20, r1
    5c66:	51 05       	cpc	r21, r1
    5c68:	08 f4       	brcc	.+2      	; 0x5c6c <fat_write_file+0x2c2>
    5c6a:	84 c0       	rjmp	.+264    	; 0x5d74 <fat_write_file+0x3ca>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    5c6c:	22 50       	subi	r18, 0x02	; 2
    5c6e:	30 40       	sbci	r19, 0x00	; 0
    5c70:	40 40       	sbci	r20, 0x00	; 0
    5c72:	50 40       	sbci	r21, 0x00	; 0
    5c74:	59 01       	movw	r10, r18
    5c76:	6a 01       	movw	r12, r20
    5c78:	2e 5f       	subi	r18, 0xFE	; 254
    5c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c7c:	4f 4f       	sbci	r20, 0xFF	; 255
    5c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    5c80:	2f 83       	std	Y+7, r18	; 0x07
    5c82:	38 87       	std	Y+8, r19	; 0x08
    5c84:	49 87       	std	Y+9, r20	; 0x09
    5c86:	5a 87       	std	Y+10, r21	; 0x0a
    5c88:	20 8c       	ldd	r2, Z+24	; 0x18
    5c8a:	31 8c       	ldd	r3, Z+25	; 0x19
    5c8c:	95 01       	movw	r18, r10
    5c8e:	a6 01       	movw	r20, r12
    5c90:	60 e0       	ldi	r22, 0x00	; 0
    5c92:	70 e0       	ldi	r23, 0x00	; 0
    5c94:	80 e0       	ldi	r24, 0x00	; 0
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	51 01       	movw	r10, r2
    5c9a:	cc 24       	eor	r12, r12
    5c9c:	dd 24       	eor	r13, r13
    5c9e:	ee 24       	eor	r14, r14
    5ca0:	ff 24       	eor	r15, r15
    5ca2:	00 e0       	ldi	r16, 0x00	; 0
    5ca4:	10 e0       	ldi	r17, 0x00	; 0
    5ca6:	0e 94 9c 32 	call	0x6538	; 0x6538 <__muldi3>
    5caa:	e9 81       	ldd	r30, Y+1	; 0x01
    5cac:	fa 81       	ldd	r31, Y+2	; 0x02
    5cae:	b2 8d       	ldd	r27, Z+26	; 0x1a
    5cb0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    5cb2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5cb4:	05 8d       	ldd	r16, Z+29	; 0x1d
    5cb6:	d6 8c       	ldd	r13, Z+30	; 0x1e
    5cb8:	c7 8c       	ldd	r12, Z+31	; 0x1f
    5cba:	b0 a0       	ldd	r11, Z+32	; 0x20
    5cbc:	11 a1       	ldd	r17, Z+33	; 0x21
    5cbe:	b2 0f       	add	r27, r18
    5cc0:	f1 e0       	ldi	r31, 0x01	; 1
    5cc2:	b2 17       	cp	r27, r18
    5cc4:	08 f0       	brcs	.+2      	; 0x5cc8 <fat_write_file+0x31e>
    5cc6:	f0 e0       	ldi	r31, 0x00	; 0
    5cc8:	23 2f       	mov	r18, r19
    5cca:	2f 0d       	add	r18, r15
    5ccc:	e1 e0       	ldi	r30, 0x01	; 1
    5cce:	23 17       	cp	r18, r19
    5cd0:	08 f0       	brcs	.+2      	; 0x5cd4 <fat_write_file+0x32a>
    5cd2:	e0 e0       	ldi	r30, 0x00	; 0
    5cd4:	ef 2e       	mov	r14, r31
    5cd6:	e2 0e       	add	r14, r18
    5cd8:	31 e0       	ldi	r19, 0x01	; 1
    5cda:	e2 16       	cp	r14, r18
    5cdc:	08 f0       	brcs	.+2      	; 0x5ce0 <fat_write_file+0x336>
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	e3 2b       	or	r30, r19
    5ce2:	24 2f       	mov	r18, r20
    5ce4:	2a 0f       	add	r18, r26
    5ce6:	f1 e0       	ldi	r31, 0x01	; 1
    5ce8:	24 17       	cp	r18, r20
    5cea:	08 f0       	brcs	.+2      	; 0x5cee <fat_write_file+0x344>
    5cec:	f0 e0       	ldi	r31, 0x00	; 0
    5cee:	fe 2e       	mov	r15, r30
    5cf0:	f2 0e       	add	r15, r18
    5cf2:	31 e0       	ldi	r19, 0x01	; 1
    5cf4:	f2 16       	cp	r15, r18
    5cf6:	08 f0       	brcs	.+2      	; 0x5cfa <fat_write_file+0x350>
    5cf8:	30 e0       	ldi	r19, 0x00	; 0
    5cfa:	f3 2b       	or	r31, r19
    5cfc:	25 2f       	mov	r18, r21
    5cfe:	20 0f       	add	r18, r16
    5d00:	41 e0       	ldi	r20, 0x01	; 1
    5d02:	25 17       	cp	r18, r21
    5d04:	08 f0       	brcs	.+2      	; 0x5d08 <fat_write_file+0x35e>
    5d06:	40 e0       	ldi	r20, 0x00	; 0
    5d08:	f2 0f       	add	r31, r18
    5d0a:	31 e0       	ldi	r19, 0x01	; 1
    5d0c:	f2 17       	cp	r31, r18
    5d0e:	08 f0       	brcs	.+2      	; 0x5d12 <fat_write_file+0x368>
    5d10:	30 e0       	ldi	r19, 0x00	; 0
    5d12:	43 2b       	or	r20, r19
    5d14:	26 2f       	mov	r18, r22
    5d16:	2d 0d       	add	r18, r13
    5d18:	51 e0       	ldi	r21, 0x01	; 1
    5d1a:	26 17       	cp	r18, r22
    5d1c:	08 f0       	brcs	.+2      	; 0x5d20 <fat_write_file+0x376>
    5d1e:	50 e0       	ldi	r21, 0x00	; 0
    5d20:	e4 2f       	mov	r30, r20
    5d22:	e2 0f       	add	r30, r18
    5d24:	31 e0       	ldi	r19, 0x01	; 1
    5d26:	e2 17       	cp	r30, r18
    5d28:	08 f0       	brcs	.+2      	; 0x5d2c <fat_write_file+0x382>
    5d2a:	30 e0       	ldi	r19, 0x00	; 0
    5d2c:	53 2b       	or	r21, r19
    5d2e:	27 2f       	mov	r18, r23
    5d30:	2c 0d       	add	r18, r12
    5d32:	41 e0       	ldi	r20, 0x01	; 1
    5d34:	27 17       	cp	r18, r23
    5d36:	08 f0       	brcs	.+2      	; 0x5d3a <fat_write_file+0x390>
    5d38:	40 e0       	ldi	r20, 0x00	; 0
    5d3a:	52 0f       	add	r21, r18
    5d3c:	31 e0       	ldi	r19, 0x01	; 1
    5d3e:	52 17       	cp	r21, r18
    5d40:	08 f0       	brcs	.+2      	; 0x5d44 <fat_write_file+0x39a>
    5d42:	30 e0       	ldi	r19, 0x00	; 0
    5d44:	43 2b       	or	r20, r19
    5d46:	28 2f       	mov	r18, r24
    5d48:	2b 0d       	add	r18, r11
    5d4a:	31 e0       	ldi	r19, 0x01	; 1
    5d4c:	28 17       	cp	r18, r24
    5d4e:	08 f0       	brcs	.+2      	; 0x5d52 <fat_write_file+0x3a8>
    5d50:	30 e0       	ldi	r19, 0x00	; 0
    5d52:	42 0f       	add	r20, r18
    5d54:	81 e0       	ldi	r24, 0x01	; 1
    5d56:	42 17       	cp	r20, r18
    5d58:	08 f0       	brcs	.+2      	; 0x5d5c <fat_write_file+0x3b2>
    5d5a:	80 e0       	ldi	r24, 0x00	; 0
    5d5c:	a3 2f       	mov	r26, r19
    5d5e:	a8 2b       	or	r26, r24
    5d60:	19 0f       	add	r17, r25
    5d62:	2b 2f       	mov	r18, r27
    5d64:	9e 2d       	mov	r25, r14
    5d66:	6f 2d       	mov	r22, r15
    5d68:	7f 2f       	mov	r23, r31
    5d6a:	4e 2e       	mov	r4, r30
    5d6c:	25 2e       	mov	r2, r21
    5d6e:	b4 2f       	mov	r27, r20
    5d70:	a1 0f       	add	r26, r17
    5d72:	08 c0       	rjmp	.+16     	; 0x5d84 <fat_write_file+0x3da>
    5d74:	20 e0       	ldi	r18, 0x00	; 0
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	60 e0       	ldi	r22, 0x00	; 0
    5d7a:	70 e0       	ldi	r23, 0x00	; 0
    5d7c:	44 24       	eor	r4, r4
    5d7e:	22 24       	eor	r2, r2
    5d80:	b0 e0       	ldi	r27, 0x00	; 0
    5d82:	a0 e0       	ldi	r26, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    5d84:	8b 84       	ldd	r8, Y+11	; 0x0b
    5d86:	9c 84       	ldd	r9, Y+12	; 0x0c
    5d88:	4b 81       	ldd	r20, Y+3	; 0x03
    5d8a:	5c 81       	ldd	r21, Y+4	; 0x04
    5d8c:	84 1a       	sub	r8, r20
    5d8e:	95 0a       	sbc	r9, r21
    5d90:	ed 81       	ldd	r30, Y+5	; 0x05
    5d92:	fe 81       	ldd	r31, Y+6	; 0x06
    5d94:	e8 15       	cp	r30, r8
    5d96:	f9 05       	cpc	r31, r9
    5d98:	08 f4       	brcc	.+2      	; 0x5d9c <fat_write_file+0x3f2>
    5d9a:	4f 01       	movw	r8, r30
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    5d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    5d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    5da0:	60 80       	ld	r6, Z
    5da2:	71 80       	ldd	r7, Z+1	; 0x01
    5da4:	4b 81       	ldd	r20, Y+3	; 0x03
    5da6:	5c 81       	ldd	r21, Y+4	; 0x04
    5da8:	5a 01       	movw	r10, r20
    5daa:	cc 24       	eor	r12, r12
    5dac:	dd 24       	eor	r13, r13
    5dae:	ee 24       	eor	r14, r14
    5db0:	ff 24       	eor	r15, r15
    5db2:	87 01       	movw	r16, r14
    5db4:	52 2e       	mov	r5, r18
    5db6:	54 0e       	add	r5, r20
    5db8:	31 e0       	ldi	r19, 0x01	; 1
    5dba:	52 16       	cp	r5, r18
    5dbc:	08 f0       	brcs	.+2      	; 0x5dc0 <fat_write_file+0x416>
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	89 2f       	mov	r24, r25
    5dc2:	8b 0d       	add	r24, r11
    5dc4:	41 e0       	ldi	r20, 0x01	; 1
    5dc6:	89 17       	cp	r24, r25
    5dc8:	08 f0       	brcs	.+2      	; 0x5dcc <fat_write_file+0x422>
    5dca:	40 e0       	ldi	r20, 0x00	; 0
    5dcc:	38 0f       	add	r19, r24
    5dce:	91 e0       	ldi	r25, 0x01	; 1
    5dd0:	38 17       	cp	r19, r24
    5dd2:	08 f0       	brcs	.+2      	; 0x5dd6 <fat_write_file+0x42c>
    5dd4:	90 e0       	ldi	r25, 0x00	; 0
    5dd6:	49 2b       	or	r20, r25
    5dd8:	86 2f       	mov	r24, r22
    5dda:	8c 0d       	add	r24, r12
    5ddc:	51 e0       	ldi	r21, 0x01	; 1
    5dde:	86 17       	cp	r24, r22
    5de0:	08 f0       	brcs	.+2      	; 0x5de4 <fat_write_file+0x43a>
    5de2:	50 e0       	ldi	r21, 0x00	; 0
    5de4:	48 0f       	add	r20, r24
    5de6:	91 e0       	ldi	r25, 0x01	; 1
    5de8:	48 17       	cp	r20, r24
    5dea:	08 f0       	brcs	.+2      	; 0x5dee <fat_write_file+0x444>
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	59 2b       	or	r21, r25
    5df0:	87 2f       	mov	r24, r23
    5df2:	8d 0d       	add	r24, r13
    5df4:	61 e0       	ldi	r22, 0x01	; 1
    5df6:	87 17       	cp	r24, r23
    5df8:	08 f0       	brcs	.+2      	; 0x5dfc <fat_write_file+0x452>
    5dfa:	60 e0       	ldi	r22, 0x00	; 0
    5dfc:	58 0f       	add	r21, r24
    5dfe:	91 e0       	ldi	r25, 0x01	; 1
    5e00:	58 17       	cp	r21, r24
    5e02:	08 f0       	brcs	.+2      	; 0x5e06 <fat_write_file+0x45c>
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	69 2b       	or	r22, r25
    5e08:	84 2d       	mov	r24, r4
    5e0a:	8e 0d       	add	r24, r14
    5e0c:	71 e0       	ldi	r23, 0x01	; 1
    5e0e:	84 15       	cp	r24, r4
    5e10:	08 f0       	brcs	.+2      	; 0x5e14 <fat_write_file+0x46a>
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	68 0f       	add	r22, r24
    5e16:	91 e0       	ldi	r25, 0x01	; 1
    5e18:	68 17       	cp	r22, r24
    5e1a:	08 f0       	brcs	.+2      	; 0x5e1e <fat_write_file+0x474>
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
    5e1e:	79 2b       	or	r23, r25
    5e20:	92 2d       	mov	r25, r2
    5e22:	9f 0d       	add	r25, r15
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	92 15       	cp	r25, r2
    5e28:	08 f0       	brcs	.+2      	; 0x5e2c <fat_write_file+0x482>
    5e2a:	80 e0       	ldi	r24, 0x00	; 0
    5e2c:	79 0f       	add	r23, r25
    5e2e:	e1 e0       	ldi	r30, 0x01	; 1
    5e30:	79 17       	cp	r23, r25
    5e32:	08 f0       	brcs	.+2      	; 0x5e36 <fat_write_file+0x48c>
    5e34:	e0 e0       	ldi	r30, 0x00	; 0
    5e36:	8e 2b       	or	r24, r30
    5e38:	eb 2f       	mov	r30, r27
    5e3a:	e0 0f       	add	r30, r16
    5e3c:	91 e0       	ldi	r25, 0x01	; 1
    5e3e:	eb 17       	cp	r30, r27
    5e40:	08 f0       	brcs	.+2      	; 0x5e44 <fat_write_file+0x49a>
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	8e 0f       	add	r24, r30
    5e46:	f1 e0       	ldi	r31, 0x01	; 1
    5e48:	8e 17       	cp	r24, r30
    5e4a:	08 f0       	brcs	.+2      	; 0x5e4e <fat_write_file+0x4a4>
    5e4c:	f0 e0       	ldi	r31, 0x00	; 0
    5e4e:	9f 2b       	or	r25, r31
    5e50:	a1 0f       	add	r26, r17
    5e52:	f3 01       	movw	r30, r6
    5e54:	c4 80       	ldd	r12, Z+4	; 0x04
    5e56:	d5 80       	ldd	r13, Z+5	; 0x05
    5e58:	25 2d       	mov	r18, r5
    5e5a:	9a 0f       	add	r25, r26
    5e5c:	0d 85       	ldd	r16, Y+13	; 0x0d
    5e5e:	1e 85       	ldd	r17, Y+14	; 0x0e
    5e60:	74 01       	movw	r14, r8
    5e62:	f6 01       	movw	r30, r12
    5e64:	09 95       	icall
    5e66:	88 23       	and	r24, r24
    5e68:	09 f4       	brne	.+2      	; 0x5e6c <fat_write_file+0x4c2>
    5e6a:	e5 c0       	rjmp	.+458    	; 0x6036 <fat_write_file+0x68c>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    5e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    5e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    5e70:	28 19       	sub	r18, r8
    5e72:	39 09       	sbc	r19, r9
    5e74:	3e 83       	std	Y+6, r19	; 0x06
    5e76:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += write_length;
    5e78:	94 01       	movw	r18, r8
    5e7a:	40 e0       	ldi	r20, 0x00	; 0
    5e7c:	50 e0       	ldi	r21, 0x00	; 0
    5e7e:	60 e0       	ldi	r22, 0x00	; 0
    5e80:	70 e0       	ldi	r23, 0x00	; 0
    5e82:	80 e0       	ldi	r24, 0x00	; 0
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	ad 89       	ldd	r26, Y+21	; 0x15
    5e88:	be 89       	ldd	r27, Y+22	; 0x16
    5e8a:	d3 96       	adiw	r26, 0x33	; 51
    5e8c:	1c 91       	ld	r17, X
    5e8e:	d3 97       	sbiw	r26, 0x33	; 51
    5e90:	d4 96       	adiw	r26, 0x34	; 52
    5e92:	dc 90       	ld	r13, X
    5e94:	d4 97       	sbiw	r26, 0x34	; 52
    5e96:	d5 96       	adiw	r26, 0x35	; 53
    5e98:	bc 91       	ld	r27, X
    5e9a:	ed 89       	ldd	r30, Y+21	; 0x15
    5e9c:	fe 89       	ldd	r31, Y+22	; 0x16
    5e9e:	06 a9       	ldd	r16, Z+54	; 0x36
    5ea0:	e7 a8       	ldd	r14, Z+55	; 0x37
    5ea2:	a0 ac       	ldd	r10, Z+56	; 0x38
    5ea4:	71 ac       	ldd	r7, Z+57	; 0x39
    5ea6:	f2 ac       	ldd	r15, Z+58	; 0x3a
    5ea8:	18 0d       	add	r17, r8
    5eaa:	f1 e0       	ldi	r31, 0x01	; 1
    5eac:	18 15       	cp	r17, r8
    5eae:	08 f0       	brcs	.+2      	; 0x5eb2 <fat_write_file+0x508>
    5eb0:	f0 e0       	ldi	r31, 0x00	; 0
    5eb2:	ed 2d       	mov	r30, r13
    5eb4:	e3 0f       	add	r30, r19
    5eb6:	a1 e0       	ldi	r26, 0x01	; 1
    5eb8:	e3 17       	cp	r30, r19
    5eba:	08 f0       	brcs	.+2      	; 0x5ebe <fat_write_file+0x514>
    5ebc:	a0 e0       	ldi	r26, 0x00	; 0
    5ebe:	bf 2e       	mov	r11, r31
    5ec0:	be 0e       	add	r11, r30
    5ec2:	f1 e0       	ldi	r31, 0x01	; 1
    5ec4:	be 16       	cp	r11, r30
    5ec6:	08 f0       	brcs	.+2      	; 0x5eca <fat_write_file+0x520>
    5ec8:	f0 e0       	ldi	r31, 0x00	; 0
    5eca:	af 2b       	or	r26, r31
    5ecc:	e4 2f       	mov	r30, r20
    5ece:	eb 0f       	add	r30, r27
    5ed0:	b1 e0       	ldi	r27, 0x01	; 1
    5ed2:	e4 17       	cp	r30, r20
    5ed4:	08 f0       	brcs	.+2      	; 0x5ed8 <fat_write_file+0x52e>
    5ed6:	b0 e0       	ldi	r27, 0x00	; 0
    5ed8:	ca 2e       	mov	r12, r26
    5eda:	ce 0e       	add	r12, r30
    5edc:	f1 e0       	ldi	r31, 0x01	; 1
    5ede:	ce 16       	cp	r12, r30
    5ee0:	08 f0       	brcs	.+2      	; 0x5ee4 <fat_write_file+0x53a>
    5ee2:	f0 e0       	ldi	r31, 0x00	; 0
    5ee4:	bf 2b       	or	r27, r31
    5ee6:	e5 2f       	mov	r30, r21
    5ee8:	e0 0f       	add	r30, r16
    5eea:	a1 e0       	ldi	r26, 0x01	; 1
    5eec:	e5 17       	cp	r30, r21
    5eee:	08 f0       	brcs	.+2      	; 0x5ef2 <fat_write_file+0x548>
    5ef0:	a0 e0       	ldi	r26, 0x00	; 0
    5ef2:	db 2e       	mov	r13, r27
    5ef4:	de 0e       	add	r13, r30
    5ef6:	f1 e0       	ldi	r31, 0x01	; 1
    5ef8:	de 16       	cp	r13, r30
    5efa:	08 f0       	brcs	.+2      	; 0x5efe <fat_write_file+0x554>
    5efc:	f0 e0       	ldi	r31, 0x00	; 0
    5efe:	af 2b       	or	r26, r31
    5f00:	e6 2f       	mov	r30, r22
    5f02:	ee 0d       	add	r30, r14
    5f04:	b1 e0       	ldi	r27, 0x01	; 1
    5f06:	e6 17       	cp	r30, r22
    5f08:	08 f0       	brcs	.+2      	; 0x5f0c <fat_write_file+0x562>
    5f0a:	b0 e0       	ldi	r27, 0x00	; 0
    5f0c:	ea 2e       	mov	r14, r26
    5f0e:	ee 0e       	add	r14, r30
    5f10:	f1 e0       	ldi	r31, 0x01	; 1
    5f12:	ee 16       	cp	r14, r30
    5f14:	08 f0       	brcs	.+2      	; 0x5f18 <fat_write_file+0x56e>
    5f16:	f0 e0       	ldi	r31, 0x00	; 0
    5f18:	bf 2b       	or	r27, r31
    5f1a:	e7 2f       	mov	r30, r23
    5f1c:	ea 0d       	add	r30, r10
    5f1e:	a1 e0       	ldi	r26, 0x01	; 1
    5f20:	e7 17       	cp	r30, r23
    5f22:	08 f0       	brcs	.+2      	; 0x5f26 <fat_write_file+0x57c>
    5f24:	a0 e0       	ldi	r26, 0x00	; 0
    5f26:	0b 2f       	mov	r16, r27
    5f28:	0e 0f       	add	r16, r30
    5f2a:	f1 e0       	ldi	r31, 0x01	; 1
    5f2c:	0e 17       	cp	r16, r30
    5f2e:	08 f0       	brcs	.+2      	; 0x5f32 <fat_write_file+0x588>
    5f30:	f0 e0       	ldi	r31, 0x00	; 0
    5f32:	af 2b       	or	r26, r31
    5f34:	e8 2f       	mov	r30, r24
    5f36:	e7 0d       	add	r30, r7
    5f38:	f1 e0       	ldi	r31, 0x01	; 1
    5f3a:	e8 17       	cp	r30, r24
    5f3c:	08 f0       	brcs	.+2      	; 0x5f40 <fat_write_file+0x596>
    5f3e:	f0 e0       	ldi	r31, 0x00	; 0
    5f40:	aa 2e       	mov	r10, r26
    5f42:	ae 0e       	add	r10, r30
    5f44:	a1 e0       	ldi	r26, 0x01	; 1
    5f46:	ae 16       	cp	r10, r30
    5f48:	08 f0       	brcs	.+2      	; 0x5f4c <fat_write_file+0x5a2>
    5f4a:	a0 e0       	ldi	r26, 0x00	; 0
    5f4c:	fa 2b       	or	r31, r26
    5f4e:	f9 0e       	add	r15, r25
    5f50:	ff 0d       	add	r31, r15
    5f52:	ad 89       	ldd	r26, Y+21	; 0x15
    5f54:	be 89       	ldd	r27, Y+22	; 0x16
    5f56:	d3 96       	adiw	r26, 0x33	; 51
    5f58:	1c 93       	st	X, r17
    5f5a:	d3 97       	sbiw	r26, 0x33	; 51
    5f5c:	d4 96       	adiw	r26, 0x34	; 52
    5f5e:	bc 92       	st	X, r11
    5f60:	d4 97       	sbiw	r26, 0x34	; 52
    5f62:	d5 96       	adiw	r26, 0x35	; 53
    5f64:	cc 92       	st	X, r12
    5f66:	d5 97       	sbiw	r26, 0x35	; 53
    5f68:	d6 96       	adiw	r26, 0x36	; 54
    5f6a:	dc 92       	st	X, r13
    5f6c:	d6 97       	sbiw	r26, 0x36	; 54
    5f6e:	d7 96       	adiw	r26, 0x37	; 55
    5f70:	ec 92       	st	X, r14
    5f72:	d7 97       	sbiw	r26, 0x37	; 55
    5f74:	d8 96       	adiw	r26, 0x38	; 56
    5f76:	0c 93       	st	X, r16
    5f78:	d8 97       	sbiw	r26, 0x38	; 56
    5f7a:	d9 96       	adiw	r26, 0x39	; 57
    5f7c:	ac 92       	st	X, r10
    5f7e:	d9 97       	sbiw	r26, 0x39	; 57
    5f80:	da 96       	adiw	r26, 0x3a	; 58
    5f82:	fc 93       	st	X, r31
    5f84:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    5f86:	8b 81       	ldd	r24, Y+3	; 0x03
    5f88:	9c 81       	ldd	r25, Y+4	; 0x04
    5f8a:	88 0d       	add	r24, r8
    5f8c:	99 1d       	adc	r25, r9
    5f8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    5f90:	fc 85       	ldd	r31, Y+12	; 0x0c
    5f92:	8e 17       	cp	r24, r30
    5f94:	9f 07       	cpc	r25, r31
    5f96:	c0 f1       	brcs	.+112    	; 0x6008 <fat_write_file+0x65e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    5f98:	8d 91       	ld	r24, X+
    5f9a:	9c 91       	ld	r25, X
    5f9c:	4f 81       	ldd	r20, Y+7	; 0x07
    5f9e:	58 85       	ldd	r21, Y+8	; 0x08
    5fa0:	69 85       	ldd	r22, Y+9	; 0x09
    5fa2:	7a 85       	ldd	r23, Y+10	; 0x0a
    5fa4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    5fa8:	61 15       	cp	r22, r1
    5faa:	71 05       	cpc	r23, r1
    5fac:	81 05       	cpc	r24, r1
    5fae:	91 05       	cpc	r25, r1
    5fb0:	29 f0       	breq	.+10     	; 0x5fbc <fat_write_file+0x612>
    5fb2:	6f 83       	std	Y+7, r22	; 0x07
    5fb4:	78 87       	std	Y+8, r23	; 0x08
    5fb6:	89 87       	std	Y+9, r24	; 0x09
    5fb8:	9a 87       	std	Y+10, r25	; 0x0a
    5fba:	24 c0       	rjmp	.+72     	; 0x6004 <fat_write_file+0x65a>
    5fbc:	2d 81       	ldd	r18, Y+5	; 0x05
    5fbe:	3e 81       	ldd	r19, Y+6	; 0x06
    5fc0:	23 2b       	or	r18, r19
    5fc2:	a9 f0       	breq	.+42     	; 0x5fee <fat_write_file+0x644>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    5fc4:	ad 89       	ldd	r26, Y+21	; 0x15
    5fc6:	be 89       	ldd	r27, Y+22	; 0x16
    5fc8:	8d 91       	ld	r24, X+
    5fca:	9c 91       	ld	r25, X
    5fcc:	4f 81       	ldd	r20, Y+7	; 0x07
    5fce:	58 85       	ldd	r21, Y+8	; 0x08
    5fd0:	69 85       	ldd	r22, Y+9	; 0x09
    5fd2:	7a 85       	ldd	r23, Y+10	; 0x0a
    5fd4:	01 e0       	ldi	r16, 0x01	; 1
    5fd6:	10 e0       	ldi	r17, 0x00	; 0
    5fd8:	20 e0       	ldi	r18, 0x00	; 0
    5fda:	30 e0       	ldi	r19, 0x00	; 0
    5fdc:	0e 94 bb 11 	call	0x2376	; 0x2376 <fat_append_clusters>
    5fe0:	ab 01       	movw	r20, r22
    5fe2:	bc 01       	movw	r22, r24
            if(!cluster_num_next)
    5fe4:	41 15       	cp	r20, r1
    5fe6:	51 05       	cpc	r21, r1
    5fe8:	61 05       	cpc	r22, r1
    5fea:	71 05       	cpc	r23, r1
    5fec:	39 f4       	brne	.+14     	; 0x5ffc <fat_write_file+0x652>
            {
                fd->pos_cluster = 0;
    5fee:	ed 89       	ldd	r30, Y+21	; 0x15
    5ff0:	fe 89       	ldd	r31, Y+22	; 0x16
    5ff2:	13 ae       	std	Z+59, r1	; 0x3b
    5ff4:	14 ae       	std	Z+60, r1	; 0x3c
    5ff6:	15 ae       	std	Z+61, r1	; 0x3d
    5ff8:	16 ae       	std	Z+62, r1	; 0x3e
    5ffa:	1d c0       	rjmp	.+58     	; 0x6036 <fat_write_file+0x68c>
                break;
    5ffc:	4f 83       	std	Y+7, r20	; 0x07
    5ffe:	58 87       	std	Y+8, r21	; 0x08
    6000:	69 87       	std	Y+9, r22	; 0x09
    6002:	7a 87       	std	Y+10, r23	; 0x0a
    6004:	1c 82       	std	Y+4, r1	; 0x04
    6006:	1b 82       	std	Y+3, r1	; 0x03

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    6008:	2f 81       	ldd	r18, Y+7	; 0x07
    600a:	38 85       	ldd	r19, Y+8	; 0x08
    600c:	49 85       	ldd	r20, Y+9	; 0x09
    600e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6010:	ad 89       	ldd	r26, Y+21	; 0x15
    6012:	be 89       	ldd	r27, Y+22	; 0x16
    6014:	db 96       	adiw	r26, 0x3b	; 59
    6016:	2d 93       	st	X+, r18
    6018:	3d 93       	st	X+, r19
    601a:	4d 93       	st	X+, r20
    601c:	5c 93       	st	X, r21
    601e:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    6020:	ed 81       	ldd	r30, Y+5	; 0x05
    6022:	fe 81       	ldd	r31, Y+6	; 0x06
    6024:	ef 2b       	or	r30, r31
    6026:	39 f0       	breq	.+14     	; 0x6036 <fat_write_file+0x68c>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    6028:	2d 85       	ldd	r18, Y+13	; 0x0d
    602a:	3e 85       	ldd	r19, Y+14	; 0x0e
    602c:	28 0d       	add	r18, r8
    602e:	39 1d       	adc	r19, r9
    6030:	3e 87       	std	Y+14, r19	; 0x0e
    6032:	2d 87       	std	Y+13, r18	; 0x0d
    6034:	07 ce       	rjmp	.-1010   	; 0x5c44 <fat_write_file+0x29a>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    6036:	ad 89       	ldd	r26, Y+21	; 0x15
    6038:	be 89       	ldd	r27, Y+22	; 0x16
    603a:	d3 96       	adiw	r26, 0x33	; 51
    603c:	7c 91       	ld	r23, X
    603e:	d3 97       	sbiw	r26, 0x33	; 51
    6040:	d4 96       	adiw	r26, 0x34	; 52
    6042:	4c 91       	ld	r20, X
    6044:	d4 97       	sbiw	r26, 0x34	; 52
    6046:	d5 96       	adiw	r26, 0x35	; 53
    6048:	5c 91       	ld	r21, X
    604a:	d5 97       	sbiw	r26, 0x35	; 53
    604c:	d6 96       	adiw	r26, 0x36	; 54
    604e:	6c 91       	ld	r22, X
    6050:	d6 97       	sbiw	r26, 0x36	; 54
    6052:	d7 96       	adiw	r26, 0x37	; 55
    6054:	3c 91       	ld	r19, X
    6056:	d7 97       	sbiw	r26, 0x37	; 55
    6058:	d8 96       	adiw	r26, 0x38	; 56
    605a:	2c 91       	ld	r18, X
    605c:	d8 97       	sbiw	r26, 0x38	; 56
    605e:	d9 96       	adiw	r26, 0x39	; 57
    6060:	9c 91       	ld	r25, X
    6062:	d9 97       	sbiw	r26, 0x39	; 57
    6064:	da 96       	adiw	r26, 0x3a	; 58
    6066:	8c 91       	ld	r24, X
    6068:	da 97       	sbiw	r26, 0x3a	; 58
    606a:	97 96       	adiw	r26, 0x27	; 39
    606c:	6d 90       	ld	r6, X+
    606e:	7d 90       	ld	r7, X+
    6070:	8d 90       	ld	r8, X+
    6072:	9c 90       	ld	r9, X
    6074:	9a 97       	sbiw	r26, 0x2a	; 42
    6076:	64 01       	movw	r12, r8
    6078:	53 01       	movw	r10, r6
    607a:	ee 24       	eor	r14, r14
    607c:	ff 24       	eor	r15, r15
    607e:	87 01       	movw	r16, r14
    6080:	18 17       	cp	r17, r24
    6082:	e0 f0       	brcs	.+56     	; 0x60bc <fat_write_file+0x712>
    6084:	81 17       	cp	r24, r17
    6086:	d9 f5       	brne	.+118    	; 0x60fe <fat_write_file+0x754>
    6088:	09 17       	cp	r16, r25
    608a:	c0 f0       	brcs	.+48     	; 0x60bc <fat_write_file+0x712>
    608c:	90 17       	cp	r25, r16
    608e:	b9 f5       	brne	.+110    	; 0x60fe <fat_write_file+0x754>
    6090:	f2 16       	cp	r15, r18
    6092:	a0 f0       	brcs	.+40     	; 0x60bc <fat_write_file+0x712>
    6094:	2f 15       	cp	r18, r15
    6096:	99 f5       	brne	.+102    	; 0x60fe <fat_write_file+0x754>
    6098:	e3 16       	cp	r14, r19
    609a:	80 f0       	brcs	.+32     	; 0x60bc <fat_write_file+0x712>
    609c:	3e 15       	cp	r19, r14
    609e:	79 f5       	brne	.+94     	; 0x60fe <fat_write_file+0x754>
    60a0:	d6 16       	cp	r13, r22
    60a2:	60 f0       	brcs	.+24     	; 0x60bc <fat_write_file+0x712>
    60a4:	6d 15       	cp	r22, r13
    60a6:	59 f5       	brne	.+86     	; 0x60fe <fat_write_file+0x754>
    60a8:	c5 16       	cp	r12, r21
    60aa:	40 f0       	brcs	.+16     	; 0x60bc <fat_write_file+0x712>
    60ac:	5c 15       	cp	r21, r12
    60ae:	39 f5       	brne	.+78     	; 0x60fe <fat_write_file+0x754>
    60b0:	b4 16       	cp	r11, r20
    60b2:	20 f0       	brcs	.+8      	; 0x60bc <fat_write_file+0x712>
    60b4:	4b 15       	cp	r20, r11
    60b6:	19 f5       	brne	.+70     	; 0x60fe <fat_write_file+0x754>
    60b8:	67 16       	cp	r6, r23
    60ba:	08 f5       	brcc	.+66     	; 0x60fe <fat_write_file+0x754>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    60bc:	ed 89       	ldd	r30, Y+21	; 0x15
    60be:	fe 89       	ldd	r31, Y+22	; 0x16
    60c0:	77 a3       	std	Z+39, r23	; 0x27
    60c2:	40 a7       	std	Z+40, r20	; 0x28
    60c4:	51 a7       	std	Z+41, r21	; 0x29
    60c6:	62 a7       	std	Z+42, r22	; 0x2a
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    60c8:	81 91       	ld	r24, Z+
    60ca:	91 91       	ld	r25, Z+
    60cc:	bf 01       	movw	r22, r30
    60ce:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <fat_write_dir_entry>
    60d2:	88 23       	and	r24, r24
    60d4:	a1 f4       	brne	.+40     	; 0x60fe <fat_write_file+0x754>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    60d6:	ad 89       	ldd	r26, Y+21	; 0x15
    60d8:	be 89       	ldd	r27, Y+22	; 0x16
    60da:	d3 96       	adiw	r26, 0x33	; 51
    60dc:	0d 90       	ld	r0, X+
    60de:	bc 91       	ld	r27, X
    60e0:	a0 2d       	mov	r26, r0
    60e2:	a6 19       	sub	r26, r6
    60e4:	b7 09       	sbc	r27, r7
    60e6:	be 83       	std	Y+6, r27	; 0x06
    60e8:	ad 83       	std	Y+5, r26	; 0x05
            fd->pos = size_old;
    60ea:	ed 89       	ldd	r30, Y+21	; 0x15
    60ec:	fe 89       	ldd	r31, Y+22	; 0x16
    60ee:	a3 aa       	std	Z+51, r10	; 0x33
    60f0:	b4 aa       	std	Z+52, r11	; 0x34
    60f2:	c5 aa       	std	Z+53, r12	; 0x35
    60f4:	d6 aa       	std	Z+54, r13	; 0x36
    60f6:	17 aa       	std	Z+55, r1	; 0x37
    60f8:	10 ae       	std	Z+56, r1	; 0x38
    60fa:	11 ae       	std	Z+57, r1	; 0x39
    60fc:	12 ae       	std	Z+58, r1	; 0x3a
        }
    }

    return buffer_len - buffer_left;
    60fe:	4f 85       	ldd	r20, Y+15	; 0x0f
    6100:	58 89       	ldd	r21, Y+16	; 0x10
    6102:	2d 81       	ldd	r18, Y+5	; 0x05
    6104:	3e 81       	ldd	r19, Y+6	; 0x06
    6106:	42 1b       	sub	r20, r18
    6108:	53 0b       	sbc	r21, r19
    610a:	02 c0       	rjmp	.+4      	; 0x6110 <fat_write_file+0x766>
    610c:	4f ef       	ldi	r20, 0xFF	; 255
    610e:	5f ef       	ldi	r21, 0xFF	; 255
}
    6110:	ca 01       	movw	r24, r20
    6112:	66 96       	adiw	r28, 0x16	; 22
    6114:	0f b6       	in	r0, 0x3f	; 63
    6116:	f8 94       	cli
    6118:	de bf       	out	0x3e, r29	; 62
    611a:	0f be       	out	0x3f, r0	; 63
    611c:	cd bf       	out	0x3d, r28	; 61
    611e:	cf 91       	pop	r28
    6120:	df 91       	pop	r29
    6122:	1f 91       	pop	r17
    6124:	0f 91       	pop	r16
    6126:	ff 90       	pop	r15
    6128:	ef 90       	pop	r14
    612a:	df 90       	pop	r13
    612c:	cf 90       	pop	r12
    612e:	bf 90       	pop	r11
    6130:	af 90       	pop	r10
    6132:	9f 90       	pop	r9
    6134:	8f 90       	pop	r8
    6136:	7f 90       	pop	r7
    6138:	6f 90       	pop	r6
    613a:	5f 90       	pop	r5
    613c:	4f 90       	pop	r4
    613e:	3f 90       	pop	r3
    6140:	2f 90       	pop	r2
    6142:	08 95       	ret

00006144 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    6144:	cf 93       	push	r28
    6146:	df 93       	push	r29
    6148:	ac 01       	movw	r20, r24
    614a:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    614c:	00 97       	sbiw	r24, 0x00	; 0
    614e:	a9 f1       	breq	.+106    	; 0x61ba <fat_open_dir+0x76>
    6150:	61 15       	cp	r22, r1
    6152:	71 05       	cpc	r23, r1
    6154:	91 f1       	breq	.+100    	; 0x61ba <fat_open_dir+0x76>
    6156:	90 96       	adiw	r26, 0x20	; 32
    6158:	8c 91       	ld	r24, X
    615a:	90 97       	sbiw	r26, 0x20	; 32
    615c:	84 ff       	sbrs	r24, 4
    615e:	2d c0       	rjmp	.+90     	; 0x61ba <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    6160:	80 91 3a 04 	lds	r24, 0x043A
    6164:	90 91 3b 04 	lds	r25, 0x043B
    6168:	89 2b       	or	r24, r25
    616a:	19 f4       	brne	.+6      	; 0x6172 <fat_open_dir+0x2e>
    616c:	ea e3       	ldi	r30, 0x3A	; 58
    616e:	f4 e0       	ldi	r31, 0x04	; 4
    6170:	08 c0       	rjmp	.+16     	; 0x6182 <fat_open_dir+0x3e>
    6172:	80 91 73 04 	lds	r24, 0x0473
    6176:	90 91 74 04 	lds	r25, 0x0474
    617a:	89 2b       	or	r24, r25
    617c:	f1 f4       	brne	.+60     	; 0x61ba <fat_open_dir+0x76>
    617e:	e3 e7       	ldi	r30, 0x73	; 115
    6180:	f4 e0       	ldi	r31, 0x04	; 4
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    6182:	9f 01       	movw	r18, r30
    6184:	2e 5f       	subi	r18, 0xFE	; 254
    6186:	3f 4f       	sbci	r19, 0xFF	; 255
    6188:	bd 01       	movw	r22, r26
    618a:	81 e3       	ldi	r24, 0x31	; 49
    618c:	eb 01       	movw	r28, r22
    618e:	09 90       	ld	r0, Y+
    6190:	be 01       	movw	r22, r28
    6192:	e9 01       	movw	r28, r18
    6194:	09 92       	st	Y+, r0
    6196:	9e 01       	movw	r18, r28
    6198:	81 50       	subi	r24, 0x01	; 1
    619a:	c1 f7       	brne	.-16     	; 0x618c <fat_open_dir+0x48>
    dd->fs = fs;
    619c:	51 83       	std	Z+1, r21	; 0x01
    619e:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    61a0:	91 96       	adiw	r26, 0x21	; 33
    61a2:	8d 91       	ld	r24, X+
    61a4:	9d 91       	ld	r25, X+
    61a6:	0d 90       	ld	r0, X+
    61a8:	bc 91       	ld	r27, X
    61aa:	a0 2d       	mov	r26, r0
    61ac:	83 ab       	std	Z+51, r24	; 0x33
    61ae:	94 ab       	std	Z+52, r25	; 0x34
    61b0:	a5 ab       	std	Z+53, r26	; 0x35
    61b2:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    61b4:	10 ae       	std	Z+56, r1	; 0x38
    61b6:	17 aa       	std	Z+55, r1	; 0x37
    61b8:	02 c0       	rjmp	.+4      	; 0x61be <fat_open_dir+0x7a>

    return dd;
    61ba:	e0 e0       	ldi	r30, 0x00	; 0
    61bc:	f0 e0       	ldi	r31, 0x00	; 0
}
    61be:	cf 01       	movw	r24, r30
    61c0:	df 91       	pop	r29
    61c2:	cf 91       	pop	r28
    61c4:	08 95       	ret

000061c6 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    61c6:	cf 93       	push	r28
    61c8:	df 93       	push	r29
    61ca:	9c 01       	movw	r18, r24
    61cc:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    61ce:	00 97       	sbiw	r24, 0x00	; 0
    61d0:	41 f0       	breq	.+16     	; 0x61e2 <fat_open_file+0x1c>
    61d2:	61 15       	cp	r22, r1
    61d4:	71 05       	cpc	r23, r1
    61d6:	29 f0       	breq	.+10     	; 0x61e2 <fat_open_file+0x1c>
    61d8:	90 96       	adiw	r26, 0x20	; 32
    61da:	8c 91       	ld	r24, X
    61dc:	90 97       	sbiw	r26, 0x20	; 32
    61de:	84 ff       	sbrs	r24, 4
    61e0:	33 c0       	rjmp	.+102    	; 0x6248 <fat_open_file+0x82>
    61e2:	20 e0       	ldi	r18, 0x00	; 0
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    61e6:	c9 01       	movw	r24, r18
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    61ee:	cd ef       	ldi	r28, 0xFD	; 253
    61f0:	d3 e0       	ldi	r29, 0x03	; 3
    61f2:	fd 01       	movw	r30, r26
    61f4:	81 e3       	ldi	r24, 0x31	; 49
    61f6:	01 90       	ld	r0, Z+
    61f8:	09 92       	st	Y+, r0
    61fa:	81 50       	subi	r24, 0x01	; 1
    61fc:	e1 f7       	brne	.-8      	; 0x61f6 <fat_open_file+0x30>
    fd->fs = fs;
    61fe:	30 93 fc 03 	sts	0x03FC, r19
    6202:	20 93 fb 03 	sts	0x03FB, r18
    fd->pos = 0;
    6206:	10 92 2e 04 	sts	0x042E, r1
    620a:	10 92 2f 04 	sts	0x042F, r1
    620e:	10 92 30 04 	sts	0x0430, r1
    6212:	10 92 31 04 	sts	0x0431, r1
    6216:	10 92 32 04 	sts	0x0432, r1
    621a:	10 92 33 04 	sts	0x0433, r1
    621e:	10 92 34 04 	sts	0x0434, r1
    6222:	10 92 35 04 	sts	0x0435, r1
    fd->pos_cluster = dir_entry->cluster;
    6226:	91 96       	adiw	r26, 0x21	; 33
    6228:	8d 91       	ld	r24, X+
    622a:	9d 91       	ld	r25, X+
    622c:	0d 90       	ld	r0, X+
    622e:	bc 91       	ld	r27, X
    6230:	a0 2d       	mov	r26, r0
    6232:	80 93 36 04 	sts	0x0436, r24
    6236:	90 93 37 04 	sts	0x0437, r25
    623a:	a0 93 38 04 	sts	0x0438, r26
    623e:	b0 93 39 04 	sts	0x0439, r27
    6242:	2b ef       	ldi	r18, 0xFB	; 251
    6244:	33 e0       	ldi	r19, 0x03	; 3
    6246:	cf cf       	rjmp	.-98     	; 0x61e6 <fat_open_file+0x20>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    6248:	80 91 fb 03 	lds	r24, 0x03FB
    624c:	90 91 fc 03 	lds	r25, 0x03FC
    6250:	89 2b       	or	r24, r25
    6252:	39 f6       	brne	.-114    	; 0x61e2 <fat_open_file+0x1c>
    6254:	cc cf       	rjmp	.-104    	; 0x61ee <fat_open_file+0x28>

00006256 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    6256:	6f 92       	push	r6
    6258:	7f 92       	push	r7
    625a:	8f 92       	push	r8
    625c:	9f 92       	push	r9
    625e:	af 92       	push	r10
    6260:	bf 92       	push	r11
    6262:	cf 92       	push	r12
    6264:	df 92       	push	r13
    6266:	ef 92       	push	r14
    6268:	ff 92       	push	r15
    626a:	0f 93       	push	r16
    626c:	1f 93       	push	r17
    626e:	cf 93       	push	r28
    6270:	df 93       	push	r29
    6272:	4c 01       	movw	r8, r24
    6274:	eb 01       	movw	r28, r22
    6276:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    6278:	00 97       	sbiw	r24, 0x00	; 0
    627a:	09 f4       	brne	.+2      	; 0x627e <fat_get_dir_entry_of_path+0x28>
    627c:	67 c0       	rjmp	.+206    	; 0x634c <fat_get_dir_entry_of_path+0xf6>
    627e:	61 15       	cp	r22, r1
    6280:	71 05       	cpc	r23, r1
    6282:	09 f4       	brne	.+2      	; 0x6286 <fat_get_dir_entry_of_path+0x30>
    6284:	63 c0       	rjmp	.+198    	; 0x634c <fat_get_dir_entry_of_path+0xf6>
    6286:	88 81       	ld	r24, Y
    6288:	88 23       	and	r24, r24
    628a:	09 f4       	brne	.+2      	; 0x628e <fat_get_dir_entry_of_path+0x38>
    628c:	5f c0       	rjmp	.+190    	; 0x634c <fat_get_dir_entry_of_path+0xf6>
    628e:	41 15       	cp	r20, r1
    6290:	51 05       	cpc	r21, r1
    6292:	09 f4       	brne	.+2      	; 0x6296 <fat_get_dir_entry_of_path+0x40>
    6294:	5b c0       	rjmp	.+182    	; 0x634c <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    6296:	8f 32       	cpi	r24, 0x2F	; 47
    6298:	09 f4       	brne	.+2      	; 0x629c <fat_get_dir_entry_of_path+0x46>
        ++path;
    629a:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    629c:	81 e3       	ldi	r24, 0x31	; 49
    629e:	f7 01       	movw	r30, r14
    62a0:	11 92       	st	Z+, r1
    62a2:	8a 95       	dec	r24
    62a4:	e9 f7       	brne	.-6      	; 0x62a0 <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    62a6:	80 e1       	ldi	r24, 0x10	; 16
    62a8:	f7 01       	movw	r30, r14
    62aa:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    62ac:	37 01       	movw	r6, r14
    62ae:	01 c0       	rjmp	.+2      	; 0x62b2 <fat_get_dir_entry_of_path+0x5c>
    62b0:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    62b2:	88 81       	ld	r24, Y
    62b4:	88 23       	and	r24, r24
    62b6:	09 f4       	brne	.+2      	; 0x62ba <fat_get_dir_entry_of_path+0x64>
    62b8:	4b c0       	rjmp	.+150    	; 0x6350 <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    62ba:	c4 01       	movw	r24, r8
    62bc:	b7 01       	movw	r22, r14
    62be:	0e 94 a2 30 	call	0x6144	; 0x6144 <fat_open_dir>
    62c2:	6c 01       	movw	r12, r24
        if(!dd)
    62c4:	00 97       	sbiw	r24, 0x00	; 0
    62c6:	09 f4       	brne	.+2      	; 0x62ca <fat_get_dir_entry_of_path+0x74>
    62c8:	41 c0       	rjmp	.+130    	; 0x634c <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    62ca:	ce 01       	movw	r24, r28
    62cc:	6f e2       	ldi	r22, 0x2F	; 47
    62ce:	70 e0       	ldi	r23, 0x00	; 0
    62d0:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    62d4:	00 97       	sbiw	r24, 0x00	; 0
    62d6:	39 f0       	breq	.+14     	; 0x62e6 <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    62d8:	48 2f       	mov	r20, r24
    62da:	4c 1b       	sub	r20, r28
            ++sub_path;
    62dc:	5c 01       	movw	r10, r24
    62de:	08 94       	sec
    62e0:	a1 1c       	adc	r10, r1
    62e2:	b1 1c       	adc	r11, r1
    62e4:	2a c0       	rjmp	.+84     	; 0x633a <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    62e6:	fe 01       	movw	r30, r28
    62e8:	01 90       	ld	r0, Z+
    62ea:	00 20       	and	r0, r0
    62ec:	e9 f7       	brne	.-6      	; 0x62e8 <fat_get_dir_entry_of_path+0x92>
    62ee:	31 97       	sbiw	r30, 0x01	; 1
    62f0:	4e 2f       	mov	r20, r30
    62f2:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    62f4:	5e 01       	movw	r10, r28
    62f6:	a4 0e       	add	r10, r20
    62f8:	b1 1c       	adc	r11, r1
    62fa:	1f c0       	rjmp	.+62     	; 0x633a <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    62fc:	f3 01       	movw	r30, r6
    62fe:	01 90       	ld	r0, Z+
    6300:	00 20       	and	r0, r0
    6302:	e9 f7       	brne	.-6      	; 0x62fe <fat_get_dir_entry_of_path+0xa8>
    6304:	31 97       	sbiw	r30, 0x01	; 1
    6306:	e6 19       	sub	r30, r6
    6308:	f7 09       	sbc	r31, r7
    630a:	e0 17       	cp	r30, r16
    630c:	f1 07       	cpc	r31, r17
    630e:	b9 f4       	brne	.+46     	; 0x633e <fat_get_dir_entry_of_path+0xe8>
    6310:	ce 01       	movw	r24, r28
    6312:	b3 01       	movw	r22, r6
    6314:	a8 01       	movw	r20, r16
    6316:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <strncmp>
    631a:	00 97       	sbiw	r24, 0x00	; 0
    631c:	81 f4       	brne	.+32     	; 0x633e <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    631e:	f6 01       	movw	r30, r12
    6320:	11 82       	std	Z+1, r1	; 0x01
    6322:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    6324:	0c 0f       	add	r16, r28
    6326:	1d 1f       	adc	r17, r29
    6328:	f8 01       	movw	r30, r16
    632a:	80 81       	ld	r24, Z
    632c:	88 23       	and	r24, r24
    632e:	81 f0       	breq	.+32     	; 0x6350 <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    6330:	f7 01       	movw	r30, r14
    6332:	80 a1       	ldd	r24, Z+32	; 0x20
    6334:	84 fd       	sbrc	r24, 4
    6336:	bc cf       	rjmp	.-136    	; 0x62b0 <fat_get_dir_entry_of_path+0x5a>
    6338:	09 c0       	rjmp	.+18     	; 0x634c <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    633a:	04 2f       	mov	r16, r20
    633c:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    633e:	c6 01       	movw	r24, r12
    6340:	b7 01       	movw	r22, r14
    6342:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <fat_read_dir>
    6346:	88 23       	and	r24, r24
    6348:	c9 f6       	brne	.-78     	; 0x62fc <fat_get_dir_entry_of_path+0xa6>
    634a:	12 c0       	rjmp	.+36     	; 0x6370 <fat_get_dir_entry_of_path+0x11a>
    634c:	80 e0       	ldi	r24, 0x00	; 0
    634e:	01 c0       	rjmp	.+2      	; 0x6352 <fat_get_dir_entry_of_path+0xfc>
    6350:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    6352:	df 91       	pop	r29
    6354:	cf 91       	pop	r28
    6356:	1f 91       	pop	r17
    6358:	0f 91       	pop	r16
    635a:	ff 90       	pop	r15
    635c:	ef 90       	pop	r14
    635e:	df 90       	pop	r13
    6360:	cf 90       	pop	r12
    6362:	bf 90       	pop	r11
    6364:	af 90       	pop	r10
    6366:	9f 90       	pop	r9
    6368:	8f 90       	pop	r8
    636a:	7f 90       	pop	r7
    636c:	6f 90       	pop	r6
    636e:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    6370:	f6 01       	movw	r30, r12
    6372:	11 82       	std	Z+1, r1	; 0x01
    6374:	10 82       	st	Z, r1
    6376:	9d cf       	rjmp	.-198    	; 0x62b2 <fat_get_dir_entry_of_path+0x5c>

00006378 <adxl345_hw_setup>:
#include <avr/io.h>
#include "main.h"	//For inclusion of delay_us

void adxl345_hw_setup(void)
{
	ADXL_COM_DIRECTION |= (ACCEL_CS | ACCEL_SCK | ACCEL_DI); 	//Define Port C Outputs
    6378:	87 b1       	in	r24, 0x07	; 7
    637a:	87 60       	ori	r24, 0x07	; 7
    637c:	87 b9       	out	0x07, r24	; 7
	ADXL_COM_PORT |= ACCEL_DO;
    637e:	43 9a       	sbi	0x08, 3	; 8
	ADXL_COM_DIRECTION &= ~ACCEL_DO;								//Define Port C Inputs
    6380:	3b 98       	cbi	0x07, 3	; 7
	
	ADXL_INT_DIRECTION &= ~(ACCEL_INT1 | ACCEL_INT2);
    6382:	8a b1       	in	r24, 0x0a	; 10
    6384:	83 7f       	andi	r24, 0xF3	; 243
    6386:	8a b9       	out	0x0a, r24	; 10
	ADXL_INT_PORT |= (ACCEL_INT1 | ACCEL_INT2);
    6388:	8b b1       	in	r24, 0x0b	; 11
    638a:	8c 60       	ori	r24, 0x0C	; 12
    638c:	8b b9       	out	0x0b, r24	; 11
}
    638e:	08 95       	ret

00006390 <adxl345_write>:
	UNSELECT_ACCEL();
	
	return register_value;
}

void adxl345_write(char register_address, char register_value){
    6390:	df 92       	push	r13
    6392:	ef 92       	push	r14
    6394:	ff 92       	push	r15
    6396:	0f 93       	push	r16
    6398:	1f 93       	push	r17
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	d6 2e       	mov	r13, r22
	CLOCK_HIGH();
    63a0:	41 9a       	sbi	0x08, 1	; 8
	SELECT_ACCEL();	//Lower CS pin.
    63a2:	40 98       	cbi	0x08, 0	; 8
    63a4:	c7 e0       	ldi	r28, 0x07	; 7
    63a6:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
		
		if((register_address & (1<<bit))==(1<<bit))ADXL_COM_PORT |= ACCEL_DI;
    63a8:	91 e0       	ldi	r25, 0x01	; 1
    63aa:	e9 2e       	mov	r14, r25
    63ac:	f1 2c       	mov	r15, r1
    63ae:	08 2f       	mov	r16, r24
    63b0:	10 e0       	ldi	r17, 0x00	; 0
void adxl345_write(char register_address, char register_value){
	CLOCK_HIGH();
	SELECT_ACCEL();	//Lower CS pin.
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
    63b2:	41 98       	cbi	0x08, 1	; 8
		
		if((register_address & (1<<bit))==(1<<bit))ADXL_COM_PORT |= ACCEL_DI;
    63b4:	97 01       	movw	r18, r14
    63b6:	0c 2e       	mov	r0, r28
    63b8:	02 c0       	rjmp	.+4      	; 0x63be <adxl345_write+0x2e>
    63ba:	22 0f       	add	r18, r18
    63bc:	33 1f       	adc	r19, r19
    63be:	0a 94       	dec	r0
    63c0:	e2 f7       	brpl	.-8      	; 0x63ba <adxl345_write+0x2a>
    63c2:	c9 01       	movw	r24, r18
    63c4:	80 23       	and	r24, r16
    63c6:	91 23       	and	r25, r17
    63c8:	82 17       	cp	r24, r18
    63ca:	93 07       	cpc	r25, r19
    63cc:	11 f4       	brne	.+4      	; 0x63d2 <adxl345_write+0x42>
    63ce:	42 9a       	sbi	0x08, 2	; 8
    63d0:	01 c0       	rjmp	.+2      	; 0x63d4 <adxl345_write+0x44>
		else ADXL_COM_PORT &= ~ACCEL_DI;
    63d2:	42 98       	cbi	0x08, 2	; 8
		delay_us(1);
    63d4:	81 e0       	ldi	r24, 0x01	; 1
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
		
		CLOCK_HIGH();
    63dc:	41 9a       	sbi	0x08, 1	; 8
		delay_us(1);
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	0e 94 75 00 	call	0xea	; 0xea <delay_us>

void adxl345_write(char register_address, char register_value){
	CLOCK_HIGH();
	SELECT_ACCEL();	//Lower CS pin.
	
	for(int bit=7; bit>=0; bit--){
    63e6:	21 97       	sbiw	r28, 0x01	; 1
    63e8:	8f ef       	ldi	r24, 0xFF	; 255
    63ea:	cf 3f       	cpi	r28, 0xFF	; 255
    63ec:	d8 07       	cpc	r29, r24
    63ee:	09 f7       	brne	.-62     	; 0x63b2 <adxl345_write+0x22>
    63f0:	c7 e0       	ldi	r28, 0x07	; 7
    63f2:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
		
		if((register_value & (1<<bit))==(1<<bit))ADXL_COM_PORT |= ACCEL_DI;
    63f4:	81 e0       	ldi	r24, 0x01	; 1
    63f6:	e8 2e       	mov	r14, r24
    63f8:	f1 2c       	mov	r15, r1
    63fa:	0d 2d       	mov	r16, r13
    63fc:	10 e0       	ldi	r17, 0x00	; 0
		CLOCK_HIGH();
		delay_us(1);
	}
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
    63fe:	41 98       	cbi	0x08, 1	; 8
		
		if((register_value & (1<<bit))==(1<<bit))ADXL_COM_PORT |= ACCEL_DI;
    6400:	97 01       	movw	r18, r14
    6402:	0c 2e       	mov	r0, r28
    6404:	02 c0       	rjmp	.+4      	; 0x640a <adxl345_write+0x7a>
    6406:	22 0f       	add	r18, r18
    6408:	33 1f       	adc	r19, r19
    640a:	0a 94       	dec	r0
    640c:	e2 f7       	brpl	.-8      	; 0x6406 <adxl345_write+0x76>
    640e:	c9 01       	movw	r24, r18
    6410:	80 23       	and	r24, r16
    6412:	91 23       	and	r25, r17
    6414:	82 17       	cp	r24, r18
    6416:	93 07       	cpc	r25, r19
    6418:	11 f4       	brne	.+4      	; 0x641e <adxl345_write+0x8e>
    641a:	42 9a       	sbi	0x08, 2	; 8
    641c:	01 c0       	rjmp	.+2      	; 0x6420 <adxl345_write+0x90>
		else ADXL_COM_PORT &= ~ACCEL_DI;	
    641e:	42 98       	cbi	0x08, 2	; 8
		delay_us(1);
    6420:	81 e0       	ldi	r24, 0x01	; 1
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
		
		CLOCK_HIGH();
    6428:	41 9a       	sbi	0x08, 1	; 8
		delay_us(1);		
    642a:	81 e0       	ldi	r24, 0x01	; 1
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
		
		CLOCK_HIGH();
		delay_us(1);
	}
	
	for(int bit=7; bit>=0; bit--){
    6432:	21 97       	sbiw	r28, 0x01	; 1
    6434:	8f ef       	ldi	r24, 0xFF	; 255
    6436:	cf 3f       	cpi	r28, 0xFF	; 255
    6438:	d8 07       	cpc	r29, r24
    643a:	09 f7       	brne	.-62     	; 0x63fe <adxl345_write+0x6e>
		
		CLOCK_HIGH();
		delay_us(1);		
	}
	
	UNSELECT_ACCEL();
    643c:	40 9a       	sbi	0x08, 0	; 8

    643e:	df 91       	pop	r29
    6440:	cf 91       	pop	r28
    6442:	1f 91       	pop	r17
    6444:	0f 91       	pop	r16
    6446:	ff 90       	pop	r15
    6448:	ef 90       	pop	r14
    644a:	df 90       	pop	r13
    644c:	08 95       	ret

0000644e <adxl345_defaults>:
	ADXL_INT_PORT |= (ACCEL_INT1 | ACCEL_INT2);
}

void adxl345_defaults(void){

	adxl345_write(DATA_FORMAT, INT_INVERT);	//Invert the interrupt bit (0 on active interrupt)
    644e:	81 e3       	ldi	r24, 0x31	; 49
    6450:	60 e2       	ldi	r22, 0x20	; 32
    6452:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
	adxl345_write(INT_ENABLE, DATA_READY);	//Activate the 'Data Ready' Interrupt
    6456:	8e e2       	ldi	r24, 0x2E	; 46
    6458:	60 e8       	ldi	r22, 0x80	; 128
    645a:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
	adxl345_write(INT_MAP, 0<<7);			//Sent the Data Ready Interrupt to the INT1 pin
    645e:	8f e2       	ldi	r24, 0x2F	; 47
    6460:	60 e0       	ldi	r22, 0x00	; 0
    6462:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
	adxl345_write(BW_RATE, 0x0A);			//Set Output Rate to 100 Hz
    6466:	8c e2       	ldi	r24, 0x2C	; 44
    6468:	6a e0       	ldi	r22, 0x0A	; 10
    646a:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
	adxl345_write(POWER_CTL, MEASURE);		//Put the Accelerometer into measurement mode	
    646e:	8d e2       	ldi	r24, 0x2D	; 45
    6470:	68 e0       	ldi	r22, 0x08	; 8
    6472:	0e 94 c8 31 	call	0x6390	; 0x6390 <adxl345_write>
}
    6476:	08 95       	ret

00006478 <adxl345_read>:

char adxl345_read(char register_address){
    6478:	ef 92       	push	r14
    647a:	ff 92       	push	r15
    647c:	0f 93       	push	r16
    647e:	1f 93       	push	r17
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
	char read_address=0x80 | register_address;
    6484:	80 68       	ori	r24, 0x80	; 128
	char register_value=0;
	
	CLOCK_HIGH();
    6486:	41 9a       	sbi	0x08, 1	; 8
	SELECT_ACCEL();	//Lower CS pin.
    6488:	40 98       	cbi	0x08, 0	; 8
    648a:	c7 e0       	ldi	r28, 0x07	; 7
    648c:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
		
		if((read_address & (1<<bit))==(1<<bit))ADXL_COM_PORT |= ACCEL_DI;
    648e:	21 e0       	ldi	r18, 0x01	; 1
    6490:	e2 2e       	mov	r14, r18
    6492:	f1 2c       	mov	r15, r1
    6494:	08 2f       	mov	r16, r24
    6496:	10 e0       	ldi	r17, 0x00	; 0
	
	CLOCK_HIGH();
	SELECT_ACCEL();	//Lower CS pin.
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
    6498:	41 98       	cbi	0x08, 1	; 8
		
		if((read_address & (1<<bit))==(1<<bit))ADXL_COM_PORT |= ACCEL_DI;
    649a:	97 01       	movw	r18, r14
    649c:	0c 2e       	mov	r0, r28
    649e:	02 c0       	rjmp	.+4      	; 0x64a4 <adxl345_read+0x2c>
    64a0:	22 0f       	add	r18, r18
    64a2:	33 1f       	adc	r19, r19
    64a4:	0a 94       	dec	r0
    64a6:	e2 f7       	brpl	.-8      	; 0x64a0 <adxl345_read+0x28>
    64a8:	c9 01       	movw	r24, r18
    64aa:	80 23       	and	r24, r16
    64ac:	91 23       	and	r25, r17
    64ae:	82 17       	cp	r24, r18
    64b0:	93 07       	cpc	r25, r19
    64b2:	11 f4       	brne	.+4      	; 0x64b8 <adxl345_read+0x40>
    64b4:	42 9a       	sbi	0x08, 2	; 8
    64b6:	01 c0       	rjmp	.+2      	; 0x64ba <adxl345_read+0x42>
		else ADXL_COM_PORT &= ~ACCEL_DI;
    64b8:	42 98       	cbi	0x08, 2	; 8
		delay_us(1);
    64ba:	81 e0       	ldi	r24, 0x01	; 1
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
		
		CLOCK_HIGH();
    64c2:	41 9a       	sbi	0x08, 1	; 8
		delay_us(1);
    64c4:	81 e0       	ldi	r24, 0x01	; 1
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
	char register_value=0;
	
	CLOCK_HIGH();
	SELECT_ACCEL();	//Lower CS pin.
	
	for(int bit=7; bit>=0; bit--){
    64cc:	21 97       	sbiw	r28, 0x01	; 1
    64ce:	8f ef       	ldi	r24, 0xFF	; 255
    64d0:	cf 3f       	cpi	r28, 0xFF	; 255
    64d2:	d8 07       	cpc	r29, r24
    64d4:	09 f7       	brne	.-62     	; 0x6498 <adxl345_read+0x20>
    64d6:	c7 e0       	ldi	r28, 0x07	; 7
    64d8:	d0 e0       	ldi	r29, 0x00	; 0
    64da:	10 e0       	ldi	r17, 0x00	; 0
		CLOCK_HIGH();
		delay_us(1);
	}
	
	for(int bit=7; bit>=0; bit--){
		CLOCK_LOW();
    64dc:	41 98       	cbi	0x08, 1	; 8
		delay_us(1);
    64de:	81 e0       	ldi	r24, 0x01	; 1
    64e0:	90 e0       	ldi	r25, 0x00	; 0
    64e2:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
		
		CLOCK_HIGH();
    64e6:	41 9a       	sbi	0x08, 1	; 8
		delay_us(1);
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	0e 94 75 00 	call	0xea	; 0xea <delay_us>
		
		if((ADXL_COM_PIN & ACCEL_DO)==ACCEL_DO)register_value |= (1<<bit);
    64f0:	33 9b       	sbis	0x06, 3	; 6
    64f2:	0a c0       	rjmp	.+20     	; 0x6508 <adxl345_read+0x90>
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	0c 2e       	mov	r0, r28
    64fa:	02 c0       	rjmp	.+4      	; 0x6500 <adxl345_read+0x88>
    64fc:	88 0f       	add	r24, r24
    64fe:	99 1f       	adc	r25, r25
    6500:	0a 94       	dec	r0
    6502:	e2 f7       	brpl	.-8      	; 0x64fc <adxl345_read+0x84>
    6504:	18 2b       	or	r17, r24
    6506:	0a c0       	rjmp	.+20     	; 0x651c <adxl345_read+0xa4>
		else register_value &= ~(1<<bit);		
    6508:	81 e0       	ldi	r24, 0x01	; 1
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	0c 2e       	mov	r0, r28
    650e:	02 c0       	rjmp	.+4      	; 0x6514 <adxl345_read+0x9c>
    6510:	88 0f       	add	r24, r24
    6512:	99 1f       	adc	r25, r25
    6514:	0a 94       	dec	r0
    6516:	e2 f7       	brpl	.-8      	; 0x6510 <adxl345_read+0x98>
    6518:	80 95       	com	r24
    651a:	18 23       	and	r17, r24
		
		CLOCK_HIGH();
		delay_us(1);
	}
	
	for(int bit=7; bit>=0; bit--){
    651c:	21 97       	sbiw	r28, 0x01	; 1
    651e:	8f ef       	ldi	r24, 0xFF	; 255
    6520:	cf 3f       	cpi	r28, 0xFF	; 255
    6522:	d8 07       	cpc	r29, r24
    6524:	d9 f6       	brne	.-74     	; 0x64dc <adxl345_read+0x64>
		
		if((ADXL_COM_PIN & ACCEL_DO)==ACCEL_DO)register_value |= (1<<bit);
		else register_value &= ~(1<<bit);		
	}
	
	UNSELECT_ACCEL();
    6526:	40 9a       	sbi	0x08, 0	; 8
	
	return register_value;
}
    6528:	81 2f       	mov	r24, r17
    652a:	df 91       	pop	r29
    652c:	cf 91       	pop	r28
    652e:	1f 91       	pop	r17
    6530:	0f 91       	pop	r16
    6532:	ff 90       	pop	r15
    6534:	ef 90       	pop	r14
    6536:	08 95       	ret

00006538 <__muldi3>:
    6538:	a0 e3       	ldi	r26, 0x30	; 48
    653a:	b0 e0       	ldi	r27, 0x00	; 0
    653c:	e2 ea       	ldi	r30, 0xA2	; 162
    653e:	f2 e3       	ldi	r31, 0x32	; 50
    6540:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__prologue_saves__>
    6544:	a8 e0       	ldi	r26, 0x08	; 8
    6546:	4e 01       	movw	r8, r28
    6548:	08 94       	sec
    654a:	81 1c       	adc	r8, r1
    654c:	91 1c       	adc	r9, r1
    654e:	f4 01       	movw	r30, r8
    6550:	ba 2f       	mov	r27, r26
    6552:	11 92       	st	Z+, r1
    6554:	ba 95       	dec	r27
    6556:	e9 f7       	brne	.-6      	; 0x6552 <__muldi3+0x1a>
    6558:	29 83       	std	Y+1, r18	; 0x01
    655a:	3a 83       	std	Y+2, r19	; 0x02
    655c:	4b 83       	std	Y+3, r20	; 0x03
    655e:	5c 83       	std	Y+4, r21	; 0x04
    6560:	6d 83       	std	Y+5, r22	; 0x05
    6562:	7e 83       	std	Y+6, r23	; 0x06
    6564:	8f 83       	std	Y+7, r24	; 0x07
    6566:	98 87       	std	Y+8, r25	; 0x08
    6568:	ce 01       	movw	r24, r28
    656a:	09 96       	adiw	r24, 0x09	; 9
    656c:	fc 01       	movw	r30, r24
    656e:	11 92       	st	Z+, r1
    6570:	aa 95       	dec	r26
    6572:	e9 f7       	brne	.-6      	; 0x656e <__muldi3+0x36>
    6574:	a9 86       	std	Y+9, r10	; 0x09
    6576:	ba 86       	std	Y+10, r11	; 0x0a
    6578:	cb 86       	std	Y+11, r12	; 0x0b
    657a:	dc 86       	std	Y+12, r13	; 0x0c
    657c:	ed 86       	std	Y+13, r14	; 0x0d
    657e:	fe 86       	std	Y+14, r15	; 0x0e
    6580:	0f 87       	std	Y+15, r16	; 0x0f
    6582:	18 8b       	std	Y+16, r17	; 0x10
    6584:	29 81       	ldd	r18, Y+1	; 0x01
    6586:	3a 81       	ldd	r19, Y+2	; 0x02
    6588:	4b 81       	ldd	r20, Y+3	; 0x03
    658a:	5c 81       	ldd	r21, Y+4	; 0x04
    658c:	2d a7       	std	Y+45, r18	; 0x2d
    658e:	3e a7       	std	Y+46, r19	; 0x2e
    6590:	4f a7       	std	Y+47, r20	; 0x2f
    6592:	58 ab       	std	Y+48, r21	; 0x30
    6594:	79 01       	movw	r14, r18
    6596:	8a 01       	movw	r16, r20
    6598:	8f ef       	ldi	r24, 0xFF	; 255
    659a:	9f ef       	ldi	r25, 0xFF	; 255
    659c:	a0 e0       	ldi	r26, 0x00	; 0
    659e:	b0 e0       	ldi	r27, 0x00	; 0
    65a0:	e8 22       	and	r14, r24
    65a2:	f9 22       	and	r15, r25
    65a4:	0a 23       	and	r16, r26
    65a6:	1b 23       	and	r17, r27
    65a8:	1a 01       	movw	r2, r20
    65aa:	44 24       	eor	r4, r4
    65ac:	55 24       	eor	r5, r5
    65ae:	29 85       	ldd	r18, Y+9	; 0x09
    65b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    65b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    65b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    65b6:	29 a7       	std	Y+41, r18	; 0x29
    65b8:	3a a7       	std	Y+42, r19	; 0x2a
    65ba:	4b a7       	std	Y+43, r20	; 0x2b
    65bc:	5c a7       	std	Y+44, r21	; 0x2c
    65be:	59 01       	movw	r10, r18
    65c0:	6a 01       	movw	r12, r20
    65c2:	a8 22       	and	r10, r24
    65c4:	b9 22       	and	r11, r25
    65c6:	ca 22       	and	r12, r26
    65c8:	db 22       	and	r13, r27
    65ca:	3a 01       	movw	r6, r20
    65cc:	88 24       	eor	r8, r8
    65ce:	99 24       	eor	r9, r9
    65d0:	c6 01       	movw	r24, r12
    65d2:	b5 01       	movw	r22, r10
    65d4:	a8 01       	movw	r20, r16
    65d6:	97 01       	movw	r18, r14
    65d8:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    65dc:	6d a3       	std	Y+37, r22	; 0x25
    65de:	7e a3       	std	Y+38, r23	; 0x26
    65e0:	8f a3       	std	Y+39, r24	; 0x27
    65e2:	98 a7       	std	Y+40, r25	; 0x28
    65e4:	c4 01       	movw	r24, r8
    65e6:	b3 01       	movw	r22, r6
    65e8:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    65ec:	69 a3       	std	Y+33, r22	; 0x21
    65ee:	7a a3       	std	Y+34, r23	; 0x22
    65f0:	8b a3       	std	Y+35, r24	; 0x23
    65f2:	9c a3       	std	Y+36, r25	; 0x24
    65f4:	c6 01       	movw	r24, r12
    65f6:	b5 01       	movw	r22, r10
    65f8:	a2 01       	movw	r20, r4
    65fa:	91 01       	movw	r18, r2
    65fc:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    6600:	7b 01       	movw	r14, r22
    6602:	8c 01       	movw	r16, r24
    6604:	c4 01       	movw	r24, r8
    6606:	b3 01       	movw	r22, r6
    6608:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    660c:	5b 01       	movw	r10, r22
    660e:	6c 01       	movw	r12, r24
    6610:	89 a1       	ldd	r24, Y+33	; 0x21
    6612:	9a a1       	ldd	r25, Y+34	; 0x22
    6614:	ab a1       	ldd	r26, Y+35	; 0x23
    6616:	bc a1       	ldd	r27, Y+36	; 0x24
    6618:	8e 0d       	add	r24, r14
    661a:	9f 1d       	adc	r25, r15
    661c:	a0 1f       	adc	r26, r16
    661e:	b1 1f       	adc	r27, r17
    6620:	89 a3       	std	Y+33, r24	; 0x21
    6622:	9a a3       	std	Y+34, r25	; 0x22
    6624:	ab a3       	std	Y+35, r26	; 0x23
    6626:	bc a3       	std	Y+36, r27	; 0x24
    6628:	2d a1       	ldd	r18, Y+37	; 0x25
    662a:	3e a1       	ldd	r19, Y+38	; 0x26
    662c:	4f a1       	ldd	r20, Y+39	; 0x27
    662e:	58 a5       	ldd	r21, Y+40	; 0x28
    6630:	ca 01       	movw	r24, r20
    6632:	aa 27       	eor	r26, r26
    6634:	bb 27       	eor	r27, r27
    6636:	29 a1       	ldd	r18, Y+33	; 0x21
    6638:	3a a1       	ldd	r19, Y+34	; 0x22
    663a:	4b a1       	ldd	r20, Y+35	; 0x23
    663c:	5c a1       	ldd	r21, Y+36	; 0x24
    663e:	28 0f       	add	r18, r24
    6640:	39 1f       	adc	r19, r25
    6642:	4a 1f       	adc	r20, r26
    6644:	5b 1f       	adc	r21, r27
    6646:	29 a3       	std	Y+33, r18	; 0x21
    6648:	3a a3       	std	Y+34, r19	; 0x22
    664a:	4b a3       	std	Y+35, r20	; 0x23
    664c:	5c a3       	std	Y+36, r21	; 0x24
    664e:	2e 15       	cp	r18, r14
    6650:	3f 05       	cpc	r19, r15
    6652:	40 07       	cpc	r20, r16
    6654:	51 07       	cpc	r21, r17
    6656:	40 f4       	brcc	.+16     	; 0x6668 <__muldi3+0x130>
    6658:	80 e0       	ldi	r24, 0x00	; 0
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	a1 e0       	ldi	r26, 0x01	; 1
    665e:	b0 e0       	ldi	r27, 0x00	; 0
    6660:	a8 0e       	add	r10, r24
    6662:	b9 1e       	adc	r11, r25
    6664:	ca 1e       	adc	r12, r26
    6666:	db 1e       	adc	r13, r27
    6668:	89 a1       	ldd	r24, Y+33	; 0x21
    666a:	9a a1       	ldd	r25, Y+34	; 0x22
    666c:	ab a1       	ldd	r26, Y+35	; 0x23
    666e:	bc a1       	ldd	r27, Y+36	; 0x24
    6670:	9d 01       	movw	r18, r26
    6672:	44 27       	eor	r20, r20
    6674:	55 27       	eor	r21, r21
    6676:	2a 0d       	add	r18, r10
    6678:	3b 1d       	adc	r19, r11
    667a:	4c 1d       	adc	r20, r12
    667c:	5d 1d       	adc	r21, r13
    667e:	2d 8f       	std	Y+29, r18	; 0x1d
    6680:	3e 8f       	std	Y+30, r19	; 0x1e
    6682:	4f 8f       	std	Y+31, r20	; 0x1f
    6684:	58 a3       	std	Y+32, r21	; 0x20
    6686:	6c 01       	movw	r12, r24
    6688:	bb 24       	eor	r11, r11
    668a:	aa 24       	eor	r10, r10
    668c:	8d a1       	ldd	r24, Y+37	; 0x25
    668e:	9e a1       	ldd	r25, Y+38	; 0x26
    6690:	af a1       	ldd	r26, Y+39	; 0x27
    6692:	b8 a5       	ldd	r27, Y+40	; 0x28
    6694:	a0 70       	andi	r26, 0x00	; 0
    6696:	b0 70       	andi	r27, 0x00	; 0
    6698:	a8 0e       	add	r10, r24
    669a:	b9 1e       	adc	r11, r25
    669c:	ca 1e       	adc	r12, r26
    669e:	db 1e       	adc	r13, r27
    66a0:	a9 8e       	std	Y+25, r10	; 0x19
    66a2:	ba 8e       	std	Y+26, r11	; 0x1a
    66a4:	cb 8e       	std	Y+27, r12	; 0x1b
    66a6:	dc 8e       	std	Y+28, r13	; 0x1c
    66a8:	9a 8c       	ldd	r9, Y+26	; 0x1a
    66aa:	8b 8c       	ldd	r8, Y+27	; 0x1b
    66ac:	7c 8c       	ldd	r7, Y+28	; 0x1c
    66ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    66b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    66b2:	78 a1       	ldd	r23, Y+32	; 0x20
    66b4:	fe 01       	movw	r30, r28
    66b6:	71 96       	adiw	r30, 0x11	; 17
    66b8:	88 e0       	ldi	r24, 0x08	; 8
    66ba:	df 01       	movw	r26, r30
    66bc:	1d 92       	st	X+, r1
    66be:	8a 95       	dec	r24
    66c0:	e9 f7       	brne	.-6      	; 0x66bc <__muldi3+0x184>
    66c2:	2d 8b       	std	Y+21, r18	; 0x15
    66c4:	9e 8b       	std	Y+22, r25	; 0x16
    66c6:	6f 8b       	std	Y+23, r22	; 0x17
    66c8:	78 8f       	std	Y+24, r23	; 0x18
    66ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    66cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    66ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    66d0:	58 89       	ldd	r21, Y+16	; 0x10
    66d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    66d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    66d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    66d8:	98 a9       	ldd	r25, Y+48	; 0x30
    66da:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    66de:	7b 01       	movw	r14, r22
    66e0:	8c 01       	movw	r16, r24
    66e2:	2d 81       	ldd	r18, Y+5	; 0x05
    66e4:	3e 81       	ldd	r19, Y+6	; 0x06
    66e6:	4f 81       	ldd	r20, Y+7	; 0x07
    66e8:	58 85       	ldd	r21, Y+8	; 0x08
    66ea:	69 a5       	ldd	r22, Y+41	; 0x29
    66ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    66ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    66f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    66f2:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    66f6:	e6 0e       	add	r14, r22
    66f8:	f7 1e       	adc	r15, r23
    66fa:	08 1f       	adc	r16, r24
    66fc:	19 1f       	adc	r17, r25
    66fe:	6d 89       	ldd	r22, Y+21	; 0x15
    6700:	7e 89       	ldd	r23, Y+22	; 0x16
    6702:	8f 89       	ldd	r24, Y+23	; 0x17
    6704:	98 8d       	ldd	r25, Y+24	; 0x18
    6706:	6e 0d       	add	r22, r14
    6708:	7f 1d       	adc	r23, r15
    670a:	80 1f       	adc	r24, r16
    670c:	91 1f       	adc	r25, r17
    670e:	6d 8b       	std	Y+21, r22	; 0x15
    6710:	7e 8b       	std	Y+22, r23	; 0x16
    6712:	8f 8b       	std	Y+23, r24	; 0x17
    6714:	98 8f       	std	Y+24, r25	; 0x18
    6716:	ee 89       	ldd	r30, Y+22	; 0x16
    6718:	2a 2d       	mov	r18, r10
    671a:	39 2d       	mov	r19, r9
    671c:	48 2d       	mov	r20, r8
    671e:	57 2d       	mov	r21, r7
    6720:	7e 2f       	mov	r23, r30
    6722:	8f 89       	ldd	r24, Y+23	; 0x17
    6724:	98 8d       	ldd	r25, Y+24	; 0x18
    6726:	e0 96       	adiw	r28, 0x30	; 48
    6728:	e2 e1       	ldi	r30, 0x12	; 18
    672a:	0c 94 82 39 	jmp	0x7304	; 0x7304 <__epilogue_restores__>

0000672e <__lshrdi3>:
    672e:	ef 92       	push	r14
    6730:	ff 92       	push	r15
    6732:	0f 93       	push	r16
    6734:	df 93       	push	r29
    6736:	cf 93       	push	r28
    6738:	cd b7       	in	r28, 0x3d	; 61
    673a:	de b7       	in	r29, 0x3e	; 62
    673c:	60 97       	sbiw	r28, 0x10	; 16
    673e:	0f b6       	in	r0, 0x3f	; 63
    6740:	f8 94       	cli
    6742:	de bf       	out	0x3e, r29	; 62
    6744:	0f be       	out	0x3f, r0	; 63
    6746:	cd bf       	out	0x3d, r28	; 61
    6748:	a8 2f       	mov	r26, r24
    674a:	00 23       	and	r16, r16
    674c:	09 f4       	brne	.+2      	; 0x6750 <__lshrdi3+0x22>
    674e:	61 c0       	rjmp	.+194    	; 0x6812 <__lshrdi3+0xe4>
    6750:	7e 01       	movw	r14, r28
    6752:	08 94       	sec
    6754:	e1 1c       	adc	r14, r1
    6756:	f1 1c       	adc	r15, r1
    6758:	88 e0       	ldi	r24, 0x08	; 8
    675a:	f7 01       	movw	r30, r14
    675c:	11 92       	st	Z+, r1
    675e:	8a 95       	dec	r24
    6760:	e9 f7       	brne	.-6      	; 0x675c <__lshrdi3+0x2e>
    6762:	29 83       	std	Y+1, r18	; 0x01
    6764:	3a 83       	std	Y+2, r19	; 0x02
    6766:	4b 83       	std	Y+3, r20	; 0x03
    6768:	5c 83       	std	Y+4, r21	; 0x04
    676a:	6d 83       	std	Y+5, r22	; 0x05
    676c:	7e 83       	std	Y+6, r23	; 0x06
    676e:	af 83       	std	Y+7, r26	; 0x07
    6770:	98 87       	std	Y+8, r25	; 0x08
    6772:	80 e2       	ldi	r24, 0x20	; 32
    6774:	80 1b       	sub	r24, r16
    6776:	e8 2f       	mov	r30, r24
    6778:	ff 27       	eor	r31, r31
    677a:	e7 fd       	sbrc	r30, 7
    677c:	f0 95       	com	r31
    677e:	4d 81       	ldd	r20, Y+5	; 0x05
    6780:	5e 81       	ldd	r21, Y+6	; 0x06
    6782:	6f 81       	ldd	r22, Y+7	; 0x07
    6784:	78 85       	ldd	r23, Y+8	; 0x08
    6786:	18 16       	cp	r1, r24
    6788:	84 f0       	brlt	.+32     	; 0x67aa <__lshrdi3+0x7c>
    678a:	1d 86       	std	Y+13, r1	; 0x0d
    678c:	1e 86       	std	Y+14, r1	; 0x0e
    678e:	1f 86       	std	Y+15, r1	; 0x0f
    6790:	18 8a       	std	Y+16, r1	; 0x10
    6792:	88 27       	eor	r24, r24
    6794:	99 27       	eor	r25, r25
    6796:	8e 1b       	sub	r24, r30
    6798:	9f 0b       	sbc	r25, r31
    679a:	04 c0       	rjmp	.+8      	; 0x67a4 <__lshrdi3+0x76>
    679c:	76 95       	lsr	r23
    679e:	67 95       	ror	r22
    67a0:	57 95       	ror	r21
    67a2:	47 95       	ror	r20
    67a4:	8a 95       	dec	r24
    67a6:	d2 f7       	brpl	.-12     	; 0x679c <__lshrdi3+0x6e>
    67a8:	28 c0       	rjmp	.+80     	; 0x67fa <__lshrdi3+0xcc>
    67aa:	20 2f       	mov	r18, r16
    67ac:	33 27       	eor	r19, r19
    67ae:	27 fd       	sbrc	r18, 7
    67b0:	30 95       	com	r19
    67b2:	db 01       	movw	r26, r22
    67b4:	ca 01       	movw	r24, r20
    67b6:	02 2e       	mov	r0, r18
    67b8:	04 c0       	rjmp	.+8      	; 0x67c2 <__lshrdi3+0x94>
    67ba:	b6 95       	lsr	r27
    67bc:	a7 95       	ror	r26
    67be:	97 95       	ror	r25
    67c0:	87 95       	ror	r24
    67c2:	0a 94       	dec	r0
    67c4:	d2 f7       	brpl	.-12     	; 0x67ba <__lshrdi3+0x8c>
    67c6:	8d 87       	std	Y+13, r24	; 0x0d
    67c8:	9e 87       	std	Y+14, r25	; 0x0e
    67ca:	af 87       	std	Y+15, r26	; 0x0f
    67cc:	b8 8b       	std	Y+16, r27	; 0x10
    67ce:	04 c0       	rjmp	.+8      	; 0x67d8 <__lshrdi3+0xaa>
    67d0:	44 0f       	add	r20, r20
    67d2:	55 1f       	adc	r21, r21
    67d4:	66 1f       	adc	r22, r22
    67d6:	77 1f       	adc	r23, r23
    67d8:	ea 95       	dec	r30
    67da:	d2 f7       	brpl	.-12     	; 0x67d0 <__lshrdi3+0xa2>
    67dc:	89 81       	ldd	r24, Y+1	; 0x01
    67de:	9a 81       	ldd	r25, Y+2	; 0x02
    67e0:	ab 81       	ldd	r26, Y+3	; 0x03
    67e2:	bc 81       	ldd	r27, Y+4	; 0x04
    67e4:	04 c0       	rjmp	.+8      	; 0x67ee <__lshrdi3+0xc0>
    67e6:	b6 95       	lsr	r27
    67e8:	a7 95       	ror	r26
    67ea:	97 95       	ror	r25
    67ec:	87 95       	ror	r24
    67ee:	2a 95       	dec	r18
    67f0:	d2 f7       	brpl	.-12     	; 0x67e6 <__lshrdi3+0xb8>
    67f2:	48 2b       	or	r20, r24
    67f4:	59 2b       	or	r21, r25
    67f6:	6a 2b       	or	r22, r26
    67f8:	7b 2b       	or	r23, r27
    67fa:	49 87       	std	Y+9, r20	; 0x09
    67fc:	5a 87       	std	Y+10, r21	; 0x0a
    67fe:	6b 87       	std	Y+11, r22	; 0x0b
    6800:	7c 87       	std	Y+12, r23	; 0x0c
    6802:	29 85       	ldd	r18, Y+9	; 0x09
    6804:	3a 85       	ldd	r19, Y+10	; 0x0a
    6806:	4b 85       	ldd	r20, Y+11	; 0x0b
    6808:	5c 85       	ldd	r21, Y+12	; 0x0c
    680a:	6d 85       	ldd	r22, Y+13	; 0x0d
    680c:	7e 85       	ldd	r23, Y+14	; 0x0e
    680e:	af 85       	ldd	r26, Y+15	; 0x0f
    6810:	98 89       	ldd	r25, Y+16	; 0x10
    6812:	8a 2f       	mov	r24, r26
    6814:	60 96       	adiw	r28, 0x10	; 16
    6816:	0f b6       	in	r0, 0x3f	; 63
    6818:	f8 94       	cli
    681a:	de bf       	out	0x3e, r29	; 62
    681c:	0f be       	out	0x3f, r0	; 63
    681e:	cd bf       	out	0x3d, r28	; 61
    6820:	cf 91       	pop	r28
    6822:	df 91       	pop	r29
    6824:	0f 91       	pop	r16
    6826:	ff 90       	pop	r15
    6828:	ef 90       	pop	r14
    682a:	08 95       	ret

0000682c <__ashldi3>:
    682c:	ef 92       	push	r14
    682e:	ff 92       	push	r15
    6830:	0f 93       	push	r16
    6832:	df 93       	push	r29
    6834:	cf 93       	push	r28
    6836:	cd b7       	in	r28, 0x3d	; 61
    6838:	de b7       	in	r29, 0x3e	; 62
    683a:	60 97       	sbiw	r28, 0x10	; 16
    683c:	0f b6       	in	r0, 0x3f	; 63
    683e:	f8 94       	cli
    6840:	de bf       	out	0x3e, r29	; 62
    6842:	0f be       	out	0x3f, r0	; 63
    6844:	cd bf       	out	0x3d, r28	; 61
    6846:	a8 2f       	mov	r26, r24
    6848:	00 23       	and	r16, r16
    684a:	09 f4       	brne	.+2      	; 0x684e <__ashldi3+0x22>
    684c:	61 c0       	rjmp	.+194    	; 0x6910 <__ashldi3+0xe4>
    684e:	7e 01       	movw	r14, r28
    6850:	08 94       	sec
    6852:	e1 1c       	adc	r14, r1
    6854:	f1 1c       	adc	r15, r1
    6856:	88 e0       	ldi	r24, 0x08	; 8
    6858:	f7 01       	movw	r30, r14
    685a:	11 92       	st	Z+, r1
    685c:	8a 95       	dec	r24
    685e:	e9 f7       	brne	.-6      	; 0x685a <__ashldi3+0x2e>
    6860:	29 83       	std	Y+1, r18	; 0x01
    6862:	3a 83       	std	Y+2, r19	; 0x02
    6864:	4b 83       	std	Y+3, r20	; 0x03
    6866:	5c 83       	std	Y+4, r21	; 0x04
    6868:	6d 83       	std	Y+5, r22	; 0x05
    686a:	7e 83       	std	Y+6, r23	; 0x06
    686c:	af 83       	std	Y+7, r26	; 0x07
    686e:	98 87       	std	Y+8, r25	; 0x08
    6870:	80 e2       	ldi	r24, 0x20	; 32
    6872:	80 1b       	sub	r24, r16
    6874:	e8 2f       	mov	r30, r24
    6876:	ff 27       	eor	r31, r31
    6878:	e7 fd       	sbrc	r30, 7
    687a:	f0 95       	com	r31
    687c:	49 81       	ldd	r20, Y+1	; 0x01
    687e:	5a 81       	ldd	r21, Y+2	; 0x02
    6880:	6b 81       	ldd	r22, Y+3	; 0x03
    6882:	7c 81       	ldd	r23, Y+4	; 0x04
    6884:	18 16       	cp	r1, r24
    6886:	84 f0       	brlt	.+32     	; 0x68a8 <__ashldi3+0x7c>
    6888:	19 86       	std	Y+9, r1	; 0x09
    688a:	1a 86       	std	Y+10, r1	; 0x0a
    688c:	1b 86       	std	Y+11, r1	; 0x0b
    688e:	1c 86       	std	Y+12, r1	; 0x0c
    6890:	88 27       	eor	r24, r24
    6892:	99 27       	eor	r25, r25
    6894:	8e 1b       	sub	r24, r30
    6896:	9f 0b       	sbc	r25, r31
    6898:	04 c0       	rjmp	.+8      	; 0x68a2 <__ashldi3+0x76>
    689a:	44 0f       	add	r20, r20
    689c:	55 1f       	adc	r21, r21
    689e:	66 1f       	adc	r22, r22
    68a0:	77 1f       	adc	r23, r23
    68a2:	8a 95       	dec	r24
    68a4:	d2 f7       	brpl	.-12     	; 0x689a <__ashldi3+0x6e>
    68a6:	28 c0       	rjmp	.+80     	; 0x68f8 <__ashldi3+0xcc>
    68a8:	20 2f       	mov	r18, r16
    68aa:	33 27       	eor	r19, r19
    68ac:	27 fd       	sbrc	r18, 7
    68ae:	30 95       	com	r19
    68b0:	db 01       	movw	r26, r22
    68b2:	ca 01       	movw	r24, r20
    68b4:	02 2e       	mov	r0, r18
    68b6:	04 c0       	rjmp	.+8      	; 0x68c0 <__ashldi3+0x94>
    68b8:	88 0f       	add	r24, r24
    68ba:	99 1f       	adc	r25, r25
    68bc:	aa 1f       	adc	r26, r26
    68be:	bb 1f       	adc	r27, r27
    68c0:	0a 94       	dec	r0
    68c2:	d2 f7       	brpl	.-12     	; 0x68b8 <__ashldi3+0x8c>
    68c4:	89 87       	std	Y+9, r24	; 0x09
    68c6:	9a 87       	std	Y+10, r25	; 0x0a
    68c8:	ab 87       	std	Y+11, r26	; 0x0b
    68ca:	bc 87       	std	Y+12, r27	; 0x0c
    68cc:	04 c0       	rjmp	.+8      	; 0x68d6 <__ashldi3+0xaa>
    68ce:	76 95       	lsr	r23
    68d0:	67 95       	ror	r22
    68d2:	57 95       	ror	r21
    68d4:	47 95       	ror	r20
    68d6:	ea 95       	dec	r30
    68d8:	d2 f7       	brpl	.-12     	; 0x68ce <__ashldi3+0xa2>
    68da:	8d 81       	ldd	r24, Y+5	; 0x05
    68dc:	9e 81       	ldd	r25, Y+6	; 0x06
    68de:	af 81       	ldd	r26, Y+7	; 0x07
    68e0:	b8 85       	ldd	r27, Y+8	; 0x08
    68e2:	04 c0       	rjmp	.+8      	; 0x68ec <__ashldi3+0xc0>
    68e4:	88 0f       	add	r24, r24
    68e6:	99 1f       	adc	r25, r25
    68e8:	aa 1f       	adc	r26, r26
    68ea:	bb 1f       	adc	r27, r27
    68ec:	2a 95       	dec	r18
    68ee:	d2 f7       	brpl	.-12     	; 0x68e4 <__ashldi3+0xb8>
    68f0:	48 2b       	or	r20, r24
    68f2:	59 2b       	or	r21, r25
    68f4:	6a 2b       	or	r22, r26
    68f6:	7b 2b       	or	r23, r27
    68f8:	4d 87       	std	Y+13, r20	; 0x0d
    68fa:	5e 87       	std	Y+14, r21	; 0x0e
    68fc:	6f 87       	std	Y+15, r22	; 0x0f
    68fe:	78 8b       	std	Y+16, r23	; 0x10
    6900:	29 85       	ldd	r18, Y+9	; 0x09
    6902:	3a 85       	ldd	r19, Y+10	; 0x0a
    6904:	4b 85       	ldd	r20, Y+11	; 0x0b
    6906:	5c 85       	ldd	r21, Y+12	; 0x0c
    6908:	6d 85       	ldd	r22, Y+13	; 0x0d
    690a:	7e 85       	ldd	r23, Y+14	; 0x0e
    690c:	af 85       	ldd	r26, Y+15	; 0x0f
    690e:	98 89       	ldd	r25, Y+16	; 0x10
    6910:	8a 2f       	mov	r24, r26
    6912:	60 96       	adiw	r28, 0x10	; 16
    6914:	0f b6       	in	r0, 0x3f	; 63
    6916:	f8 94       	cli
    6918:	de bf       	out	0x3e, r29	; 62
    691a:	0f be       	out	0x3f, r0	; 63
    691c:	cd bf       	out	0x3d, r28	; 61
    691e:	cf 91       	pop	r28
    6920:	df 91       	pop	r29
    6922:	0f 91       	pop	r16
    6924:	ff 90       	pop	r15
    6926:	ef 90       	pop	r14
    6928:	08 95       	ret

0000692a <strtol>:
    692a:	2f 92       	push	r2
    692c:	3f 92       	push	r3
    692e:	5f 92       	push	r5
    6930:	6f 92       	push	r6
    6932:	7f 92       	push	r7
    6934:	8f 92       	push	r8
    6936:	9f 92       	push	r9
    6938:	af 92       	push	r10
    693a:	bf 92       	push	r11
    693c:	cf 92       	push	r12
    693e:	df 92       	push	r13
    6940:	ef 92       	push	r14
    6942:	ff 92       	push	r15
    6944:	0f 93       	push	r16
    6946:	1f 93       	push	r17
    6948:	cf 93       	push	r28
    694a:	df 93       	push	r29
    694c:	8c 01       	movw	r16, r24
    694e:	1b 01       	movw	r2, r22
    6950:	ea 01       	movw	r28, r20
    6952:	61 15       	cp	r22, r1
    6954:	71 05       	cpc	r23, r1
    6956:	19 f0       	breq	.+6      	; 0x695e <strtol+0x34>
    6958:	fb 01       	movw	r30, r22
    695a:	91 83       	std	Z+1, r25	; 0x01
    695c:	80 83       	st	Z, r24
    695e:	20 97       	sbiw	r28, 0x00	; 0
    6960:	49 f0       	breq	.+18     	; 0x6974 <strtol+0x4a>
    6962:	ce 01       	movw	r24, r28
    6964:	02 97       	sbiw	r24, 0x02	; 2
    6966:	83 97       	sbiw	r24, 0x23	; 35
    6968:	28 f0       	brcs	.+10     	; 0x6974 <strtol+0x4a>
    696a:	20 e0       	ldi	r18, 0x00	; 0
    696c:	30 e0       	ldi	r19, 0x00	; 0
    696e:	40 e0       	ldi	r20, 0x00	; 0
    6970:	50 e0       	ldi	r21, 0x00	; 0
    6972:	f6 c0       	rjmp	.+492    	; 0x6b60 <strtol+0x236>
    6974:	f8 01       	movw	r30, r16
    6976:	a1 90       	ld	r10, Z+
    6978:	8f 01       	movw	r16, r30
    697a:	8a 2d       	mov	r24, r10
    697c:	90 e0       	ldi	r25, 0x00	; 0
    697e:	0e 94 9d 39 	call	0x733a	; 0x733a <isspace>
    6982:	89 2b       	or	r24, r25
    6984:	b9 f7       	brne	.-18     	; 0x6974 <strtol+0x4a>
    6986:	fd e2       	ldi	r31, 0x2D	; 45
    6988:	af 16       	cp	r10, r31
    698a:	31 f4       	brne	.+12     	; 0x6998 <strtol+0x6e>
    698c:	f8 01       	movw	r30, r16
    698e:	a1 90       	ld	r10, Z+
    6990:	8f 01       	movw	r16, r30
    6992:	55 24       	eor	r5, r5
    6994:	53 94       	inc	r5
    6996:	07 c0       	rjmp	.+14     	; 0x69a6 <strtol+0x7c>
    6998:	fb e2       	ldi	r31, 0x2B	; 43
    699a:	af 16       	cp	r10, r31
    699c:	19 f4       	brne	.+6      	; 0x69a4 <strtol+0x7a>
    699e:	f8 01       	movw	r30, r16
    69a0:	a1 90       	ld	r10, Z+
    69a2:	8f 01       	movw	r16, r30
    69a4:	55 24       	eor	r5, r5
    69a6:	20 97       	sbiw	r28, 0x00	; 0
    69a8:	19 f0       	breq	.+6      	; 0x69b0 <strtol+0x86>
    69aa:	c0 31       	cpi	r28, 0x10	; 16
    69ac:	d1 05       	cpc	r29, r1
    69ae:	c1 f4       	brne	.+48     	; 0x69e0 <strtol+0xb6>
    69b0:	f0 e3       	ldi	r31, 0x30	; 48
    69b2:	af 16       	cp	r10, r31
    69b4:	79 f4       	brne	.+30     	; 0x69d4 <strtol+0xaa>
    69b6:	f8 01       	movw	r30, r16
    69b8:	80 81       	ld	r24, Z
    69ba:	88 37       	cpi	r24, 0x78	; 120
    69bc:	11 f0       	breq	.+4      	; 0x69c2 <strtol+0x98>
    69be:	88 35       	cpi	r24, 0x58	; 88
    69c0:	49 f4       	brne	.+18     	; 0x69d4 <strtol+0xaa>
    69c2:	f8 01       	movw	r30, r16
    69c4:	a1 80       	ldd	r10, Z+1	; 0x01
    69c6:	0e 5f       	subi	r16, 0xFE	; 254
    69c8:	1f 4f       	sbci	r17, 0xFF	; 255
    69ca:	f2 e0       	ldi	r31, 0x02	; 2
    69cc:	5f 2a       	or	r5, r31
    69ce:	c0 e1       	ldi	r28, 0x10	; 16
    69d0:	d0 e0       	ldi	r29, 0x00	; 0
    69d2:	06 c0       	rjmp	.+12     	; 0x69e0 <strtol+0xb6>
    69d4:	20 97       	sbiw	r28, 0x00	; 0
    69d6:	21 f4       	brne	.+8      	; 0x69e0 <strtol+0xb6>
    69d8:	80 e3       	ldi	r24, 0x30	; 48
    69da:	a8 16       	cp	r10, r24
    69dc:	e9 f4       	brne	.+58     	; 0x6a18 <strtol+0xee>
    69de:	27 c0       	rjmp	.+78     	; 0x6a2e <strtol+0x104>
    69e0:	c8 30       	cpi	r28, 0x08	; 8
    69e2:	d1 05       	cpc	r29, r1
    69e4:	31 f1       	breq	.+76     	; 0x6a32 <strtol+0x108>
    69e6:	c9 30       	cpi	r28, 0x09	; 9
    69e8:	d1 05       	cpc	r29, r1
    69ea:	24 f4       	brge	.+8      	; 0x69f4 <strtol+0xca>
    69ec:	c2 30       	cpi	r28, 0x02	; 2
    69ee:	d1 05       	cpc	r29, r1
    69f0:	31 f5       	brne	.+76     	; 0x6a3e <strtol+0x114>
    69f2:	0c c0       	rjmp	.+24     	; 0x6a0c <strtol+0xe2>
    69f4:	ca 30       	cpi	r28, 0x0A	; 10
    69f6:	d1 05       	cpc	r29, r1
    69f8:	89 f0       	breq	.+34     	; 0x6a1c <strtol+0xf2>
    69fa:	c0 31       	cpi	r28, 0x10	; 16
    69fc:	d1 05       	cpc	r29, r1
    69fe:	f9 f4       	brne	.+62     	; 0x6a3e <strtol+0x114>
    6a00:	c1 2c       	mov	r12, r1
    6a02:	d1 2c       	mov	r13, r1
    6a04:	e1 2c       	mov	r14, r1
    6a06:	b8 e0       	ldi	r27, 0x08	; 8
    6a08:	fb 2e       	mov	r15, r27
    6a0a:	28 c0       	rjmp	.+80     	; 0x6a5c <strtol+0x132>
    6a0c:	c1 2c       	mov	r12, r1
    6a0e:	d1 2c       	mov	r13, r1
    6a10:	e1 2c       	mov	r14, r1
    6a12:	a0 e4       	ldi	r26, 0x40	; 64
    6a14:	fa 2e       	mov	r15, r26
    6a16:	22 c0       	rjmp	.+68     	; 0x6a5c <strtol+0x132>
    6a18:	ca e0       	ldi	r28, 0x0A	; 10
    6a1a:	d0 e0       	ldi	r29, 0x00	; 0
    6a1c:	fc ec       	ldi	r31, 0xCC	; 204
    6a1e:	cf 2e       	mov	r12, r31
    6a20:	fc ec       	ldi	r31, 0xCC	; 204
    6a22:	df 2e       	mov	r13, r31
    6a24:	fc ec       	ldi	r31, 0xCC	; 204
    6a26:	ef 2e       	mov	r14, r31
    6a28:	fc e0       	ldi	r31, 0x0C	; 12
    6a2a:	ff 2e       	mov	r15, r31
    6a2c:	17 c0       	rjmp	.+46     	; 0x6a5c <strtol+0x132>
    6a2e:	c8 e0       	ldi	r28, 0x08	; 8
    6a30:	d0 e0       	ldi	r29, 0x00	; 0
    6a32:	c1 2c       	mov	r12, r1
    6a34:	d1 2c       	mov	r13, r1
    6a36:	e1 2c       	mov	r14, r1
    6a38:	e0 e1       	ldi	r30, 0x10	; 16
    6a3a:	fe 2e       	mov	r15, r30
    6a3c:	0f c0       	rjmp	.+30     	; 0x6a5c <strtol+0x132>
    6a3e:	9e 01       	movw	r18, r28
    6a40:	44 27       	eor	r20, r20
    6a42:	37 fd       	sbrc	r19, 7
    6a44:	40 95       	com	r20
    6a46:	54 2f       	mov	r21, r20
    6a48:	60 e0       	ldi	r22, 0x00	; 0
    6a4a:	70 e0       	ldi	r23, 0x00	; 0
    6a4c:	80 e0       	ldi	r24, 0x00	; 0
    6a4e:	90 e8       	ldi	r25, 0x80	; 128
    6a50:	0e 94 44 39 	call	0x7288	; 0x7288 <__udivmodsi4>
    6a54:	c9 01       	movw	r24, r18
    6a56:	da 01       	movw	r26, r20
    6a58:	6c 01       	movw	r12, r24
    6a5a:	7d 01       	movw	r14, r26
    6a5c:	20 e0       	ldi	r18, 0x00	; 0
    6a5e:	30 e0       	ldi	r19, 0x00	; 0
    6a60:	40 e0       	ldi	r20, 0x00	; 0
    6a62:	50 e0       	ldi	r21, 0x00	; 0
    6a64:	60 e0       	ldi	r22, 0x00	; 0
    6a66:	3e 01       	movw	r6, r28
    6a68:	88 24       	eor	r8, r8
    6a6a:	77 fc       	sbrc	r7, 7
    6a6c:	80 94       	com	r8
    6a6e:	98 2c       	mov	r9, r8
    6a70:	70 ed       	ldi	r23, 0xD0	; 208
    6a72:	b7 2e       	mov	r11, r23
    6a74:	ba 0c       	add	r11, r10
    6a76:	e9 e0       	ldi	r30, 0x09	; 9
    6a78:	eb 15       	cp	r30, r11
    6a7a:	70 f4       	brcc	.+28     	; 0x6a98 <strtol+0x16e>
    6a7c:	8a 2d       	mov	r24, r10
    6a7e:	81 54       	subi	r24, 0x41	; 65
    6a80:	8a 31       	cpi	r24, 0x1A	; 26
    6a82:	18 f4       	brcc	.+6      	; 0x6a8a <strtol+0x160>
    6a84:	99 ec       	ldi	r25, 0xC9	; 201
    6a86:	b9 2e       	mov	r11, r25
    6a88:	06 c0       	rjmp	.+12     	; 0x6a96 <strtol+0x16c>
    6a8a:	8a 2d       	mov	r24, r10
    6a8c:	81 56       	subi	r24, 0x61	; 97
    6a8e:	8a 31       	cpi	r24, 0x1A	; 26
    6a90:	50 f5       	brcc	.+84     	; 0x6ae6 <strtol+0x1bc>
    6a92:	89 ea       	ldi	r24, 0xA9	; 169
    6a94:	b8 2e       	mov	r11, r24
    6a96:	ba 0c       	add	r11, r10
    6a98:	8b 2d       	mov	r24, r11
    6a9a:	90 e0       	ldi	r25, 0x00	; 0
    6a9c:	8c 17       	cp	r24, r28
    6a9e:	9d 07       	cpc	r25, r29
    6aa0:	14 f5       	brge	.+68     	; 0x6ae6 <strtol+0x1bc>
    6aa2:	6f 3f       	cpi	r22, 0xFF	; 255
    6aa4:	e1 f0       	breq	.+56     	; 0x6ade <strtol+0x1b4>
    6aa6:	c2 16       	cp	r12, r18
    6aa8:	d3 06       	cpc	r13, r19
    6aaa:	e4 06       	cpc	r14, r20
    6aac:	f5 06       	cpc	r15, r21
    6aae:	b0 f0       	brcs	.+44     	; 0x6adc <strtol+0x1b2>
    6ab0:	ca 01       	movw	r24, r20
    6ab2:	b9 01       	movw	r22, r18
    6ab4:	a4 01       	movw	r20, r8
    6ab6:	93 01       	movw	r18, r6
    6ab8:	0e 94 fe 38 	call	0x71fc	; 0x71fc <__mulsi3>
    6abc:	9b 01       	movw	r18, r22
    6abe:	ac 01       	movw	r20, r24
    6ac0:	2b 0d       	add	r18, r11
    6ac2:	31 1d       	adc	r19, r1
    6ac4:	41 1d       	adc	r20, r1
    6ac6:	51 1d       	adc	r21, r1
    6ac8:	21 30       	cpi	r18, 0x01	; 1
    6aca:	f0 e0       	ldi	r31, 0x00	; 0
    6acc:	3f 07       	cpc	r19, r31
    6ace:	f0 e0       	ldi	r31, 0x00	; 0
    6ad0:	4f 07       	cpc	r20, r31
    6ad2:	f0 e8       	ldi	r31, 0x80	; 128
    6ad4:	5f 07       	cpc	r21, r31
    6ad6:	10 f4       	brcc	.+4      	; 0x6adc <strtol+0x1b2>
    6ad8:	61 e0       	ldi	r22, 0x01	; 1
    6ada:	01 c0       	rjmp	.+2      	; 0x6ade <strtol+0x1b4>
    6adc:	6f ef       	ldi	r22, 0xFF	; 255
    6ade:	f8 01       	movw	r30, r16
    6ae0:	a1 90       	ld	r10, Z+
    6ae2:	8f 01       	movw	r16, r30
    6ae4:	c5 cf       	rjmp	.-118    	; 0x6a70 <strtol+0x146>
    6ae6:	21 14       	cp	r2, r1
    6ae8:	31 04       	cpc	r3, r1
    6aea:	81 f0       	breq	.+32     	; 0x6b0c <strtol+0x1e2>
    6aec:	66 23       	and	r22, r22
    6aee:	31 f0       	breq	.+12     	; 0x6afc <strtol+0x1d2>
    6af0:	01 50       	subi	r16, 0x01	; 1
    6af2:	10 40       	sbci	r17, 0x00	; 0
    6af4:	f1 01       	movw	r30, r2
    6af6:	11 83       	std	Z+1, r17	; 0x01
    6af8:	00 83       	st	Z, r16
    6afa:	08 c0       	rjmp	.+16     	; 0x6b0c <strtol+0x1e2>
    6afc:	51 fe       	sbrs	r5, 1
    6afe:	1a c0       	rjmp	.+52     	; 0x6b34 <strtol+0x20a>
    6b00:	02 50       	subi	r16, 0x02	; 2
    6b02:	10 40       	sbci	r17, 0x00	; 0
    6b04:	f1 01       	movw	r30, r2
    6b06:	11 83       	std	Z+1, r17	; 0x01
    6b08:	00 83       	st	Z, r16
    6b0a:	14 c0       	rjmp	.+40     	; 0x6b34 <strtol+0x20a>
    6b0c:	67 ff       	sbrs	r22, 7
    6b0e:	12 c0       	rjmp	.+36     	; 0x6b34 <strtol+0x20a>
    6b10:	50 fc       	sbrc	r5, 0
    6b12:	05 c0       	rjmp	.+10     	; 0x6b1e <strtol+0x1f4>
    6b14:	2f ef       	ldi	r18, 0xFF	; 255
    6b16:	3f ef       	ldi	r19, 0xFF	; 255
    6b18:	4f ef       	ldi	r20, 0xFF	; 255
    6b1a:	5f e7       	ldi	r21, 0x7F	; 127
    6b1c:	04 c0       	rjmp	.+8      	; 0x6b26 <strtol+0x1fc>
    6b1e:	20 e0       	ldi	r18, 0x00	; 0
    6b20:	30 e0       	ldi	r19, 0x00	; 0
    6b22:	40 e0       	ldi	r20, 0x00	; 0
    6b24:	50 e8       	ldi	r21, 0x80	; 128
    6b26:	82 e2       	ldi	r24, 0x22	; 34
    6b28:	90 e0       	ldi	r25, 0x00	; 0
    6b2a:	90 93 f2 06 	sts	0x06F2, r25
    6b2e:	80 93 f1 06 	sts	0x06F1, r24
    6b32:	16 c0       	rjmp	.+44     	; 0x6b60 <strtol+0x236>
    6b34:	50 fe       	sbrs	r5, 0
    6b36:	08 c0       	rjmp	.+16     	; 0x6b48 <strtol+0x21e>
    6b38:	50 95       	com	r21
    6b3a:	40 95       	com	r20
    6b3c:	30 95       	com	r19
    6b3e:	21 95       	neg	r18
    6b40:	3f 4f       	sbci	r19, 0xFF	; 255
    6b42:	4f 4f       	sbci	r20, 0xFF	; 255
    6b44:	5f 4f       	sbci	r21, 0xFF	; 255
    6b46:	0c c0       	rjmp	.+24     	; 0x6b60 <strtol+0x236>
    6b48:	57 ff       	sbrs	r21, 7
    6b4a:	0a c0       	rjmp	.+20     	; 0x6b60 <strtol+0x236>
    6b4c:	82 e2       	ldi	r24, 0x22	; 34
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	90 93 f2 06 	sts	0x06F2, r25
    6b54:	80 93 f1 06 	sts	0x06F1, r24
    6b58:	2f ef       	ldi	r18, 0xFF	; 255
    6b5a:	3f ef       	ldi	r19, 0xFF	; 255
    6b5c:	4f ef       	ldi	r20, 0xFF	; 255
    6b5e:	5f e7       	ldi	r21, 0x7F	; 127
    6b60:	b9 01       	movw	r22, r18
    6b62:	ca 01       	movw	r24, r20
    6b64:	df 91       	pop	r29
    6b66:	cf 91       	pop	r28
    6b68:	1f 91       	pop	r17
    6b6a:	0f 91       	pop	r16
    6b6c:	ff 90       	pop	r15
    6b6e:	ef 90       	pop	r14
    6b70:	df 90       	pop	r13
    6b72:	cf 90       	pop	r12
    6b74:	bf 90       	pop	r11
    6b76:	af 90       	pop	r10
    6b78:	9f 90       	pop	r9
    6b7a:	8f 90       	pop	r8
    6b7c:	7f 90       	pop	r7
    6b7e:	6f 90       	pop	r6
    6b80:	5f 90       	pop	r5
    6b82:	3f 90       	pop	r3
    6b84:	2f 90       	pop	r2
    6b86:	08 95       	ret

00006b88 <memcpy>:
    6b88:	fb 01       	movw	r30, r22
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	02 c0       	rjmp	.+4      	; 0x6b92 <memcpy+0xa>
    6b8e:	01 90       	ld	r0, Z+
    6b90:	0d 92       	st	X+, r0
    6b92:	41 50       	subi	r20, 0x01	; 1
    6b94:	50 40       	sbci	r21, 0x00	; 0
    6b96:	d8 f7       	brcc	.-10     	; 0x6b8e <memcpy+0x6>
    6b98:	08 95       	ret

00006b9a <memset>:
    6b9a:	dc 01       	movw	r26, r24
    6b9c:	01 c0       	rjmp	.+2      	; 0x6ba0 <memset+0x6>
    6b9e:	6d 93       	st	X+, r22
    6ba0:	41 50       	subi	r20, 0x01	; 1
    6ba2:	50 40       	sbci	r21, 0x00	; 0
    6ba4:	e0 f7       	brcc	.-8      	; 0x6b9e <memset+0x4>
    6ba6:	08 95       	ret

00006ba8 <strcat>:
    6ba8:	fb 01       	movw	r30, r22
    6baa:	dc 01       	movw	r26, r24
    6bac:	0d 90       	ld	r0, X+
    6bae:	00 20       	and	r0, r0
    6bb0:	e9 f7       	brne	.-6      	; 0x6bac <strcat+0x4>
    6bb2:	11 97       	sbiw	r26, 0x01	; 1
    6bb4:	01 90       	ld	r0, Z+
    6bb6:	0d 92       	st	X+, r0
    6bb8:	00 20       	and	r0, r0
    6bba:	e1 f7       	brne	.-8      	; 0x6bb4 <strcat+0xc>
    6bbc:	08 95       	ret

00006bbe <strchr>:
    6bbe:	fc 01       	movw	r30, r24
    6bc0:	81 91       	ld	r24, Z+
    6bc2:	86 17       	cp	r24, r22
    6bc4:	21 f0       	breq	.+8      	; 0x6bce <strchr+0x10>
    6bc6:	88 23       	and	r24, r24
    6bc8:	d9 f7       	brne	.-10     	; 0x6bc0 <strchr+0x2>
    6bca:	99 27       	eor	r25, r25
    6bcc:	08 95       	ret
    6bce:	31 97       	sbiw	r30, 0x01	; 1
    6bd0:	cf 01       	movw	r24, r30
    6bd2:	08 95       	ret

00006bd4 <strcmp>:
    6bd4:	fb 01       	movw	r30, r22
    6bd6:	dc 01       	movw	r26, r24
    6bd8:	8d 91       	ld	r24, X+
    6bda:	01 90       	ld	r0, Z+
    6bdc:	80 19       	sub	r24, r0
    6bde:	01 10       	cpse	r0, r1
    6be0:	d9 f3       	breq	.-10     	; 0x6bd8 <strcmp+0x4>
    6be2:	99 0b       	sbc	r25, r25
    6be4:	08 95       	ret

00006be6 <strncmp>:
    6be6:	fb 01       	movw	r30, r22
    6be8:	dc 01       	movw	r26, r24
    6bea:	41 50       	subi	r20, 0x01	; 1
    6bec:	50 40       	sbci	r21, 0x00	; 0
    6bee:	30 f0       	brcs	.+12     	; 0x6bfc <strncmp+0x16>
    6bf0:	8d 91       	ld	r24, X+
    6bf2:	01 90       	ld	r0, Z+
    6bf4:	80 19       	sub	r24, r0
    6bf6:	19 f4       	brne	.+6      	; 0x6bfe <strncmp+0x18>
    6bf8:	00 20       	and	r0, r0
    6bfa:	b9 f7       	brne	.-18     	; 0x6bea <strncmp+0x4>
    6bfc:	88 1b       	sub	r24, r24
    6bfe:	99 0b       	sbc	r25, r25
    6c00:	08 95       	ret

00006c02 <strncpy>:
    6c02:	fb 01       	movw	r30, r22
    6c04:	dc 01       	movw	r26, r24
    6c06:	41 50       	subi	r20, 0x01	; 1
    6c08:	50 40       	sbci	r21, 0x00	; 0
    6c0a:	48 f0       	brcs	.+18     	; 0x6c1e <strncpy+0x1c>
    6c0c:	01 90       	ld	r0, Z+
    6c0e:	0d 92       	st	X+, r0
    6c10:	00 20       	and	r0, r0
    6c12:	c9 f7       	brne	.-14     	; 0x6c06 <strncpy+0x4>
    6c14:	01 c0       	rjmp	.+2      	; 0x6c18 <strncpy+0x16>
    6c16:	1d 92       	st	X+, r1
    6c18:	41 50       	subi	r20, 0x01	; 1
    6c1a:	50 40       	sbci	r21, 0x00	; 0
    6c1c:	e0 f7       	brcc	.-8      	; 0x6c16 <strncpy+0x14>
    6c1e:	08 95       	ret

00006c20 <strrchr>:
    6c20:	fc 01       	movw	r30, r24
    6c22:	81 e0       	ldi	r24, 0x01	; 1
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	01 90       	ld	r0, Z+
    6c28:	06 16       	cp	r0, r22
    6c2a:	09 f4       	brne	.+2      	; 0x6c2e <strrchr+0xe>
    6c2c:	cf 01       	movw	r24, r30
    6c2e:	00 20       	and	r0, r0
    6c30:	d1 f7       	brne	.-12     	; 0x6c26 <strrchr+0x6>
    6c32:	01 97       	sbiw	r24, 0x01	; 1
    6c34:	08 95       	ret

00006c36 <printf>:
    6c36:	a0 e0       	ldi	r26, 0x00	; 0
    6c38:	b0 e0       	ldi	r27, 0x00	; 0
    6c3a:	e1 e2       	ldi	r30, 0x21	; 33
    6c3c:	f6 e3       	ldi	r31, 0x36	; 54
    6c3e:	0c 94 76 39 	jmp	0x72ec	; 0x72ec <__prologue_saves__+0x20>
    6c42:	fe 01       	movw	r30, r28
    6c44:	35 96       	adiw	r30, 0x05	; 5
    6c46:	61 91       	ld	r22, Z+
    6c48:	71 91       	ld	r23, Z+
    6c4a:	80 91 ed 06 	lds	r24, 0x06ED
    6c4e:	90 91 ee 06 	lds	r25, 0x06EE
    6c52:	af 01       	movw	r20, r30
    6c54:	0e 94 81 36 	call	0x6d02	; 0x6d02 <vfprintf>
    6c58:	20 96       	adiw	r28, 0x00	; 0
    6c5a:	e2 e0       	ldi	r30, 0x02	; 2
    6c5c:	0c 94 92 39 	jmp	0x7324	; 0x7324 <__epilogue_restores__+0x20>

00006c60 <printf_P>:
    6c60:	a0 e0       	ldi	r26, 0x00	; 0
    6c62:	b0 e0       	ldi	r27, 0x00	; 0
    6c64:	e6 e3       	ldi	r30, 0x36	; 54
    6c66:	f6 e3       	ldi	r31, 0x36	; 54
    6c68:	0c 94 76 39 	jmp	0x72ec	; 0x72ec <__prologue_saves__+0x20>
    6c6c:	fe 01       	movw	r30, r28
    6c6e:	35 96       	adiw	r30, 0x05	; 5
    6c70:	61 91       	ld	r22, Z+
    6c72:	71 91       	ld	r23, Z+
    6c74:	a0 91 ed 06 	lds	r26, 0x06ED
    6c78:	b0 91 ee 06 	lds	r27, 0x06EE
    6c7c:	13 96       	adiw	r26, 0x03	; 3
    6c7e:	8c 91       	ld	r24, X
    6c80:	13 97       	sbiw	r26, 0x03	; 3
    6c82:	88 60       	ori	r24, 0x08	; 8
    6c84:	13 96       	adiw	r26, 0x03	; 3
    6c86:	8c 93       	st	X, r24
    6c88:	80 91 ed 06 	lds	r24, 0x06ED
    6c8c:	90 91 ee 06 	lds	r25, 0x06EE
    6c90:	af 01       	movw	r20, r30
    6c92:	0e 94 81 36 	call	0x6d02	; 0x6d02 <vfprintf>
    6c96:	e0 91 ed 06 	lds	r30, 0x06ED
    6c9a:	f0 91 ee 06 	lds	r31, 0x06EE
    6c9e:	23 81       	ldd	r18, Z+3	; 0x03
    6ca0:	27 7f       	andi	r18, 0xF7	; 247
    6ca2:	23 83       	std	Z+3, r18	; 0x03
    6ca4:	20 96       	adiw	r28, 0x00	; 0
    6ca6:	e2 e0       	ldi	r30, 0x02	; 2
    6ca8:	0c 94 92 39 	jmp	0x7324	; 0x7324 <__epilogue_restores__+0x20>

00006cac <putchar>:
    6cac:	60 91 ed 06 	lds	r22, 0x06ED
    6cb0:	70 91 ee 06 	lds	r23, 0x06EE
    6cb4:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    6cb8:	08 95       	ret

00006cba <sprintf>:
    6cba:	ae e0       	ldi	r26, 0x0E	; 14
    6cbc:	b0 e0       	ldi	r27, 0x00	; 0
    6cbe:	e3 e6       	ldi	r30, 0x63	; 99
    6cc0:	f6 e3       	ldi	r31, 0x36	; 54
    6cc2:	0c 94 74 39 	jmp	0x72e8	; 0x72e8 <__prologue_saves__+0x1c>
    6cc6:	0d 89       	ldd	r16, Y+21	; 0x15
    6cc8:	1e 89       	ldd	r17, Y+22	; 0x16
    6cca:	86 e0       	ldi	r24, 0x06	; 6
    6ccc:	8c 83       	std	Y+4, r24	; 0x04
    6cce:	1a 83       	std	Y+2, r17	; 0x02
    6cd0:	09 83       	std	Y+1, r16	; 0x01
    6cd2:	8f ef       	ldi	r24, 0xFF	; 255
    6cd4:	9f e7       	ldi	r25, 0x7F	; 127
    6cd6:	9e 83       	std	Y+6, r25	; 0x06
    6cd8:	8d 83       	std	Y+5, r24	; 0x05
    6cda:	9e 01       	movw	r18, r28
    6cdc:	27 5e       	subi	r18, 0xE7	; 231
    6cde:	3f 4f       	sbci	r19, 0xFF	; 255
    6ce0:	ce 01       	movw	r24, r28
    6ce2:	01 96       	adiw	r24, 0x01	; 1
    6ce4:	6f 89       	ldd	r22, Y+23	; 0x17
    6ce6:	78 8d       	ldd	r23, Y+24	; 0x18
    6ce8:	a9 01       	movw	r20, r18
    6cea:	0e 94 81 36 	call	0x6d02	; 0x6d02 <vfprintf>
    6cee:	2f 81       	ldd	r18, Y+7	; 0x07
    6cf0:	38 85       	ldd	r19, Y+8	; 0x08
    6cf2:	02 0f       	add	r16, r18
    6cf4:	13 1f       	adc	r17, r19
    6cf6:	f8 01       	movw	r30, r16
    6cf8:	10 82       	st	Z, r1
    6cfa:	2e 96       	adiw	r28, 0x0e	; 14
    6cfc:	e4 e0       	ldi	r30, 0x04	; 4
    6cfe:	0c 94 90 39 	jmp	0x7320	; 0x7320 <__epilogue_restores__+0x1c>

00006d02 <vfprintf>:
    6d02:	ab e0       	ldi	r26, 0x0B	; 11
    6d04:	b0 e0       	ldi	r27, 0x00	; 0
    6d06:	e7 e8       	ldi	r30, 0x87	; 135
    6d08:	f6 e3       	ldi	r31, 0x36	; 54
    6d0a:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__prologue_saves__>
    6d0e:	3c 01       	movw	r6, r24
    6d10:	2b 01       	movw	r4, r22
    6d12:	5a 01       	movw	r10, r20
    6d14:	fc 01       	movw	r30, r24
    6d16:	17 82       	std	Z+7, r1	; 0x07
    6d18:	16 82       	std	Z+6, r1	; 0x06
    6d1a:	83 81       	ldd	r24, Z+3	; 0x03
    6d1c:	81 fd       	sbrc	r24, 1
    6d1e:	03 c0       	rjmp	.+6      	; 0x6d26 <vfprintf+0x24>
    6d20:	6f ef       	ldi	r22, 0xFF	; 255
    6d22:	7f ef       	ldi	r23, 0xFF	; 255
    6d24:	c6 c1       	rjmp	.+908    	; 0x70b2 <vfprintf+0x3b0>
    6d26:	9a e0       	ldi	r25, 0x0A	; 10
    6d28:	89 2e       	mov	r8, r25
    6d2a:	1e 01       	movw	r2, r28
    6d2c:	08 94       	sec
    6d2e:	21 1c       	adc	r2, r1
    6d30:	31 1c       	adc	r3, r1
    6d32:	f3 01       	movw	r30, r6
    6d34:	23 81       	ldd	r18, Z+3	; 0x03
    6d36:	f2 01       	movw	r30, r4
    6d38:	23 fd       	sbrc	r18, 3
    6d3a:	85 91       	lpm	r24, Z+
    6d3c:	23 ff       	sbrs	r18, 3
    6d3e:	81 91       	ld	r24, Z+
    6d40:	2f 01       	movw	r4, r30
    6d42:	88 23       	and	r24, r24
    6d44:	09 f4       	brne	.+2      	; 0x6d48 <vfprintf+0x46>
    6d46:	b2 c1       	rjmp	.+868    	; 0x70ac <vfprintf+0x3aa>
    6d48:	85 32       	cpi	r24, 0x25	; 37
    6d4a:	39 f4       	brne	.+14     	; 0x6d5a <vfprintf+0x58>
    6d4c:	23 fd       	sbrc	r18, 3
    6d4e:	85 91       	lpm	r24, Z+
    6d50:	23 ff       	sbrs	r18, 3
    6d52:	81 91       	ld	r24, Z+
    6d54:	2f 01       	movw	r4, r30
    6d56:	85 32       	cpi	r24, 0x25	; 37
    6d58:	29 f4       	brne	.+10     	; 0x6d64 <vfprintf+0x62>
    6d5a:	90 e0       	ldi	r25, 0x00	; 0
    6d5c:	b3 01       	movw	r22, r6
    6d5e:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    6d62:	e7 cf       	rjmp	.-50     	; 0x6d32 <vfprintf+0x30>
    6d64:	98 2f       	mov	r25, r24
    6d66:	ff 24       	eor	r15, r15
    6d68:	ee 24       	eor	r14, r14
    6d6a:	99 24       	eor	r9, r9
    6d6c:	ff e1       	ldi	r31, 0x1F	; 31
    6d6e:	ff 15       	cp	r31, r15
    6d70:	d0 f0       	brcs	.+52     	; 0x6da6 <vfprintf+0xa4>
    6d72:	9b 32       	cpi	r25, 0x2B	; 43
    6d74:	69 f0       	breq	.+26     	; 0x6d90 <vfprintf+0x8e>
    6d76:	9c 32       	cpi	r25, 0x2C	; 44
    6d78:	28 f4       	brcc	.+10     	; 0x6d84 <vfprintf+0x82>
    6d7a:	90 32       	cpi	r25, 0x20	; 32
    6d7c:	59 f0       	breq	.+22     	; 0x6d94 <vfprintf+0x92>
    6d7e:	93 32       	cpi	r25, 0x23	; 35
    6d80:	91 f4       	brne	.+36     	; 0x6da6 <vfprintf+0xa4>
    6d82:	0e c0       	rjmp	.+28     	; 0x6da0 <vfprintf+0x9e>
    6d84:	9d 32       	cpi	r25, 0x2D	; 45
    6d86:	49 f0       	breq	.+18     	; 0x6d9a <vfprintf+0x98>
    6d88:	90 33       	cpi	r25, 0x30	; 48
    6d8a:	69 f4       	brne	.+26     	; 0x6da6 <vfprintf+0xa4>
    6d8c:	41 e0       	ldi	r20, 0x01	; 1
    6d8e:	24 c0       	rjmp	.+72     	; 0x6dd8 <vfprintf+0xd6>
    6d90:	52 e0       	ldi	r21, 0x02	; 2
    6d92:	f5 2a       	or	r15, r21
    6d94:	84 e0       	ldi	r24, 0x04	; 4
    6d96:	f8 2a       	or	r15, r24
    6d98:	28 c0       	rjmp	.+80     	; 0x6dea <vfprintf+0xe8>
    6d9a:	98 e0       	ldi	r25, 0x08	; 8
    6d9c:	f9 2a       	or	r15, r25
    6d9e:	25 c0       	rjmp	.+74     	; 0x6dea <vfprintf+0xe8>
    6da0:	e0 e1       	ldi	r30, 0x10	; 16
    6da2:	fe 2a       	or	r15, r30
    6da4:	22 c0       	rjmp	.+68     	; 0x6dea <vfprintf+0xe8>
    6da6:	f7 fc       	sbrc	r15, 7
    6da8:	29 c0       	rjmp	.+82     	; 0x6dfc <vfprintf+0xfa>
    6daa:	89 2f       	mov	r24, r25
    6dac:	80 53       	subi	r24, 0x30	; 48
    6dae:	8a 30       	cpi	r24, 0x0A	; 10
    6db0:	70 f4       	brcc	.+28     	; 0x6dce <vfprintf+0xcc>
    6db2:	f6 fe       	sbrs	r15, 6
    6db4:	05 c0       	rjmp	.+10     	; 0x6dc0 <vfprintf+0xbe>
    6db6:	98 9c       	mul	r9, r8
    6db8:	90 2c       	mov	r9, r0
    6dba:	11 24       	eor	r1, r1
    6dbc:	98 0e       	add	r9, r24
    6dbe:	15 c0       	rjmp	.+42     	; 0x6dea <vfprintf+0xe8>
    6dc0:	e8 9c       	mul	r14, r8
    6dc2:	e0 2c       	mov	r14, r0
    6dc4:	11 24       	eor	r1, r1
    6dc6:	e8 0e       	add	r14, r24
    6dc8:	f0 e2       	ldi	r31, 0x20	; 32
    6dca:	ff 2a       	or	r15, r31
    6dcc:	0e c0       	rjmp	.+28     	; 0x6dea <vfprintf+0xe8>
    6dce:	9e 32       	cpi	r25, 0x2E	; 46
    6dd0:	29 f4       	brne	.+10     	; 0x6ddc <vfprintf+0xda>
    6dd2:	f6 fc       	sbrc	r15, 6
    6dd4:	6b c1       	rjmp	.+726    	; 0x70ac <vfprintf+0x3aa>
    6dd6:	40 e4       	ldi	r20, 0x40	; 64
    6dd8:	f4 2a       	or	r15, r20
    6dda:	07 c0       	rjmp	.+14     	; 0x6dea <vfprintf+0xe8>
    6ddc:	9c 36       	cpi	r25, 0x6C	; 108
    6dde:	19 f4       	brne	.+6      	; 0x6de6 <vfprintf+0xe4>
    6de0:	50 e8       	ldi	r21, 0x80	; 128
    6de2:	f5 2a       	or	r15, r21
    6de4:	02 c0       	rjmp	.+4      	; 0x6dea <vfprintf+0xe8>
    6de6:	98 36       	cpi	r25, 0x68	; 104
    6de8:	49 f4       	brne	.+18     	; 0x6dfc <vfprintf+0xfa>
    6dea:	f2 01       	movw	r30, r4
    6dec:	23 fd       	sbrc	r18, 3
    6dee:	95 91       	lpm	r25, Z+
    6df0:	23 ff       	sbrs	r18, 3
    6df2:	91 91       	ld	r25, Z+
    6df4:	2f 01       	movw	r4, r30
    6df6:	99 23       	and	r25, r25
    6df8:	09 f0       	breq	.+2      	; 0x6dfc <vfprintf+0xfa>
    6dfa:	b8 cf       	rjmp	.-144    	; 0x6d6c <vfprintf+0x6a>
    6dfc:	89 2f       	mov	r24, r25
    6dfe:	85 54       	subi	r24, 0x45	; 69
    6e00:	83 30       	cpi	r24, 0x03	; 3
    6e02:	18 f0       	brcs	.+6      	; 0x6e0a <vfprintf+0x108>
    6e04:	80 52       	subi	r24, 0x20	; 32
    6e06:	83 30       	cpi	r24, 0x03	; 3
    6e08:	38 f4       	brcc	.+14     	; 0x6e18 <vfprintf+0x116>
    6e0a:	44 e0       	ldi	r20, 0x04	; 4
    6e0c:	50 e0       	ldi	r21, 0x00	; 0
    6e0e:	a4 0e       	add	r10, r20
    6e10:	b5 1e       	adc	r11, r21
    6e12:	5f e3       	ldi	r21, 0x3F	; 63
    6e14:	59 83       	std	Y+1, r21	; 0x01
    6e16:	0f c0       	rjmp	.+30     	; 0x6e36 <vfprintf+0x134>
    6e18:	93 36       	cpi	r25, 0x63	; 99
    6e1a:	31 f0       	breq	.+12     	; 0x6e28 <vfprintf+0x126>
    6e1c:	93 37       	cpi	r25, 0x73	; 115
    6e1e:	79 f0       	breq	.+30     	; 0x6e3e <vfprintf+0x13c>
    6e20:	93 35       	cpi	r25, 0x53	; 83
    6e22:	09 f0       	breq	.+2      	; 0x6e26 <vfprintf+0x124>
    6e24:	56 c0       	rjmp	.+172    	; 0x6ed2 <vfprintf+0x1d0>
    6e26:	20 c0       	rjmp	.+64     	; 0x6e68 <vfprintf+0x166>
    6e28:	f5 01       	movw	r30, r10
    6e2a:	80 81       	ld	r24, Z
    6e2c:	89 83       	std	Y+1, r24	; 0x01
    6e2e:	42 e0       	ldi	r20, 0x02	; 2
    6e30:	50 e0       	ldi	r21, 0x00	; 0
    6e32:	a4 0e       	add	r10, r20
    6e34:	b5 1e       	adc	r11, r21
    6e36:	61 01       	movw	r12, r2
    6e38:	01 e0       	ldi	r16, 0x01	; 1
    6e3a:	10 e0       	ldi	r17, 0x00	; 0
    6e3c:	12 c0       	rjmp	.+36     	; 0x6e62 <vfprintf+0x160>
    6e3e:	f5 01       	movw	r30, r10
    6e40:	c0 80       	ld	r12, Z
    6e42:	d1 80       	ldd	r13, Z+1	; 0x01
    6e44:	f6 fc       	sbrc	r15, 6
    6e46:	03 c0       	rjmp	.+6      	; 0x6e4e <vfprintf+0x14c>
    6e48:	6f ef       	ldi	r22, 0xFF	; 255
    6e4a:	7f ef       	ldi	r23, 0xFF	; 255
    6e4c:	02 c0       	rjmp	.+4      	; 0x6e52 <vfprintf+0x150>
    6e4e:	69 2d       	mov	r22, r9
    6e50:	70 e0       	ldi	r23, 0x00	; 0
    6e52:	42 e0       	ldi	r20, 0x02	; 2
    6e54:	50 e0       	ldi	r21, 0x00	; 0
    6e56:	a4 0e       	add	r10, r20
    6e58:	b5 1e       	adc	r11, r21
    6e5a:	c6 01       	movw	r24, r12
    6e5c:	0e 94 69 38 	call	0x70d2	; 0x70d2 <strnlen>
    6e60:	8c 01       	movw	r16, r24
    6e62:	5f e7       	ldi	r21, 0x7F	; 127
    6e64:	f5 22       	and	r15, r21
    6e66:	14 c0       	rjmp	.+40     	; 0x6e90 <vfprintf+0x18e>
    6e68:	f5 01       	movw	r30, r10
    6e6a:	c0 80       	ld	r12, Z
    6e6c:	d1 80       	ldd	r13, Z+1	; 0x01
    6e6e:	f6 fc       	sbrc	r15, 6
    6e70:	03 c0       	rjmp	.+6      	; 0x6e78 <vfprintf+0x176>
    6e72:	6f ef       	ldi	r22, 0xFF	; 255
    6e74:	7f ef       	ldi	r23, 0xFF	; 255
    6e76:	02 c0       	rjmp	.+4      	; 0x6e7c <vfprintf+0x17a>
    6e78:	69 2d       	mov	r22, r9
    6e7a:	70 e0       	ldi	r23, 0x00	; 0
    6e7c:	42 e0       	ldi	r20, 0x02	; 2
    6e7e:	50 e0       	ldi	r21, 0x00	; 0
    6e80:	a4 0e       	add	r10, r20
    6e82:	b5 1e       	adc	r11, r21
    6e84:	c6 01       	movw	r24, r12
    6e86:	0e 94 5e 38 	call	0x70bc	; 0x70bc <strnlen_P>
    6e8a:	8c 01       	movw	r16, r24
    6e8c:	50 e8       	ldi	r21, 0x80	; 128
    6e8e:	f5 2a       	or	r15, r21
    6e90:	f3 fe       	sbrs	r15, 3
    6e92:	07 c0       	rjmp	.+14     	; 0x6ea2 <vfprintf+0x1a0>
    6e94:	1a c0       	rjmp	.+52     	; 0x6eca <vfprintf+0x1c8>
    6e96:	80 e2       	ldi	r24, 0x20	; 32
    6e98:	90 e0       	ldi	r25, 0x00	; 0
    6e9a:	b3 01       	movw	r22, r6
    6e9c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    6ea0:	ea 94       	dec	r14
    6ea2:	8e 2d       	mov	r24, r14
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	08 17       	cp	r16, r24
    6ea8:	19 07       	cpc	r17, r25
    6eaa:	a8 f3       	brcs	.-22     	; 0x6e96 <vfprintf+0x194>
    6eac:	0e c0       	rjmp	.+28     	; 0x6eca <vfprintf+0x1c8>
    6eae:	f6 01       	movw	r30, r12
    6eb0:	f7 fc       	sbrc	r15, 7
    6eb2:	85 91       	lpm	r24, Z+
    6eb4:	f7 fe       	sbrs	r15, 7
    6eb6:	81 91       	ld	r24, Z+
    6eb8:	6f 01       	movw	r12, r30
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	b3 01       	movw	r22, r6
    6ebe:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    6ec2:	e1 10       	cpse	r14, r1
    6ec4:	ea 94       	dec	r14
    6ec6:	01 50       	subi	r16, 0x01	; 1
    6ec8:	10 40       	sbci	r17, 0x00	; 0
    6eca:	01 15       	cp	r16, r1
    6ecc:	11 05       	cpc	r17, r1
    6ece:	79 f7       	brne	.-34     	; 0x6eae <vfprintf+0x1ac>
    6ed0:	ea c0       	rjmp	.+468    	; 0x70a6 <vfprintf+0x3a4>
    6ed2:	94 36       	cpi	r25, 0x64	; 100
    6ed4:	11 f0       	breq	.+4      	; 0x6eda <vfprintf+0x1d8>
    6ed6:	99 36       	cpi	r25, 0x69	; 105
    6ed8:	69 f5       	brne	.+90     	; 0x6f34 <vfprintf+0x232>
    6eda:	f7 fe       	sbrs	r15, 7
    6edc:	08 c0       	rjmp	.+16     	; 0x6eee <vfprintf+0x1ec>
    6ede:	f5 01       	movw	r30, r10
    6ee0:	20 81       	ld	r18, Z
    6ee2:	31 81       	ldd	r19, Z+1	; 0x01
    6ee4:	42 81       	ldd	r20, Z+2	; 0x02
    6ee6:	53 81       	ldd	r21, Z+3	; 0x03
    6ee8:	84 e0       	ldi	r24, 0x04	; 4
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	0a c0       	rjmp	.+20     	; 0x6f02 <vfprintf+0x200>
    6eee:	f5 01       	movw	r30, r10
    6ef0:	80 81       	ld	r24, Z
    6ef2:	91 81       	ldd	r25, Z+1	; 0x01
    6ef4:	9c 01       	movw	r18, r24
    6ef6:	44 27       	eor	r20, r20
    6ef8:	37 fd       	sbrc	r19, 7
    6efa:	40 95       	com	r20
    6efc:	54 2f       	mov	r21, r20
    6efe:	82 e0       	ldi	r24, 0x02	; 2
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	a8 0e       	add	r10, r24
    6f04:	b9 1e       	adc	r11, r25
    6f06:	9f e6       	ldi	r25, 0x6F	; 111
    6f08:	f9 22       	and	r15, r25
    6f0a:	57 ff       	sbrs	r21, 7
    6f0c:	09 c0       	rjmp	.+18     	; 0x6f20 <vfprintf+0x21e>
    6f0e:	50 95       	com	r21
    6f10:	40 95       	com	r20
    6f12:	30 95       	com	r19
    6f14:	21 95       	neg	r18
    6f16:	3f 4f       	sbci	r19, 0xFF	; 255
    6f18:	4f 4f       	sbci	r20, 0xFF	; 255
    6f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    6f1c:	e0 e8       	ldi	r30, 0x80	; 128
    6f1e:	fe 2a       	or	r15, r30
    6f20:	ca 01       	movw	r24, r20
    6f22:	b9 01       	movw	r22, r18
    6f24:	a1 01       	movw	r20, r2
    6f26:	2a e0       	ldi	r18, 0x0A	; 10
    6f28:	30 e0       	ldi	r19, 0x00	; 0
    6f2a:	0e 94 a0 38 	call	0x7140	; 0x7140 <__ultoa_invert>
    6f2e:	d8 2e       	mov	r13, r24
    6f30:	d2 18       	sub	r13, r2
    6f32:	40 c0       	rjmp	.+128    	; 0x6fb4 <vfprintf+0x2b2>
    6f34:	95 37       	cpi	r25, 0x75	; 117
    6f36:	29 f4       	brne	.+10     	; 0x6f42 <vfprintf+0x240>
    6f38:	1f 2d       	mov	r17, r15
    6f3a:	1f 7e       	andi	r17, 0xEF	; 239
    6f3c:	2a e0       	ldi	r18, 0x0A	; 10
    6f3e:	30 e0       	ldi	r19, 0x00	; 0
    6f40:	1d c0       	rjmp	.+58     	; 0x6f7c <vfprintf+0x27a>
    6f42:	1f 2d       	mov	r17, r15
    6f44:	19 7f       	andi	r17, 0xF9	; 249
    6f46:	9f 36       	cpi	r25, 0x6F	; 111
    6f48:	61 f0       	breq	.+24     	; 0x6f62 <vfprintf+0x260>
    6f4a:	90 37       	cpi	r25, 0x70	; 112
    6f4c:	20 f4       	brcc	.+8      	; 0x6f56 <vfprintf+0x254>
    6f4e:	98 35       	cpi	r25, 0x58	; 88
    6f50:	09 f0       	breq	.+2      	; 0x6f54 <vfprintf+0x252>
    6f52:	ac c0       	rjmp	.+344    	; 0x70ac <vfprintf+0x3aa>
    6f54:	0f c0       	rjmp	.+30     	; 0x6f74 <vfprintf+0x272>
    6f56:	90 37       	cpi	r25, 0x70	; 112
    6f58:	39 f0       	breq	.+14     	; 0x6f68 <vfprintf+0x266>
    6f5a:	98 37       	cpi	r25, 0x78	; 120
    6f5c:	09 f0       	breq	.+2      	; 0x6f60 <vfprintf+0x25e>
    6f5e:	a6 c0       	rjmp	.+332    	; 0x70ac <vfprintf+0x3aa>
    6f60:	04 c0       	rjmp	.+8      	; 0x6f6a <vfprintf+0x268>
    6f62:	28 e0       	ldi	r18, 0x08	; 8
    6f64:	30 e0       	ldi	r19, 0x00	; 0
    6f66:	0a c0       	rjmp	.+20     	; 0x6f7c <vfprintf+0x27a>
    6f68:	10 61       	ori	r17, 0x10	; 16
    6f6a:	14 fd       	sbrc	r17, 4
    6f6c:	14 60       	ori	r17, 0x04	; 4
    6f6e:	20 e1       	ldi	r18, 0x10	; 16
    6f70:	30 e0       	ldi	r19, 0x00	; 0
    6f72:	04 c0       	rjmp	.+8      	; 0x6f7c <vfprintf+0x27a>
    6f74:	14 fd       	sbrc	r17, 4
    6f76:	16 60       	ori	r17, 0x06	; 6
    6f78:	20 e1       	ldi	r18, 0x10	; 16
    6f7a:	32 e0       	ldi	r19, 0x02	; 2
    6f7c:	17 ff       	sbrs	r17, 7
    6f7e:	08 c0       	rjmp	.+16     	; 0x6f90 <vfprintf+0x28e>
    6f80:	f5 01       	movw	r30, r10
    6f82:	60 81       	ld	r22, Z
    6f84:	71 81       	ldd	r23, Z+1	; 0x01
    6f86:	82 81       	ldd	r24, Z+2	; 0x02
    6f88:	93 81       	ldd	r25, Z+3	; 0x03
    6f8a:	44 e0       	ldi	r20, 0x04	; 4
    6f8c:	50 e0       	ldi	r21, 0x00	; 0
    6f8e:	08 c0       	rjmp	.+16     	; 0x6fa0 <vfprintf+0x29e>
    6f90:	f5 01       	movw	r30, r10
    6f92:	80 81       	ld	r24, Z
    6f94:	91 81       	ldd	r25, Z+1	; 0x01
    6f96:	bc 01       	movw	r22, r24
    6f98:	80 e0       	ldi	r24, 0x00	; 0
    6f9a:	90 e0       	ldi	r25, 0x00	; 0
    6f9c:	42 e0       	ldi	r20, 0x02	; 2
    6f9e:	50 e0       	ldi	r21, 0x00	; 0
    6fa0:	a4 0e       	add	r10, r20
    6fa2:	b5 1e       	adc	r11, r21
    6fa4:	a1 01       	movw	r20, r2
    6fa6:	0e 94 a0 38 	call	0x7140	; 0x7140 <__ultoa_invert>
    6faa:	d8 2e       	mov	r13, r24
    6fac:	d2 18       	sub	r13, r2
    6fae:	8f e7       	ldi	r24, 0x7F	; 127
    6fb0:	f8 2e       	mov	r15, r24
    6fb2:	f1 22       	and	r15, r17
    6fb4:	f6 fe       	sbrs	r15, 6
    6fb6:	0b c0       	rjmp	.+22     	; 0x6fce <vfprintf+0x2cc>
    6fb8:	5e ef       	ldi	r21, 0xFE	; 254
    6fba:	f5 22       	and	r15, r21
    6fbc:	d9 14       	cp	r13, r9
    6fbe:	38 f4       	brcc	.+14     	; 0x6fce <vfprintf+0x2cc>
    6fc0:	f4 fe       	sbrs	r15, 4
    6fc2:	07 c0       	rjmp	.+14     	; 0x6fd2 <vfprintf+0x2d0>
    6fc4:	f2 fc       	sbrc	r15, 2
    6fc6:	05 c0       	rjmp	.+10     	; 0x6fd2 <vfprintf+0x2d0>
    6fc8:	8f ee       	ldi	r24, 0xEF	; 239
    6fca:	f8 22       	and	r15, r24
    6fcc:	02 c0       	rjmp	.+4      	; 0x6fd2 <vfprintf+0x2d0>
    6fce:	1d 2d       	mov	r17, r13
    6fd0:	01 c0       	rjmp	.+2      	; 0x6fd4 <vfprintf+0x2d2>
    6fd2:	19 2d       	mov	r17, r9
    6fd4:	f4 fe       	sbrs	r15, 4
    6fd6:	0d c0       	rjmp	.+26     	; 0x6ff2 <vfprintf+0x2f0>
    6fd8:	fe 01       	movw	r30, r28
    6fda:	ed 0d       	add	r30, r13
    6fdc:	f1 1d       	adc	r31, r1
    6fde:	80 81       	ld	r24, Z
    6fe0:	80 33       	cpi	r24, 0x30	; 48
    6fe2:	19 f4       	brne	.+6      	; 0x6fea <vfprintf+0x2e8>
    6fe4:	99 ee       	ldi	r25, 0xE9	; 233
    6fe6:	f9 22       	and	r15, r25
    6fe8:	08 c0       	rjmp	.+16     	; 0x6ffa <vfprintf+0x2f8>
    6fea:	1f 5f       	subi	r17, 0xFF	; 255
    6fec:	f2 fe       	sbrs	r15, 2
    6fee:	05 c0       	rjmp	.+10     	; 0x6ffa <vfprintf+0x2f8>
    6ff0:	03 c0       	rjmp	.+6      	; 0x6ff8 <vfprintf+0x2f6>
    6ff2:	8f 2d       	mov	r24, r15
    6ff4:	86 78       	andi	r24, 0x86	; 134
    6ff6:	09 f0       	breq	.+2      	; 0x6ffa <vfprintf+0x2f8>
    6ff8:	1f 5f       	subi	r17, 0xFF	; 255
    6ffa:	0f 2d       	mov	r16, r15
    6ffc:	f3 fc       	sbrc	r15, 3
    6ffe:	14 c0       	rjmp	.+40     	; 0x7028 <vfprintf+0x326>
    7000:	f0 fe       	sbrs	r15, 0
    7002:	0f c0       	rjmp	.+30     	; 0x7022 <vfprintf+0x320>
    7004:	1e 15       	cp	r17, r14
    7006:	10 f0       	brcs	.+4      	; 0x700c <vfprintf+0x30a>
    7008:	9d 2c       	mov	r9, r13
    700a:	0b c0       	rjmp	.+22     	; 0x7022 <vfprintf+0x320>
    700c:	9d 2c       	mov	r9, r13
    700e:	9e 0c       	add	r9, r14
    7010:	91 1a       	sub	r9, r17
    7012:	1e 2d       	mov	r17, r14
    7014:	06 c0       	rjmp	.+12     	; 0x7022 <vfprintf+0x320>
    7016:	80 e2       	ldi	r24, 0x20	; 32
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	b3 01       	movw	r22, r6
    701c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    7020:	1f 5f       	subi	r17, 0xFF	; 255
    7022:	1e 15       	cp	r17, r14
    7024:	c0 f3       	brcs	.-16     	; 0x7016 <vfprintf+0x314>
    7026:	04 c0       	rjmp	.+8      	; 0x7030 <vfprintf+0x32e>
    7028:	1e 15       	cp	r17, r14
    702a:	10 f4       	brcc	.+4      	; 0x7030 <vfprintf+0x32e>
    702c:	e1 1a       	sub	r14, r17
    702e:	01 c0       	rjmp	.+2      	; 0x7032 <vfprintf+0x330>
    7030:	ee 24       	eor	r14, r14
    7032:	04 ff       	sbrs	r16, 4
    7034:	0f c0       	rjmp	.+30     	; 0x7054 <vfprintf+0x352>
    7036:	80 e3       	ldi	r24, 0x30	; 48
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	b3 01       	movw	r22, r6
    703c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    7040:	02 ff       	sbrs	r16, 2
    7042:	1d c0       	rjmp	.+58     	; 0x707e <vfprintf+0x37c>
    7044:	01 fd       	sbrc	r16, 1
    7046:	03 c0       	rjmp	.+6      	; 0x704e <vfprintf+0x34c>
    7048:	88 e7       	ldi	r24, 0x78	; 120
    704a:	90 e0       	ldi	r25, 0x00	; 0
    704c:	0e c0       	rjmp	.+28     	; 0x706a <vfprintf+0x368>
    704e:	88 e5       	ldi	r24, 0x58	; 88
    7050:	90 e0       	ldi	r25, 0x00	; 0
    7052:	0b c0       	rjmp	.+22     	; 0x706a <vfprintf+0x368>
    7054:	80 2f       	mov	r24, r16
    7056:	86 78       	andi	r24, 0x86	; 134
    7058:	91 f0       	breq	.+36     	; 0x707e <vfprintf+0x37c>
    705a:	01 ff       	sbrs	r16, 1
    705c:	02 c0       	rjmp	.+4      	; 0x7062 <vfprintf+0x360>
    705e:	8b e2       	ldi	r24, 0x2B	; 43
    7060:	01 c0       	rjmp	.+2      	; 0x7064 <vfprintf+0x362>
    7062:	80 e2       	ldi	r24, 0x20	; 32
    7064:	f7 fc       	sbrc	r15, 7
    7066:	8d e2       	ldi	r24, 0x2D	; 45
    7068:	90 e0       	ldi	r25, 0x00	; 0
    706a:	b3 01       	movw	r22, r6
    706c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    7070:	06 c0       	rjmp	.+12     	; 0x707e <vfprintf+0x37c>
    7072:	80 e3       	ldi	r24, 0x30	; 48
    7074:	90 e0       	ldi	r25, 0x00	; 0
    7076:	b3 01       	movw	r22, r6
    7078:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    707c:	9a 94       	dec	r9
    707e:	d9 14       	cp	r13, r9
    7080:	c0 f3       	brcs	.-16     	; 0x7072 <vfprintf+0x370>
    7082:	da 94       	dec	r13
    7084:	f1 01       	movw	r30, r2
    7086:	ed 0d       	add	r30, r13
    7088:	f1 1d       	adc	r31, r1
    708a:	80 81       	ld	r24, Z
    708c:	90 e0       	ldi	r25, 0x00	; 0
    708e:	b3 01       	movw	r22, r6
    7090:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    7094:	dd 20       	and	r13, r13
    7096:	a9 f7       	brne	.-22     	; 0x7082 <vfprintf+0x380>
    7098:	06 c0       	rjmp	.+12     	; 0x70a6 <vfprintf+0x3a4>
    709a:	80 e2       	ldi	r24, 0x20	; 32
    709c:	90 e0       	ldi	r25, 0x00	; 0
    709e:	b3 01       	movw	r22, r6
    70a0:	0e 94 74 38 	call	0x70e8	; 0x70e8 <fputc>
    70a4:	ea 94       	dec	r14
    70a6:	ee 20       	and	r14, r14
    70a8:	c1 f7       	brne	.-16     	; 0x709a <vfprintf+0x398>
    70aa:	43 ce       	rjmp	.-890    	; 0x6d32 <vfprintf+0x30>
    70ac:	f3 01       	movw	r30, r6
    70ae:	66 81       	ldd	r22, Z+6	; 0x06
    70b0:	77 81       	ldd	r23, Z+7	; 0x07
    70b2:	cb 01       	movw	r24, r22
    70b4:	2b 96       	adiw	r28, 0x0b	; 11
    70b6:	e2 e1       	ldi	r30, 0x12	; 18
    70b8:	0c 94 82 39 	jmp	0x7304	; 0x7304 <__epilogue_restores__>

000070bc <strnlen_P>:
    70bc:	fc 01       	movw	r30, r24
    70be:	05 90       	lpm	r0, Z+
    70c0:	61 50       	subi	r22, 0x01	; 1
    70c2:	70 40       	sbci	r23, 0x00	; 0
    70c4:	01 10       	cpse	r0, r1
    70c6:	d8 f7       	brcc	.-10     	; 0x70be <strnlen_P+0x2>
    70c8:	80 95       	com	r24
    70ca:	90 95       	com	r25
    70cc:	8e 0f       	add	r24, r30
    70ce:	9f 1f       	adc	r25, r31
    70d0:	08 95       	ret

000070d2 <strnlen>:
    70d2:	fc 01       	movw	r30, r24
    70d4:	61 50       	subi	r22, 0x01	; 1
    70d6:	70 40       	sbci	r23, 0x00	; 0
    70d8:	01 90       	ld	r0, Z+
    70da:	01 10       	cpse	r0, r1
    70dc:	d8 f7       	brcc	.-10     	; 0x70d4 <strnlen+0x2>
    70de:	80 95       	com	r24
    70e0:	90 95       	com	r25
    70e2:	8e 0f       	add	r24, r30
    70e4:	9f 1f       	adc	r25, r31
    70e6:	08 95       	ret

000070e8 <fputc>:
    70e8:	0f 93       	push	r16
    70ea:	1f 93       	push	r17
    70ec:	cf 93       	push	r28
    70ee:	df 93       	push	r29
    70f0:	8c 01       	movw	r16, r24
    70f2:	eb 01       	movw	r28, r22
    70f4:	8b 81       	ldd	r24, Y+3	; 0x03
    70f6:	81 ff       	sbrs	r24, 1
    70f8:	1b c0       	rjmp	.+54     	; 0x7130 <fputc+0x48>
    70fa:	82 ff       	sbrs	r24, 2
    70fc:	0d c0       	rjmp	.+26     	; 0x7118 <fputc+0x30>
    70fe:	2e 81       	ldd	r18, Y+6	; 0x06
    7100:	3f 81       	ldd	r19, Y+7	; 0x07
    7102:	8c 81       	ldd	r24, Y+4	; 0x04
    7104:	9d 81       	ldd	r25, Y+5	; 0x05
    7106:	28 17       	cp	r18, r24
    7108:	39 07       	cpc	r19, r25
    710a:	64 f4       	brge	.+24     	; 0x7124 <fputc+0x3c>
    710c:	e8 81       	ld	r30, Y
    710e:	f9 81       	ldd	r31, Y+1	; 0x01
    7110:	01 93       	st	Z+, r16
    7112:	f9 83       	std	Y+1, r31	; 0x01
    7114:	e8 83       	st	Y, r30
    7116:	06 c0       	rjmp	.+12     	; 0x7124 <fputc+0x3c>
    7118:	e8 85       	ldd	r30, Y+8	; 0x08
    711a:	f9 85       	ldd	r31, Y+9	; 0x09
    711c:	80 2f       	mov	r24, r16
    711e:	09 95       	icall
    7120:	89 2b       	or	r24, r25
    7122:	31 f4       	brne	.+12     	; 0x7130 <fputc+0x48>
    7124:	8e 81       	ldd	r24, Y+6	; 0x06
    7126:	9f 81       	ldd	r25, Y+7	; 0x07
    7128:	01 96       	adiw	r24, 0x01	; 1
    712a:	9f 83       	std	Y+7, r25	; 0x07
    712c:	8e 83       	std	Y+6, r24	; 0x06
    712e:	02 c0       	rjmp	.+4      	; 0x7134 <fputc+0x4c>
    7130:	0f ef       	ldi	r16, 0xFF	; 255
    7132:	1f ef       	ldi	r17, 0xFF	; 255
    7134:	c8 01       	movw	r24, r16
    7136:	df 91       	pop	r29
    7138:	cf 91       	pop	r28
    713a:	1f 91       	pop	r17
    713c:	0f 91       	pop	r16
    713e:	08 95       	ret

00007140 <__ultoa_invert>:
    7140:	fa 01       	movw	r30, r20
    7142:	aa 27       	eor	r26, r26
    7144:	28 30       	cpi	r18, 0x08	; 8
    7146:	51 f1       	breq	.+84     	; 0x719c <__ultoa_invert+0x5c>
    7148:	20 31       	cpi	r18, 0x10	; 16
    714a:	81 f1       	breq	.+96     	; 0x71ac <__ultoa_invert+0x6c>
    714c:	e8 94       	clt
    714e:	6f 93       	push	r22
    7150:	6e 7f       	andi	r22, 0xFE	; 254
    7152:	6e 5f       	subi	r22, 0xFE	; 254
    7154:	7f 4f       	sbci	r23, 0xFF	; 255
    7156:	8f 4f       	sbci	r24, 0xFF	; 255
    7158:	9f 4f       	sbci	r25, 0xFF	; 255
    715a:	af 4f       	sbci	r26, 0xFF	; 255
    715c:	b1 e0       	ldi	r27, 0x01	; 1
    715e:	3e d0       	rcall	.+124    	; 0x71dc <__ultoa_invert+0x9c>
    7160:	b4 e0       	ldi	r27, 0x04	; 4
    7162:	3c d0       	rcall	.+120    	; 0x71dc <__ultoa_invert+0x9c>
    7164:	67 0f       	add	r22, r23
    7166:	78 1f       	adc	r23, r24
    7168:	89 1f       	adc	r24, r25
    716a:	9a 1f       	adc	r25, r26
    716c:	a1 1d       	adc	r26, r1
    716e:	68 0f       	add	r22, r24
    7170:	79 1f       	adc	r23, r25
    7172:	8a 1f       	adc	r24, r26
    7174:	91 1d       	adc	r25, r1
    7176:	a1 1d       	adc	r26, r1
    7178:	6a 0f       	add	r22, r26
    717a:	71 1d       	adc	r23, r1
    717c:	81 1d       	adc	r24, r1
    717e:	91 1d       	adc	r25, r1
    7180:	a1 1d       	adc	r26, r1
    7182:	20 d0       	rcall	.+64     	; 0x71c4 <__ultoa_invert+0x84>
    7184:	09 f4       	brne	.+2      	; 0x7188 <__ultoa_invert+0x48>
    7186:	68 94       	set
    7188:	3f 91       	pop	r19
    718a:	2a e0       	ldi	r18, 0x0A	; 10
    718c:	26 9f       	mul	r18, r22
    718e:	11 24       	eor	r1, r1
    7190:	30 19       	sub	r19, r0
    7192:	30 5d       	subi	r19, 0xD0	; 208
    7194:	31 93       	st	Z+, r19
    7196:	de f6       	brtc	.-74     	; 0x714e <__ultoa_invert+0xe>
    7198:	cf 01       	movw	r24, r30
    719a:	08 95       	ret
    719c:	46 2f       	mov	r20, r22
    719e:	47 70       	andi	r20, 0x07	; 7
    71a0:	40 5d       	subi	r20, 0xD0	; 208
    71a2:	41 93       	st	Z+, r20
    71a4:	b3 e0       	ldi	r27, 0x03	; 3
    71a6:	0f d0       	rcall	.+30     	; 0x71c6 <__ultoa_invert+0x86>
    71a8:	c9 f7       	brne	.-14     	; 0x719c <__ultoa_invert+0x5c>
    71aa:	f6 cf       	rjmp	.-20     	; 0x7198 <__ultoa_invert+0x58>
    71ac:	46 2f       	mov	r20, r22
    71ae:	4f 70       	andi	r20, 0x0F	; 15
    71b0:	40 5d       	subi	r20, 0xD0	; 208
    71b2:	4a 33       	cpi	r20, 0x3A	; 58
    71b4:	18 f0       	brcs	.+6      	; 0x71bc <__ultoa_invert+0x7c>
    71b6:	49 5d       	subi	r20, 0xD9	; 217
    71b8:	31 fd       	sbrc	r19, 1
    71ba:	40 52       	subi	r20, 0x20	; 32
    71bc:	41 93       	st	Z+, r20
    71be:	02 d0       	rcall	.+4      	; 0x71c4 <__ultoa_invert+0x84>
    71c0:	a9 f7       	brne	.-22     	; 0x71ac <__ultoa_invert+0x6c>
    71c2:	ea cf       	rjmp	.-44     	; 0x7198 <__ultoa_invert+0x58>
    71c4:	b4 e0       	ldi	r27, 0x04	; 4
    71c6:	a6 95       	lsr	r26
    71c8:	97 95       	ror	r25
    71ca:	87 95       	ror	r24
    71cc:	77 95       	ror	r23
    71ce:	67 95       	ror	r22
    71d0:	ba 95       	dec	r27
    71d2:	c9 f7       	brne	.-14     	; 0x71c6 <__ultoa_invert+0x86>
    71d4:	00 97       	sbiw	r24, 0x00	; 0
    71d6:	61 05       	cpc	r22, r1
    71d8:	71 05       	cpc	r23, r1
    71da:	08 95       	ret
    71dc:	9b 01       	movw	r18, r22
    71de:	ac 01       	movw	r20, r24
    71e0:	0a 2e       	mov	r0, r26
    71e2:	06 94       	lsr	r0
    71e4:	57 95       	ror	r21
    71e6:	47 95       	ror	r20
    71e8:	37 95       	ror	r19
    71ea:	27 95       	ror	r18
    71ec:	ba 95       	dec	r27
    71ee:	c9 f7       	brne	.-14     	; 0x71e2 <__ultoa_invert+0xa2>
    71f0:	62 0f       	add	r22, r18
    71f2:	73 1f       	adc	r23, r19
    71f4:	84 1f       	adc	r24, r20
    71f6:	95 1f       	adc	r25, r21
    71f8:	a0 1d       	adc	r26, r0
    71fa:	08 95       	ret

000071fc <__mulsi3>:
    71fc:	62 9f       	mul	r22, r18
    71fe:	d0 01       	movw	r26, r0
    7200:	73 9f       	mul	r23, r19
    7202:	f0 01       	movw	r30, r0
    7204:	82 9f       	mul	r24, r18
    7206:	e0 0d       	add	r30, r0
    7208:	f1 1d       	adc	r31, r1
    720a:	64 9f       	mul	r22, r20
    720c:	e0 0d       	add	r30, r0
    720e:	f1 1d       	adc	r31, r1
    7210:	92 9f       	mul	r25, r18
    7212:	f0 0d       	add	r31, r0
    7214:	83 9f       	mul	r24, r19
    7216:	f0 0d       	add	r31, r0
    7218:	74 9f       	mul	r23, r20
    721a:	f0 0d       	add	r31, r0
    721c:	65 9f       	mul	r22, r21
    721e:	f0 0d       	add	r31, r0
    7220:	99 27       	eor	r25, r25
    7222:	72 9f       	mul	r23, r18
    7224:	b0 0d       	add	r27, r0
    7226:	e1 1d       	adc	r30, r1
    7228:	f9 1f       	adc	r31, r25
    722a:	63 9f       	mul	r22, r19
    722c:	b0 0d       	add	r27, r0
    722e:	e1 1d       	adc	r30, r1
    7230:	f9 1f       	adc	r31, r25
    7232:	bd 01       	movw	r22, r26
    7234:	cf 01       	movw	r24, r30
    7236:	11 24       	eor	r1, r1
    7238:	08 95       	ret

0000723a <__udivmodhi4>:
    723a:	aa 1b       	sub	r26, r26
    723c:	bb 1b       	sub	r27, r27
    723e:	51 e1       	ldi	r21, 0x11	; 17
    7240:	07 c0       	rjmp	.+14     	; 0x7250 <__udivmodhi4_ep>

00007242 <__udivmodhi4_loop>:
    7242:	aa 1f       	adc	r26, r26
    7244:	bb 1f       	adc	r27, r27
    7246:	a6 17       	cp	r26, r22
    7248:	b7 07       	cpc	r27, r23
    724a:	10 f0       	brcs	.+4      	; 0x7250 <__udivmodhi4_ep>
    724c:	a6 1b       	sub	r26, r22
    724e:	b7 0b       	sbc	r27, r23

00007250 <__udivmodhi4_ep>:
    7250:	88 1f       	adc	r24, r24
    7252:	99 1f       	adc	r25, r25
    7254:	5a 95       	dec	r21
    7256:	a9 f7       	brne	.-22     	; 0x7242 <__udivmodhi4_loop>
    7258:	80 95       	com	r24
    725a:	90 95       	com	r25
    725c:	bc 01       	movw	r22, r24
    725e:	cd 01       	movw	r24, r26
    7260:	08 95       	ret

00007262 <__divmodhi4>:
    7262:	97 fb       	bst	r25, 7
    7264:	09 2e       	mov	r0, r25
    7266:	07 26       	eor	r0, r23
    7268:	0a d0       	rcall	.+20     	; 0x727e <__divmodhi4_neg1>
    726a:	77 fd       	sbrc	r23, 7
    726c:	04 d0       	rcall	.+8      	; 0x7276 <__divmodhi4_neg2>
    726e:	e5 df       	rcall	.-54     	; 0x723a <__udivmodhi4>
    7270:	06 d0       	rcall	.+12     	; 0x727e <__divmodhi4_neg1>
    7272:	00 20       	and	r0, r0
    7274:	1a f4       	brpl	.+6      	; 0x727c <__divmodhi4_exit>

00007276 <__divmodhi4_neg2>:
    7276:	70 95       	com	r23
    7278:	61 95       	neg	r22
    727a:	7f 4f       	sbci	r23, 0xFF	; 255

0000727c <__divmodhi4_exit>:
    727c:	08 95       	ret

0000727e <__divmodhi4_neg1>:
    727e:	f6 f7       	brtc	.-4      	; 0x727c <__divmodhi4_exit>
    7280:	90 95       	com	r25
    7282:	81 95       	neg	r24
    7284:	9f 4f       	sbci	r25, 0xFF	; 255
    7286:	08 95       	ret

00007288 <__udivmodsi4>:
    7288:	a1 e2       	ldi	r26, 0x21	; 33
    728a:	1a 2e       	mov	r1, r26
    728c:	aa 1b       	sub	r26, r26
    728e:	bb 1b       	sub	r27, r27
    7290:	fd 01       	movw	r30, r26
    7292:	0d c0       	rjmp	.+26     	; 0x72ae <__udivmodsi4_ep>

00007294 <__udivmodsi4_loop>:
    7294:	aa 1f       	adc	r26, r26
    7296:	bb 1f       	adc	r27, r27
    7298:	ee 1f       	adc	r30, r30
    729a:	ff 1f       	adc	r31, r31
    729c:	a2 17       	cp	r26, r18
    729e:	b3 07       	cpc	r27, r19
    72a0:	e4 07       	cpc	r30, r20
    72a2:	f5 07       	cpc	r31, r21
    72a4:	20 f0       	brcs	.+8      	; 0x72ae <__udivmodsi4_ep>
    72a6:	a2 1b       	sub	r26, r18
    72a8:	b3 0b       	sbc	r27, r19
    72aa:	e4 0b       	sbc	r30, r20
    72ac:	f5 0b       	sbc	r31, r21

000072ae <__udivmodsi4_ep>:
    72ae:	66 1f       	adc	r22, r22
    72b0:	77 1f       	adc	r23, r23
    72b2:	88 1f       	adc	r24, r24
    72b4:	99 1f       	adc	r25, r25
    72b6:	1a 94       	dec	r1
    72b8:	69 f7       	brne	.-38     	; 0x7294 <__udivmodsi4_loop>
    72ba:	60 95       	com	r22
    72bc:	70 95       	com	r23
    72be:	80 95       	com	r24
    72c0:	90 95       	com	r25
    72c2:	9b 01       	movw	r18, r22
    72c4:	ac 01       	movw	r20, r24
    72c6:	bd 01       	movw	r22, r26
    72c8:	cf 01       	movw	r24, r30
    72ca:	08 95       	ret

000072cc <__prologue_saves__>:
    72cc:	2f 92       	push	r2
    72ce:	3f 92       	push	r3
    72d0:	4f 92       	push	r4
    72d2:	5f 92       	push	r5
    72d4:	6f 92       	push	r6
    72d6:	7f 92       	push	r7
    72d8:	8f 92       	push	r8
    72da:	9f 92       	push	r9
    72dc:	af 92       	push	r10
    72de:	bf 92       	push	r11
    72e0:	cf 92       	push	r12
    72e2:	df 92       	push	r13
    72e4:	ef 92       	push	r14
    72e6:	ff 92       	push	r15
    72e8:	0f 93       	push	r16
    72ea:	1f 93       	push	r17
    72ec:	cf 93       	push	r28
    72ee:	df 93       	push	r29
    72f0:	cd b7       	in	r28, 0x3d	; 61
    72f2:	de b7       	in	r29, 0x3e	; 62
    72f4:	ca 1b       	sub	r28, r26
    72f6:	db 0b       	sbc	r29, r27
    72f8:	0f b6       	in	r0, 0x3f	; 63
    72fa:	f8 94       	cli
    72fc:	de bf       	out	0x3e, r29	; 62
    72fe:	0f be       	out	0x3f, r0	; 63
    7300:	cd bf       	out	0x3d, r28	; 61
    7302:	09 94       	ijmp

00007304 <__epilogue_restores__>:
    7304:	2a 88       	ldd	r2, Y+18	; 0x12
    7306:	39 88       	ldd	r3, Y+17	; 0x11
    7308:	48 88       	ldd	r4, Y+16	; 0x10
    730a:	5f 84       	ldd	r5, Y+15	; 0x0f
    730c:	6e 84       	ldd	r6, Y+14	; 0x0e
    730e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7310:	8c 84       	ldd	r8, Y+12	; 0x0c
    7312:	9b 84       	ldd	r9, Y+11	; 0x0b
    7314:	aa 84       	ldd	r10, Y+10	; 0x0a
    7316:	b9 84       	ldd	r11, Y+9	; 0x09
    7318:	c8 84       	ldd	r12, Y+8	; 0x08
    731a:	df 80       	ldd	r13, Y+7	; 0x07
    731c:	ee 80       	ldd	r14, Y+6	; 0x06
    731e:	fd 80       	ldd	r15, Y+5	; 0x05
    7320:	0c 81       	ldd	r16, Y+4	; 0x04
    7322:	1b 81       	ldd	r17, Y+3	; 0x03
    7324:	aa 81       	ldd	r26, Y+2	; 0x02
    7326:	b9 81       	ldd	r27, Y+1	; 0x01
    7328:	ce 0f       	add	r28, r30
    732a:	d1 1d       	adc	r29, r1
    732c:	0f b6       	in	r0, 0x3f	; 63
    732e:	f8 94       	cli
    7330:	de bf       	out	0x3e, r29	; 62
    7332:	0f be       	out	0x3f, r0	; 63
    7334:	cd bf       	out	0x3d, r28	; 61
    7336:	ed 01       	movw	r28, r26
    7338:	08 95       	ret

0000733a <isspace>:
    733a:	91 11       	cpse	r25, r1
    733c:	06 c0       	rjmp	.+12     	; 0x734a <__ctype_isfalse>
    733e:	80 32       	cpi	r24, 0x20	; 32
    7340:	19 f0       	breq	.+6      	; 0x7348 <isspace+0xe>
    7342:	89 50       	subi	r24, 0x09	; 9
    7344:	85 50       	subi	r24, 0x05	; 5
    7346:	d0 f7       	brcc	.-12     	; 0x733c <isspace+0x2>
    7348:	08 95       	ret

0000734a <__ctype_isfalse>:
    734a:	99 27       	eor	r25, r25
    734c:	88 27       	eor	r24, r24

0000734e <__ctype_istrue>:
    734e:	08 95       	ret

00007350 <_exit>:
    7350:	f8 94       	cli

00007352 <__stop_program>:
    7352:	ff cf       	rjmp	.-2      	; 0x7352 <__stop_program>
